### üìÅ `models.py`

```python
from django.db import models
from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin, BaseUserManager

class UserRole(models.Model):
    role = models.CharField(max_length=50, unique=True)

    def __str__(self):
        return self.role


class UserProfileManager(BaseUserManager):
    def create_user(self, email, password, **extra_fields):
        if not email:
            raise ValueError("Email is required")
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
		–≠—Ç–æ –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç:
			- self.model ‚Äî —ç—Ç–æ –º–æ–¥–µ–ª—å, –∫ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏–≤—è–∑–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä. –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ ‚Äî UserProfile.
			- Django —Å–∞–º –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç self.model = UserProfile –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
			- extra_fields ‚Äî —ç—Ç–æ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –ø–µ—Ä–µ–¥–∞–ª: username, first_name, last_name, phone, role –∏ —Ç.–¥.
			- **extra_fields ‚Äî —ç—Ç–æ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ —Å–ª–æ–≤–∞—Ä—è –≤ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –º–æ–¥–µ–ª–∏.
		–≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≥–∏–±–∫–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ª—é–±—ã–µ –ø–æ–ª—è, –Ω–µ –ø–µ—Ä–µ—á–∏—Å–ª—è—è –∏—Ö –≤—Ä—É—á–Ω—É—é.
		
        user.set_password(password)
        user.save(using=self._db)
        return user
		
	## –ü–æ—á–µ–º—É –≤ `UserProfileManager.create_user()` –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ `email`, –∞ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è ‚Äî –Ω–µ—Ç?
	* –¢–æ–º—É —â–æ **email ‚Äî —Ü–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–µ –ø–æ–ª–µ**, —è–∫–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —è–∫ –ª–æ–≥—ñ–Ω (`USERNAME_FIELD = 'email'`).
	* –Ü–Ω—à—ñ –ø–æ–ª—è **–≤–≤–∞–∂–∞—é—Ç—å—Å—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏** ‚Äî –≤–æ–Ω–∏ –∞–±–æ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –≤ `REQUIRED_FIELDS`, –∞–±–æ –≤–∞–ª—ñ–¥—É—é—Ç—å—Å—è –ø—ñ–∑–Ω—ñ—à–µ, –Ω–∞ —Ä—ñ–≤–Ω—ñ **serializer** –∞–±–æ **—Ñ–æ—Ä–º**.
	---
	### ü§î –ê –Ω–∞–≤—ñ—â–æ —Ç–æ–¥—ñ –≤–∑–∞–≥–∞–ª—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ `email` –≤ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ, —è–∫—â–æ –≤—ñ–Ω —ñ —Ç–∞–∫ –≤–∞–ª—ñ–¥–æ–≤—É—î—Ç—å—Å—è –≤ —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ç–æ—Ä—ñ?

	**–î–æ–±—Ä–µ –ø–∏—Ç–∞–Ω–Ω—è!** –î—ñ–π—Å–Ω–æ, –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ `email` –º–æ–∂–µ –±—É—Ç–∏:

	* –≤ —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ç–æ—Ä—ñ (`validate_email`)
	* –≤ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ (`if not email: raise ValueError(...)`)

	#### ‚úÖ –ü—Ä–∏—á–∏–Ω—ã, –ø–æ—á–µ–º—É –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –≤ `create_user()`:

	1. **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ–¥–µ–ª–∏**
	   –Ø–∫—â–æ —Ö—Ç–æ—Å—å –≤–∏–∫–ª–∏–∫–∞—î `UserProfile.objects.create_user(...)` **–Ω–∞–ø—Ä—è–º—É**, –≤ –æ–±—Ö—ñ–¥ serializer, —Ç–æ `create_user()` –≥–∞—Ä–∞–Ω—Ç—É—î, —â–æ email –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –±—É–¥–µ.
	   üëâ –¶–µ –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –ø—Ä—è–º–æ–≥–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É.

	2. **–í–∏–º–æ–≥–∞ Django**
	   Django –æ—á—ñ–∫—É—î, —â–æ `create_user()` —ñ `create_superuser()` –±—É–¥—É—Ç—å —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏ –∫–ª—é—á–æ–≤–∏—Ö –ø–æ–ª—ñ–≤.

	3. **–°–µ—Äi–∞–ªi–∑–∞—Ç–æ—Ä = –∑–æ–≤–Ω—ñ—à–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å**,
	   –∞ `UserProfileManager` ‚Äî —Ü–µ **–≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π, –Ω–∏–∑—å–∫–æ—Ä—ñ–≤–Ω–µ–≤–∏–π** –∫–æ–¥, —è–∫–∏–π –≥–∞—Ä–∞–Ω—Ç—É—î, —â–æ –º–æ–¥–µ–ª—å –Ω–µ –∑–ª–∞–º–∞—î—Ç—å—Å—è –ø—Ä–∏ –±—É–¥—å-—è–∫–æ–º—É —Å–ø–æ—Å–æ–±—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

	---

    def create_superuser(self, email, password, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        return self.create_user(email, password, **extra_fields)


class UserProfile(AbstractBaseUser, PermissionsMixin):
    username = models.CharField(max_length=150, unique=True)
    email = models.EmailField(max_length=255, unique=True)
    first_name = models.CharField(max_length=150)
    last_name = models.CharField(max_length=150)
    phone = models.CharField(max_length=20, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    last_login = models.DateTimeField(null=True, blank=True)
    role = models.ForeignKey(UserRole, on_delete=models.SET_NULL, null=True)

    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)

    objects = UserProfileManager()

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['username', 'first_name', 'last_name']

    def __str__(self):
        return self.email
```

---

### üìÅ `serializers.py`

```python
from rest_framework import serializers
from django.contrib.auth.password_validation import validate_password
from .models import UserProfile


class UserRegistrationSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True)
    confirm_password = serializers.CharField(write_only=True)
	
    class Meta:
        model = UserProfile
        fields = [
            'username', 'email', 'password', 'confirm_password',
            'first_name', 'last_name', 'phone', 'role'
        ]

    def validate_password(self, value):
        validate_password(value)
        return value

    def validate(self, data):
        if data['password'] != data['confirm_password']:
            raise serializers.ValidationError({"password": "–ü–∞—Ä–æ–ª—ñ –Ω–µ –∑–±—ñ–≥–∞—é—Ç—å—Å—è."})
        return data
		
	def validate_email(self, value):
        if UserProfile.objects.filter(email=value).exists():
            raise serializers.ValidationError("–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –∞–¥—Ä–µ—Å–∞ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è.")
        return value

    def validate_username(self, value):
        if UserProfile.objects.filter(username=value).exists():
            raise serializers.ValidationError("–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∂–µ –∑–∞–π–Ω—è—Ç–µ.")
        return value

    def create(self, validated_data):
        validated_data.pop('confirm_password')
        password = validated_data.pop('password')
        return UserProfile.objects.create_user(password=password, **validated_data)
```

---

### üìÅ `views.py`

```python
from rest_framework import generics
from rest_framework.permissions import AllowAny
from .models import UserProfile
from .serializers import UserRegistrationSerializer


class UserRegistrationView(generics.CreateAPIView):
    queryset = UserProfile.objects.all()
    serializer_class = UserRegistrationSerializer
    permission_classes = [AllowAny]
```

---

### üìÅ `urls.py`

from django.urls import path
from .views import UserRegistrationView
from rest_framework_simplejwt.views import (
    TokenObtainPairView,
    TokenRefreshView,
)

urlpatterns = [
    path('signup/', UserRegistrationView.as_view(), name='user-signup'),
    path('login/', TokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
]


---

## ‚ùì –ß–æ–º—É –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è `ListView`?

`ListView` (—ñ –π–æ–≥–æ REST-–∞–Ω–∞–ª–æ–≥ `ListAPIView`) –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è **–¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è —Å–ø–∏—Å–∫—ñ–≤ –æ–±'—î–∫—Ç—ñ–≤** (GET-–∑–∞–ø–∏—Ç–∏), –∞ **—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è ‚Äî —Ü–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞** (POST-–∑–∞–ø–∏—Ç), —Ç–æ–º—É —Ç—É—Ç:

‚úÖ –ù–∞–π–∫—Ä–∞—â–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å `CreateAPIView` ‚Äî —Ü–µ generic-–∫–ª–∞—Å, —è–∫–∏–π:

* —Ä–µ–∞–ª—ñ–∑—É—î –º–µ—Ç–æ–¥ `post()`
* —Å–∞–º –≤–∏–∫–ª–∏–∫–∞—î `serializer.save()`
* –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ–≤–µ—Ä—Ç–∞—î `201 Created`

–¢–æ–º—É –Ω–µ–º–∞—î —Å–µ–Ω—Å—É –ø–∏—Å–∞—Ç–∏ —Ä—É—á–Ω–∏–π `APIView`, —è–∫—â–æ –Ω–µ–º–∞—î —Å–∫–ª–∞–¥–Ω–æ—ó –ª–æ–≥—ñ–∫–∏.

---

## üß™ –§—ñ–Ω–∞–ª—å–Ω—ñ –∫—Ä–æ–∫–∏

```bash
python manage.py makemigrations users
python manage.py migrate
python manage.py createsuperuser
```

---

## üîö –í–∏—Å–Ω–æ–≤–æ–∫

üîµ –¢–≤—ñ–π –∫–æ–¥ ‚Äî –¥—É–∂–µ –≥—Ä–∞–º–æ—Ç–Ω–∏–π —ñ –¥–æ–±—Ä–µ –ø—Ä–æ–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–∏–π.
üü¢ –ú–æ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è ‚Äî –æ–±'—î–¥–Ω–∞—Ç–∏ –π–æ–≥–æ –∑ –º–æ—ó–º –≤–∞—Ä—ñ–∞–Ω—Ç–æ–º –¥–ª—è:

* –∫—Ä–∞—â–æ—ó —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ (generic views)
* –∫—Ä–∞—â–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–ª—ñ–≤ (`confirm_password`)

## ‚úÖ –î–æ–¥–∞—é **–ø–æ–≤–Ω–∏–π –±–ª–æ–∫ –ø–æ JWT Authentication**, —è–∫ —á–∞—Å—Ç–∏–Ω—É *–∫—Ä–∞—â–æ–≥–æ –æ–±'—î–¥–Ω–∞–Ω–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É*:

---

### üìÅ `settings.py` ‚Äî JWT, REST —Ç–∞ –∫–∞—Å—Ç–æ–º–Ω–∏–π —é–∑–µ—Ä

```python
INSTALLED_APPS += [
    'rest_framework',
    'rest_framework_simplejwt',
    'users',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
}

AUTH_USER_MODEL = 'users.UserProfile'  # üí° –û–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –¥–æ –º—ñ–≥—Ä–∞—Ü—ñ–π

from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'AUTH_HEADER_TYPES': ('Bearer',),
}
```

---

### üìÅ `urls.py` ‚Äî JWT endpoints

```python
from django.urls import path
from .views import UserRegistrationView
from rest_framework_simplejwt.views import (
    TokenObtainPairView,
    TokenRefreshView,
)

urlpatterns = [
    path('signup/', UserRegistrationView.as_view(), name='user-signup'),
    path('login/', TokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
]
```

---

## üîë –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–µ–ø–µ—Ä—å JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è

| Endpoint                    | –ú–µ—Ç–æ–¥ | –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ                              |
| --------------------------- | ----- | --------------------------------------- |
| `/api/users/signup/`        | POST  | –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è         |
| `/api/users/login/`         | POST  | –ü–æ–ª—É—á–µ–Ω–∏–µ `access` –∏ `refresh` —Ç–æ–∫–µ–Ω–æ–≤  |
| `/api/users/token/refresh/` | POST  | –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ `access` —Ç–æ–∫–µ–Ω–∞ –ø–æ `refresh` |

### üîê –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ª–æ–≥–∏–Ω:

```http
POST /api/users/login/
Content-Type: application/json

{
  "email": "test@example.com",
  "password": "YourPassword123"
}
```

#### –û—Ç–≤–µ—Ç:

```json
{
  "access": "eyJ0eXAiOiJKV1QiLCJhbGciOi...",
  "refresh": "eyJ0eXAiOiJKV1QiLCJh..."
}
```

---

## üß™ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ç–µ–±—è

| –ö–∞—Ç–µ–≥–æ—Ä–∏—è                           | –ß—Ç–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –∏ –≥–¥–µ               |
| ----------------------------------- | ----------------------------------- |
| –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è                 | `UserProfile` –≤ `models.py`         |
| –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è                   | `UserRole` –≤ `models.py`            |
| –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è               | `UserProfileManager`                |
| JWT –ª–æ–≥–∏–∫–∞                          | `settings.py` + `urls.py`           |
| –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è            | `UserRegistrationView`              |
| –í–∞–ª–∏–¥–∞—Ü–∏–∏ email, username, password | –í —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–µ                     |
| –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã Django                    | –í—Å—ñ –±–∞–∑–æ–≤—ñ best practices –¥–æ—Ç—Ä–∏–º–∞–Ω—ñ |

---

### üß† –Ø–∫—â–æ –±—É–¥–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ —É –ë–î

–ö–æ–ª–∏ —Ç–∏ –∑–∞—Ö–æ—á–µ—à –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ JWT —Ç–æ–∫–µ–Ω–∏ –≤ –±–∞–∑—ñ —Ç–∞ –∑–≤'—è–∑—É–≤–∞—Ç–∏ `last_login` –∑ JWT, —è –ø—ñ–¥–∫–∞–∂—É —è–∫:

* –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `rest_framework_simplejwt.token_blacklist`
* —Å—Ç–≤–æ—Ä–∏—Ç–∏ middleware, —è–∫–∏–π –æ–Ω–æ–≤–ª—é—î `last_login`
* –ø–∏—Å–∞—Ç–∏ –∫–∞—Å—Ç–æ–º–Ω–∏–π `TokenObtainPairView`, —â–æ–± –ª–æ–≥—ñ–∫–∞ JWT –±—É–ª–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–∞

---

–•–æ—á–µ—à ‚Äî —è –º–æ–∂—É —Ç–æ–±—ñ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ Postman Collection –¥–ª—è –≤—Å—ñ—Ö endpoint'—ñ–≤ –∞–±–æ –æ–ø–∏—Å–∞—Ç—å Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é.

–ì–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∫—Ä–æ–∫–æ–º ‚úÖ
