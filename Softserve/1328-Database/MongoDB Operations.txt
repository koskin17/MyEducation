-- Вставка объектов (записей) в коллекцию
--- Объекты могут вставляться как один, так и несколько за один раз. Вставляются они в формате JSON.
--- Вставка объектов в MongoDB выглядит следующим образом: db.users.insertOne(
																			{
																				name: "sue",
																				age: 26,
																				status: "A".
																			}
																			)
	где:
		- db - это ссылка на саму базу данных;
		- users - имя коллекции, в которую мы обращаемся/в которую будут вставляться объекты/информация;
			Если коллекции, имя которой мы указали, в БД нет, то коллекция будет создана автоматически;
		- insertOne - это уже метод или команда вставки объекта в коллекцию;
		- далее идет описание объекта, который мы вставляем, т.е. ключ:значение.
		
-- Если в SQL продукт, к примеру, может иметь много категорий и это реализуется через промежуточную таблицу и связями, то в MongoDB это реализуется через отдельную коллекцию - коллекцию Category и в неё ставить category_id.
В уроке пошли по нерелиационному подходу, т.е. денормализовали БД и сделали массив категорий.

-- Даже при условии, что в коллекцию можно сохранять разные объекты с разными полями, хорошей практикой в MongoDB является принцип, чтобы более-менее основные поля совпадали у объектов.

-- Также в MongoDB можно вставлять и более сложные объекты по структуре.
--- В примеру, есть коллекция clients и у объектов в коллекции клиентов может быть не только имя и id, но и поле orders, к примеру, которое будет хранить целый массив со всеми заказами конкретного клиента, независимо от их кол-ва. Пример:
			{"_id":{"$oid":"67cfed88d0a2fd0f76734310"}, - это автоматическое поле в MongoDB
			"name": "Patron",
			"orders": [ - в этом случае поле orders хранит в себе массив, который состоит из объектов
			  {
				"products": [ - и поле products также хранит в себе массив
				  {
					"name": "Mobile Phone",
					"quantity": 2
				  }
				],
				"order_date": {"$date": "2025-03-06"} - в этом случае дата записана как строка (это в MongoDB можно) и для того, чтобы MongoDb понимала, что это строка и в ней дата, используется расширенный синтаксис:
					- в нём значок "$" означает, что это сложный тип данных;
					- дальше идёт, в нашем случае, сама дата.
			  }
			]
			}
			
		В результате у нас вставляется объект, в который вложен масси, в который ещё вложен объект с вложенным массивом.
		
-- Обновление данных в MongoDB
--- Синтаксис обновления данных в MongoDB выглядит следующим образом:
	db.users.updateMany(
		{age: {$gt: 18}}, - это объект-критерий, аналогичный условию WHERE в SQL: указывается имя колонки, к которой применяется условие, и далее спецсинтаксис "$gt:18", который говорил про "возраст больше 18".
		Про "больше" говорит ключ "$gt" или GreatThen 
		{$set: {status: "A"}}, - это оператор установки значения
	)
	
-- Удаление данных в MongoDB
--- Синтаксис удаления данных выглядит следующим образом:
	db.users.remove( - указание БД и коллекции, в которой мы хотим удалить данные
		{status: "D"} - указание критерия, по которому отобрать записи, которые мы удаляем
	)
	
-- Поиск данных в MongoDB
--- В UI (на сайте) для поиска информации в коллекциях существует "синтаксический сахар".
	К примеру: {"category": "Accessories"} - это означает "Найди все объекты, где в массиве category будет значение Elecronic"
	По факту, в MongoDB выполняетя следующая команда:
		{"category": {"$elemMatch": {"$eq": "Accessories"}}} - в массиве category найди элемент, который совпадает ($elemMatch) со следующим: равен ($eq, а также может быть "больше" или "меньше") Accessories
		
-- Также в MongoDB UI (на сайте) можно передавать основные параметры: проекция и сортировка.
--- Проекция - это возможность видеть только те поля, которые мы хотим видеть.
	Это позволяет в UI на сайте отображать в коллекциях только то, что мы хотим видеть.
	{"_id: 0}
	
	Если нужно оставить только конкретную информацию, то используется следующий синтаксис:
	{"name": 1, "quantity": 1} - Т.е. "0" - не показывать поле, а "1" - показывать. Мы перечисляем поля, которые хотим видеть и по этим полям ставим "1".
	
	Проекция с параметром "1" является аналогом SELECT с передачей полей.
	
--- Сортировка в MongoDB UI (на сайте).
	Указывается имя поля, по которому сортируется и или "0", или "1".
	К примеру, {"quantity": 1} - это значит "по возрастанию"
				{"quantity": -1} - это значит "по убыванию".
				
-- Обращаемся в MongoDB к вложенным данным в MongoDB UI (на сайте).
--- {"orders.products.quantity": 1} - в заказах найти продукты, в котороых кол-во равно 1.