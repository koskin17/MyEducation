# Class Student has attributes full_name:str, avg_rank: float, courses: list
# Class Group has attributes title: str, students: list.

# Make both classes JSON serializable. 

# Json-files represent information about student (students). 

# Create methods:  

# Student.from_json(json_file) that return Student instance from attributes from json-file;

# Student.serialize_to_json(filename)

# Group.serialize_to_json(list_of_groups, filename)

# Group.create_group_from_file(students_file)

# Parse given files, create instances of Student class and create instances of Group class (title for group is name of json-file without extension).

import json
import os
from json import JSONEncoder

class Student:
    """Student class with information about the student."""
    def __init__(self, full_name: str, avg_rank: float, courses: list):
        self.full_name = full_name
        self.avg_rank = avg_rank
        self.courses = courses

    def serialize_to_json(self, filename: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—ä–µ–∫—Ç Student –≤ JSON-—Ñ–∞–π–ª."""
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(self, f, cls=StudentEncoder, ensure_ascii=False) # –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞—Å—Ç–æ–º–Ω—ã–π StudentEncoder, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω –Ω–∏–∂–µ –≤ –∫–æ–¥–µ

    @classmethod
    def from_json(cls, json_file: str):
        """–°–æ–∑–¥–∞—ë—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä Student –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
        if not os.path.exists(json_file):
            raise FileNotFoundError(f"File {json_file} not found!")
        with open(json_file, "r", encoding="utf-8") as f:
            data = json.load(f)
        # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–∫–∞–∑–∞–ª–∏—Å—å —Å–ø–∏—Å–∫–æ–º, –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π).
        if isinstance(data, list):
            if not data:
                raise ValueError("Empty student list in file")
            data = data[0]
        return cls(**data)

    def __str__(self):
        # –¢–µ—Å—Ç—ã –æ–∂–∏–¥–∞—é—Ç –≤—ã–≤–æ–¥ –≤–∏–¥–∞:
        # "Student2 from group2 (50.4): ['C++']"
        return f"{self.full_name} ({self.avg_rank}): {self.courses}"

    def __repr__(self):
        return self.__str__()

        # ## üìå –†–ê–ó–ù–ò–¶–ê –ú–ï–ñ–î–£ __str__ –∏ __repr__?
        # | –ú–µ—Ç–æ–¥      | –î–ª—è —á–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è                                | –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–ª–∏–∫—É                          |
        # | ---------- | -------------------------------------------------------- | ---------------------------------------- |
        # | `__str__`  | –î–ª—è **–ª—é–¥–µ–π** ‚Äì –≥–∞—Ä–Ω–µ, —á–∏—Ç–∞–±–µ–ª—å–Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è          | `print(obj)`                             |
        # | `__repr__` | –î–ª—è **—Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤** ‚Äì —Ç–µ—Ö–Ω—ñ—á–Ω–µ, –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è | `obj` –≤ `REPL`, —Å–ø–∏—Å–∫–∞—Ö, –∞–±–æ `repr(obj)` |

        # ## üß™ –ü—Ä–∏–∫–ª–∞–¥:
        # class Dog:
        #     def __init__(self, name):
        #         self.name = name

        #     def __str__(self):
        #         return f"–¶–µ –ø–µ—Å–∏–∫ {self.name}"

        #     def __repr__(self):
        #         return f"Dog('{self.name}')"

        # d = Dog("–ë–∞—Ä–æ–Ω")

        # print(d)           # –í–∏–∫–ª–∏–∫–∞—î __str__ ‚Üí –¶–µ –ø–µ—Å–∏–∫ –ë–∞—Ä–æ–Ω
        # print([d])         # –í–∏–∫–ª–∏–∫–∞—î __repr__ ‚Üí [Dog('–ë–∞—Ä–æ–Ω')]

        # ## ‚ùì –ê —è–∫—â–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –ª–∏—à–µ `__str__`, –∞ `__repr__` –Ω–µ –ø–∏—Å–∞—Ç–∏?
        # Python –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ **–±–∞–∑–æ–≤–∏–π `__repr__`** —Ç–∏–ø—É:
        # ```
        # <__main__.Dog object at 0x000001234>
        # ```
        # üëé –¶–µ —Ç–µ—Ö–Ω—ñ—á–Ω–µ —ñ –Ω–µ—ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è.
        # ---
        # ## ‚úÖ –¢–æ–º—É –º–∏ —á–∞—Å—Ç–æ –ø–∏—à–µ–º–æ:
        # ```python
        # def __repr__(self):
        #     return self.__str__()
        # ```
        # üü¢ –¶–µ –æ–∑–Ω–∞—á–∞—î: —è–∫—â–æ Python —Ö–æ—á–µ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –≤–∏–≥–ª—è–¥, –ø–æ–∫–∞–∑—É–π —Ç–æ–π —Å–∞–º–∏–π —Ç–µ–∫—Å—Ç, —â–æ –π –¥–ª—è –ª—é–¥–µ–π.
        # ---
        # ## üìå –ü—ñ–¥—Å—É–º–æ–∫:
        # | –Ø–∫—â–æ —Ç–∏...                                    | –¢–æ —Ä–æ–±–∏ —Ç–∞–∫ ‚úÖ                              |
        # | --------------------------------------------- | ------------------------------------------ |
        # | –•–æ—á–µ—à –≥–∞—Ä–Ω–∏–π `print(obj)`                     | –†–µ–∞–ª—ñ–∑—É–π `__str__`                         |
        # | –•–æ—á–µ—à –≥–∞—Ä–Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –≤ —Å–ø–∏—Å–∫–∞—Ö, –ª–æ–≥–∞—Ö    | –†–µ–∞–ª—ñ–∑—É–π `__repr__`, –∞–±–æ —Å–∫–æ–ø—ñ—é–π `__str__` |
        # | –•–æ—á–µ—à –æ–∫—Ä–µ–º—ñ: —Ç–µ—Ö–Ω—ñ—á–Ω–µ (repr) —ñ –∫—Ä–∞—Å–∏–≤–µ (str) | –†–µ–∞–ª—ñ–∑—É–π –æ–±–∏–¥–≤–∞ –ø–æ-—Ä—ñ–∑–Ω–æ–º—É                 |
        # ---
        # ## ‚ú® –í–∏—Å–Ω–æ–≤–æ–∫:
        # > üîß –Ø–∫—â–æ —Ç–∏ –≤–∂–µ –º–∞—î—à `__str__` —ñ –Ω–µ —Ö–æ—á–µ—à –æ–∫—Ä–µ–º–∏–π —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π `__repr__`, –ø—Ä–æ—Å—Ç–æ:
        # ```python
        # def __repr__(self):
        #     return self.__str__()
        # ```
        # –¶–µ –ø–æ–≤–Ω—ñ—Å—Ç—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ —ñ –∑—Ä—É—á–Ω–æ –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –∫–æ–¥—É.

class Group:
    """–ö–ª–∞—Å—Å Group –¥–ª—è –≥—Ä—É–ø–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤."""
    def __init__(self, title: str, students: list):
        self.title = title
        self.students = students

    @classmethod
    def create_group_from_file(cls, students_file: str):
        """
        –°–æ–∑–¥–∞—ë—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä Group –∏–∑ JSON-—Ñ–∞–π–ª–∞ —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö.
        –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –±–µ—Ä—ë—Ç—Å—è –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è).
        
        –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:
         - –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ (—Å–ª–æ–≤–∞—Ä—å), —Ç–æ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫,
           —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏ –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ.
        """
        if not os.path.exists(students_file):
            raise FileNotFoundError(f"File {students_file} not found")
        with open(students_file, "r", encoding="utf-8") as f:
            data = json.load(f)
            print()
            print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ data –ø—Ä–∏ —Ä–∞–∑–≥—Ä—É–∑–∫–µ —á–µ—Ä–µ–∑ json.load:{data}")
            print()
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ ‚Äì —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å (–æ–¥–∏–Ω —Å—Ç—É–¥–µ–Ω—Ç), –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫.
        if isinstance(data, dict):
            data = [data]
        elif not isinstance(data, list):
            raise ValueError(f"Expected list or dict in {students_file}, got {type(data).__name__}")
        students = []
        for student_data in data:
            if not isinstance(student_data, dict):
                raise TypeError("Each student record must be a dictionary")
            students.append(Student(**student_data))
        # –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã ‚Äì –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è.
        title = os.path.splitext(os.path.basename(students_file))[0]
        return cls(title, students)

    @staticmethod
    def serialize_to_json(list_of_groups, filename: str):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –≤ JSON-—Ñ–∞–π–ª.
        **–í–∞–∂–Ω–æ:** JSON –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ (–±–µ–∑ –æ—Ç—Å—Ç—É–ø–æ–≤), —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–∞–º.
        """
        groups_data = [
            {"title": group.title, "students": [student.__dict__ for student in group.students]}
            for group in list_of_groups
        ]
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(groups_data, f, ensure_ascii=False)

    def __str__(self):
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –≤–∏–¥–µ:
        2020_2: ["Student 1 from second Group (98): ['Python']", "Student 2 from second Group (70.34): ['Ruby', 'Python', 'Frontend development']"]
        """
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤—ã–∑—ã–≤–∞–µ–º __str__ (–∫–æ—Ç–æ—Ä—ã–π —É–∂–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º)
        students_str = [str(student) for student in self.students]
        return f"{self.title}: {students_str}"

    def __repr__(self):
        return self.__str__()

class StudentEncoder(JSONEncoder):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π JSONEncoder –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ Student."""
    def default(self, obj):
        if isinstance(obj, Student):
            return obj.__dict__
        return super().default(obj)

## üì¶ –Ü–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—ñ–≤
# ```python
# import json
# import os
# from json import JSONEncoder

# * `json` ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –º–æ–¥—É–ª—å Python –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ JSON: —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è (–ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤ —É JSON) —Ç–∞ –¥–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è (–∑ JSON —É –æ–±'—î–∫—Ç–∏).
# * `os` ‚Äî –º–æ–¥—É–ª—å –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω–æ—é —Å–∏—Å—Ç–µ–º–æ—é, –∑–æ–∫—Ä–µ–º–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —Ç–∞ —Ä–æ–±–æ—Ç–∏ –∑ —à–ª—è—Ö–∞–º–∏.
# * `JSONEncoder` ‚Äî –±–∞–∑–æ–≤–∏–π –∫–ª–∞—Å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–∏—Ö –µ–Ω–∫–æ–¥–µ—Ä—ñ–≤, —è–∫—ñ –¥–æ–∑–≤–æ–ª—è—é—Ç—å —Å–µ—Ä—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –æ–±'—î–∫—Ç–∏.

## üéì –ö–ª–∞—Å `Student`
# class Student:
#     """–ö–ª–∞—Å Student –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Å—Ç—É–¥–µ–Ω—Ç–∞."""
#     def __init__(self, full_name: str, avg_rank: float, courses: list):
#         self.full_name = full_name
#         self.avg_rank = avg_rank
#         self.courses = courses
# * `__init__` ‚Äî –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—É, —è–∫–∏–π —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –∞—Ç—Ä–∏–±—É—Ç–∏:
#   * `full_name` ‚Äî –ø–æ–≤–Ω–µ —ñ–º'—è —Å—Ç—É–¥–µ–Ω—Ç–∞.
#   * `avg_rank` ‚Äî —Å–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª.
#   * `courses` ‚Äî —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å—ñ–≤, —è–∫—ñ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç.

### üíæ –ú–µ—Ç–æ–¥ `serialize_to_json`
#     def serialize_to_json(self, filename: str):
#         """
#         –ó–±–µ—Ä—ñ–≥–∞—î –æ–±'—î–∫—Ç Student —É JSON-—Ñ–∞–π–ª.
#         **–í–∞–∂–ª–∏–≤–æ:** –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—É JSON –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∑–∞–ø–∏—Å–∞–Ω–∏–π —É –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º—É –≤–∏–≥–ª—è–¥—ñ, –±–µ–∑ –≤—ñ–¥—Å—Ç—É–ø—ñ–≤.
#         """
#         with open(filename, "w", encoding="utf-8") as f:
#             json.dump(self, f, cls=StudentEncoder, ensure_ascii=False)

# * –í—ñ–¥–∫—Ä–∏–≤–∞—î —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å—É –∑ –∫–æ–¥—É–≤–∞–Ω–Ω—è–º UTF-8.
# * `json.dump` ‚Äî —Å–µ—Ä—ñ–∞–ª—ñ–∑—É—î –æ–±'—î–∫—Ç `self` —É JSON —Ç–∞ –∑–∞–ø–∏—Å—É—î —É —Ñ–∞–π–ª.

#   * `cls=StudentEncoder` ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤–ª–∞—Å–Ω–∏–π –µ–Ω–∫–æ–¥–µ—Ä –¥–ª—è —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –æ–±'—î–∫—Ç–∞ `Student`.
#   * `ensure_ascii=False` ‚Äî –¥–æ–∑–≤–æ–ª—è—î –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —Å–∏–º–≤–æ–ª–∏ Unicode (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏) –±–µ–∑ –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è.

### üì• –ú–µ—Ç–æ–¥ `from_json`
    # @classmethod
    # def from_json(cls, json_file: str):
    #     """
    #     –°—Ç–≤–æ—Ä—é—î –µ–∫–∑–µ–º–ø–ª—è—Ä Student –∑ JSON-—Ñ–∞–π–ª—É.
    #     –§–∞–π–ª –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ JSON-–æ–±'—î–∫—Ç (—Å–ª–æ–≤–Ω–∏–∫), –∞ –Ω–µ —Å–ø–∏—Å–æ–∫.
    #     """
    #     if not os.path.exists(json_file):
    #         raise FileNotFoundError(f"–§–∞–π–ª {json_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
    #     with open(json_file, "r", encoding="utf-8") as f:
    #         data = json.load(f)
    #     # –Ø–∫—â–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –¥–∞–Ω—ñ —î —Å–ø–∏—Å–∫–æ–º, –±–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç.
    #     if isinstance(data, list):
    #         if not data:
    #             raise ValueError("–ü–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É —Ñ–∞–π–ª—ñ")
    #         data = data[0]
    #     return cls(**data)

# * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É.
# * –í—ñ–¥–∫—Ä–∏–≤–∞—î —Ñ–∞–π–ª –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è –∑ –∫–æ–¥—É–≤–∞–Ω–Ω—è–º UTF-8.
# * `json.load` ‚Äî –¥–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑—É—î JSON —É Python-–æ–±'—î–∫—Ç.
# * –Ø–∫—â–æ –¥–∞–Ω—ñ ‚Äî —Å–ø–∏—Å–æ–∫, –±–µ—Ä–µ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç (–ø—Ä–∏–ø—É—Å–∫–∞—é—á–∏, —â–æ —Ñ–∞–π–ª –º—ñ—Å—Ç–∏—Ç—å –æ–¥–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞).
# * –ü–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä `Student`, —Ä–æ–∑–ø–∞–∫–æ–≤—É—é—á–∏ —Å–ª–æ–≤–Ω–∏–∫ `data` —É –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞.

### üñ®Ô∏è –ú–µ—Ç–æ–¥ `__str__`
    # def __str__(self):
    #     # –¢–µ—Å—Ç–∏ –æ—á—ñ–∫—É—é—Ç—å –≤–∏–≤—ñ–¥ —É —Ñ–æ—Ä–º–∞—Ç—ñ:
    #     # "Student2 from group2 (50.4): ['C++']"
    #     return f"{self.full_name} ({self.avg_rank}): {self.courses}"
# * –ü–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–∫–æ–≤–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ `Student` —É –∑–∞–¥–∞–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ.

### üßæ –ú–µ—Ç–æ–¥ `__repr__`
    # def __repr__(self):
    #     return self.__str__()
# * –ü–æ–≤–µ—Ä—Ç–∞—î —Ç–µ —Å–∞–º–µ, —â–æ —ñ `__str__`, –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É —Å–ø–∏—Å–∫–∞—Ö —Ç–∞ —ñ–Ω—à–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö.

## üë• –ö–ª–∞—Å `Group`
# class Group:
#     """–ö–ª–∞—Å Group –¥–ª—è –≥—Ä—É–ø–∏ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤."""
#     def __init__(self, title: str, students: list):
#         self.title = title
#         self.students = students
# * `title` ‚Äî –Ω–∞–∑–≤–∞ –≥—Ä—É–ø–∏.
# * `students` ‚Äî —Å–ø–∏—Å–æ–∫ –æ–±'—î–∫—Ç—ñ–≤ `Student`.

### üèóÔ∏è –ú–µ—Ç–æ–¥ `create_group_from_file`
    # @classmethod
    # def create_group_from_file(cls, students_file: str):
    #     """
    #     –°—Ç–≤–æ—Ä—é—î –µ–∫–∑–µ–º–ø–ª—è—Ä Group –∑ JSON-—Ñ–∞–π–ª—É, —â–æ –º—ñ—Å—Ç–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤.
    #     –ù–∞–∑–≤–∞ –≥—Ä—É–ø–∏ –±–µ—Ä–µ—Ç—å—Å—è –∑ —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É (–±–µ–∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è).
    #     """
    #     if not os.path.exists(students_file):
    #         raise FileNotFoundError(f"–§–∞–π–ª {students_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    #     with open(students_file, "r", encoding="utf-8") as f:
    #         data = json.load(f)
    #     # –Ø–∫—â–æ –¥–∞–Ω—ñ ‚Äî —Å–ª–æ–≤–Ω–∏–∫ (–æ–¥–∏–Ω —Å—Ç—É–¥–µ–Ω—Ç), –æ–±–≥–æ—Ä—Ç–∞—î–º–æ —É —Å–ø–∏—Å–æ–∫.
    #     if isinstance(data, dict):
    #         data = [data]
    #     elif not isinstance(data, list):
    #         raise ValueError(f"–û—á—ñ–∫—É–≤–∞–≤—Å—è —Å–ø–∏—Å–æ–∫ –∞–±–æ —Å–ª–æ–≤–Ω–∏–∫ —É {students_file}, –æ—Ç—Ä–∏–º–∞–Ω–æ {type(data).__name__}")
    #     students = []
    #     for student_data in data:
    #         if not isinstance(student_data, dict):
    #             raise TypeError("–ö–æ–∂–µ–Ω –∑–∞–ø–∏—Å —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —Å–ª–æ–≤–Ω–∏–∫–æ–º")
    #         students.append(Student(**student_data))
    #     # –ù–∞–∑–≤–∞ –≥—Ä—É–ø–∏ ‚Äî —ñ–º'—è —Ñ–∞–π–ª—É –±–µ–∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è.
    #     title = os.path.splitext(os.path.basename(students_file))[0]
    #     return cls(title, students)

# * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É.
# * –í—ñ–¥–∫—Ä–∏–≤–∞—î —Ñ–∞–π–ª –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è –∑ –∫–æ–¥—É–≤–∞–Ω–Ω—è–º UTF-8.
# * –î–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑—É—î JSON —É Python-–æ–±'—î–∫—Ç.
# * –Ø–∫—â–æ –¥–∞–Ω—ñ ‚Äî —Å–ª–æ–≤–Ω–∏–∫, –æ–±–≥–æ—Ä—Ç–∞—î —É —Å–ø–∏—Å–æ–∫.
# * –°—Ç–≤–æ—Ä—é—î —Å–ø–∏—Å–æ–∫ –æ–±'—î–∫—Ç—ñ–≤ `Student`.
# * –í–∏–∑–Ω–∞—á–∞—î –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏ –∑ —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É.
# * –ü–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä `Group`.

### üíæ –ú–µ—Ç–æ–¥ `serialize_to_json`
    # @staticmethod
    # def serialize_to_json(list_of_groups, filename: str):
    #     """
    #     –ó–±–µ—Ä—ñ–≥–∞—î —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø —É JSON-—Ñ–∞–π–ª.
    #     **–í–∞–∂–ª–∏–≤–æ:** JSON –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∑–∞–ø–∏—Å–∞–Ω–∏–π —É –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º—É –≤–∏–≥–ª—è–¥—ñ (–±–µ–∑ –≤—ñ–¥—Å—Ç—É–ø—ñ–≤), —â–æ–± –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ —Ç–µ—Å—Ç–∞–º.
    #     """
    #     groups_data = [
    #         {"title": group.title, "students": [student.__dict__ for student in group.students]}
    #         for group in list_of_groups
    #     ]
    #     with open(filename, "w", encoding="utf-8") as f:
    #         json.dump(groups_data, f, ensure_ascii=False)
# * –°—Ç–≤–æ—Ä—é—î —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤, —â–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç—å –≥—Ä—É–ø–∏ —Ç–∞ —ó—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤.
# * –í—ñ–¥–∫—Ä–∏–≤–∞—î —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å—É –∑ –∫–æ–¥—É–≤–∞–Ω–Ω—è–º UTF-8.
# * –°–µ—Ä—ñ–∞–ª—ñ–∑—É—î —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø —É JSON —Ç–∞ –∑–∞–ø–∏—Å—É—î —É —Ñ–∞–π–ª.

# –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º indent:
# def serialize_to_json(self, filename: str):
#         """Save the Student object to a JSON file."""
#         with open(filename, "w", encoding="utf-8") as f:
#             json.dump(self, f, cls=StudentEncoder, indent=4, ensure_ascii=False)

#         # üîπ **–ü–∞—Ä–∞–º–µ—Ç—Ä `indent=4`** –≤ `json.dump()` –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ **—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JSON-–¥–∞–Ω–Ω—ã—Ö** –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª.
#         # ### **üìå –ß—Ç–æ –¥–µ–ª–∞–µ—Ç `indent=4`?**
#         # - –£–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ **–∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏** –±—É–¥–µ—Ç **—Å–¥–≤–∏–≥–∞—Ç—å—Å—è –Ω–∞ 4 –ø—Ä–æ–±–µ–ª–∞**.
#         # - –î–µ–ª–∞–µ—Ç JSON-—Ñ–∞–π–ª **—á–∏—Ç–∞–±–µ–ª—å–Ω—ã–º**, –¥–æ–±–∞–≤–ª—è—è –æ—Ç—Å—Ç—É–ø—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫.
#         # ### **üõ† –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è**
#         # #### ‚ùå **–ë–µ–∑ `indent` (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π JSON)**
#         # import json
#         # data = {"name": "Alice", "age": 25, "courses": ["Math", "Physics"]}
#         # with open("compact.json", "w", encoding="utf-8") as f:
#         #     json.dump(data, f)  # –ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
#         # # –í—ã–≤–æ–¥ compact.json:
#         # # {"name":"Alice","age":25,"courses":["Math","Physics"]}
#         # #### ‚úÖ **–° `indent=4` (–æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON)**
#         # with open("pretty.json", "w", encoding="utf-8") as f:
#         #     json.dump(data, f, indent=4)  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
#         # ‚úî **–¢–µ–ø–µ—Ä—å JSON –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:**
#         # {
#         #     "name": "Alice",
#         #     "age": 25,
#         #     "courses": [
#         #         "Math",
#         #         "Physics"
#         #     ]
#         # }
#         # ### **üí° –ò—Ç–æ–≥**
#         # üöÄ `indent=4` –¥–µ–ª–∞–µ—Ç JSON **–∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º** –∏ —É–¥–æ–±–Ω—ã–º –¥–ª—è —á—Ç–µ–Ω–∏—è.  
#         # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ **–Ω–µ –Ω–∞–¥–æ —Å–∂–∏–º–∞—Ç—å**, –ª—É—á—à–µ –≤–∫–ª—é—á–∏—Ç—å —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä!

### üñ®Ô∏è –ú–µ—Ç–æ–¥ `__str__`
    # def __str__(self):
    #     """
    #     –§–æ—Ä–º—É—î —Ä—è–¥–æ–∫ —É –≤–∏–≥–ª—è–¥—ñ:
    #     2020_2: ["Student 1 from second Group (98): ['Python']", "Student 2 from second Group (70.34): ['Ruby', 'Python', 'Frontend development']"]
    #     """
    #     students_str = [str(student) for student in self.students]
    #     return f"{self.title}: {students_str}"
# * –ü–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–∫–æ–≤–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –≥—Ä—É–ø–∏ —Ç–∞ —ó—ó —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É –∑–∞–¥–∞–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ.

### üßæ –ú–µ—Ç–æ–¥ `__repr__`
    # def __repr__(self):
    #     return self.__str__()
# * –ü–æ–≤–µ—Ä—Ç–∞—î —Ç–µ —Å–∞–º–µ, —â–æ —ñ `__str__`, –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É —Å–ø–∏—Å–∫–∞—Ö —Ç–∞ —ñ–Ω—à–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö.

## üõ†Ô∏è –ö–ª–∞—Å `StudentEncoder`
# class StudentEncoder(JSONEncoder):
#     """–ö–∞—Å—Ç–æ–º–Ω–∏–π JSONEncoder –¥–ª—è —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –æ–±'—î–∫—Ç—ñ–≤ Student."""
#     def default(self, obj):
#         if isinstance(obj, Student):
#             return obj.__dict__
#         return super().default(obj)
# * –ù–∞—Å–ª—ñ–¥—É—î—Ç—å—Å—è –≤—ñ–¥ `JSONEncoder`.
# * –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—î –º–µ—Ç–æ–¥ `default`, —â–æ–± —Å–µ—Ä—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –æ–±'—î–∫—Ç–∏ `Student` —É —Å–ª–æ–≤–Ω–∏–∫–∏.
# * –Ø–∫—â–æ –æ–±'—î–∫—Ç –Ω–µ —î `Student`, –≤–∏–∫–ª–∏–∫–∞—î –º–µ—Ç–æ–¥ `default` –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—É.

## ‚úÖ –ü—ñ–¥—Å—É–º–æ–∫
# –¶–µ–π –∫–æ–¥ –¥–æ–∑–≤–æ–ª—è—î:
# * –°—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –æ–±'—î–∫—Ç–∏ `Student` —Ç–∞ `Group`.
# * –°–µ—Ä—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —ó—Ö —É JSON-—Ñ–∞–π–ª–∏.
# * –î–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑ JSON-—Ñ–∞–π–ª—ñ–≤.
# * –í–∏–≤–æ–¥–∏—Ç–∏ –æ–±'—î–∫—Ç–∏ —É –∑—Ä—É—á–Ω–æ–º—É –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—ñ.

# –î–ê–õ–¨–®–ï –ò–î–£–¢ –í–ê–†–ò–ù–ê–¢–´ –ö–û–î–ê –° –û–®–ò–ë–ö–ê–ú–ò, –ö–û–¢–û–†–´–ï –ò–°–ü–†–ê–í–õ–Ø–õ–ò–°–¨, –ò –û–ë–™–Ø–°–ù–ï–ù–ò–ï–ú –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô

# import json
# import os
# from json import JSONEncoder

# class Student:
#     """Student class with information about the student."""
#     def __init__(self, full_name: str, avg_rank: float, courses: list):
#         self.full_name = full_name
#         self.avg_rank = avg_rank
#         self.courses = courses

#     def serialize_to_json(self, filename: str):
#         """Save the Student object to a JSON file."""
#         with open(filename, "w", encoding="utf-8") as f:
#             json.dump(self, f, cls=StudentEncoder, indent=4, ensure_ascii=False)

#         # üîπ **–ü–∞—Ä–∞–º–µ—Ç—Ä `indent=4`** –≤ `json.dump()` –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ **—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JSON-–¥–∞–Ω–Ω—ã—Ö** –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª.
#         # ### **üìå –ß—Ç–æ –¥–µ–ª–∞–µ—Ç `indent=4`?**
#         # - –£–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ **–∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏** –±—É–¥–µ—Ç **—Å–¥–≤–∏–≥–∞—Ç—å—Å—è –Ω–∞ 4 –ø—Ä–æ–±–µ–ª–∞**.
#         # - –î–µ–ª–∞–µ—Ç JSON-—Ñ–∞–π–ª **—á–∏—Ç–∞–±–µ–ª—å–Ω—ã–º**, –¥–æ–±–∞–≤–ª—è—è –æ—Ç—Å—Ç—É–ø—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫.
#         # ### **üõ† –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è**
#         # #### ‚ùå **–ë–µ–∑ `indent` (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π JSON)**
#         # import json
#         # data = {"name": "Alice", "age": 25, "courses": ["Math", "Physics"]}
#         # with open("compact.json", "w", encoding="utf-8") as f:
#         #     json.dump(data, f)  # –ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
#         # # –í—ã–≤–æ–¥ compact.json:
#         # # {"name":"Alice","age":25,"courses":["Math","Physics"]}
#         # #### ‚úÖ **–° `indent=4` (–æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON)**
#         # with open("pretty.json", "w", encoding="utf-8") as f:
#         #     json.dump(data, f, indent=4)  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
#         # ‚úî **–¢–µ–ø–µ—Ä—å JSON –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:**
#         # {
#         #     "name": "Alice",
#         #     "age": 25,
#         #     "courses": [
#         #         "Math",
#         #         "Physics"
#         #     ]
#         # }
#         # ### **üí° –ò—Ç–æ–≥**
#         # üöÄ `indent=4` –¥–µ–ª–∞–µ—Ç JSON **–∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º** –∏ —É–¥–æ–±–Ω—ã–º –¥–ª—è —á—Ç–µ–Ω–∏—è.  
#         # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ **–Ω–µ –Ω–∞–¥–æ —Å–∂–∏–º–∞—Ç—å**, –ª—É—á—à–µ –≤–∫–ª—é—á–∏—Ç—å —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä!

#     @classmethod
#     def from_json(cls, json_file: str):
#         """Creating a Student instance from a JSON file."""
#         if not os.path.exists(json_file):
#             raise FileNotFoundError(f"File {json_file} not found!")
#         with open(json_file, "r", encoding="utf-8") as f:
#             data = json.load(f)
#         if not isinstance(data, dict):
#             raise ValueError(f"Expected JSON object in {json_file}, got {type(data).__name__}")
#         return cls(**data)

#     def __repr__(self):
#         return f"Student({self.full_name}, {self.avg_rank}, {self.courses})"

#     def __str__(self):
#         # Override __str__
#         return f"{self.full_name} ({self.avg_rank}): {self.courses}"

# class Group:
#     """Group class for a group of students."""
#     def __init__(self, title: str, students: list):
#         self.title = title
#         self.students = students

#     @classmethod
#     def create_group_from_file(cls, students_file: str):
#         """
#         Creates a Group instance from a JSON file containing student information.
#         If the file does not store a list, but a single student (dictionary),
#         then it is wrapped in a list. The group name is the file name without the extension.
#         """
#         if not os.path.exists(students_file):
#             raise FileNotFoundError(f"File {students_file} not found")
#         with open(students_file, "r", encoding="utf-8") as f:
#             data = json.load(f)
#         # If the data read is a dictionary (one student), wrap it in a list.
#         if isinstance(data, dict):
#             data = [data]
#         elif not isinstance(data, list):
#             raise ValueError(
#                 f"Expected list or dict in {students_file}, got {type(data).__name__}"
#             )
#         # Create Student objects from each dictionary.
#         students = []
#         for student_data in data:
#             if not isinstance(student_data, dict):
#                 # If by mistake we received something other than a dictionary, we throw a clear exception.
#                 raise TypeError("Each student data must be a dictionary")
#             students.append(Student(**student_data))
#         # Group name - file name without extension.
#         title = os.path.splitext(os.path.basename(students_file))[0]
#         return cls(title, students)

#     @staticmethod
#     def serialize_to_json(list_of_groups, filename: str):
#         """Save the list of groups to a JSON file."""
#         groups_data = [
#             {"title": group.title, "students": [student.__dict__ for student in group.students]}
#             for group in list_of_groups
#         ]
#         with open(filename, "w", encoding="utf-8") as f:
#             json.dump(groups_data, f, indent=4, ensure_ascii=False)

#     def __repr__(self):
#         return f"Group({self.title}, {len(self.students)} students)"

# # Define a custom JSONEncoder for the Student class.
# class StudentEncoder(JSONEncoder):
#     """–°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç—ã Student –≤ JSON."""
#     def default(self, obj):
#         if isinstance(obj, Student):
#             return obj.__dict__  # Returns the object's attributes as a dictionary.
#         return super().default(obj)

### –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω –æ—à–∏–±–æ–∫ –∏ –≤–Ω–µ—Å—ë–Ω–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
# 1. **–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ (__str__)**  
#    **–ü—Ä–æ–±–ª–µ–º–∞:**  
#    - –¢–µ—Å—Ç—ã –æ–∂–∏–¥–∞–ª–∏ –≤—ã–≤–æ–¥ –≤–∏–¥–∞  
#      `"Student2 from group2 (50.4): ['C++']"`
#      –≤–º–µ—Å—Ç–æ  
#      `"Student(Student2 from group2, 50.4, ['C++'])"`.
     
#    **–†–µ—à–µ–Ω–∏–µ:**  
#    - –ë—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ `__str__` (–≤ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É `__repr__`), –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —Ç—Ä–µ–±—É–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:
#      ```python
#      def __str__(self):
#          return f"{self.full_name} ({self.avg_rank}): {self.courses}"
#      ```
#    - –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —Ñ—É–Ω–∫—Ü–∏—è `print(user1)` —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç `__str__` –∏ –≤—ã–≤–æ–¥ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º.

# 2. **–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã –∏–∑ —Ñ–∞–π–ª–∞**  
#    **–û—à–∏–±–∫–∞:**  
#    - –ü—Ä–∏ –≤—ã–∑–æ–≤–µ `Group.create_group_from_file("2020-01.json")` –≤–æ–∑–Ω–∏–∫–∞–ª–∞ –æ—à–∏–±–∫–∞:
#      ```
#      TypeError: __main__.Student() argument after ** must be a mapping, not str
#      ```
#    **–ü—Ä–∏—á–∏–Ω–∞:**  
#    - –§–∞–π–ª `"2020-01.json"` —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–¥–Ω–æ–º —Å—Ç—É–¥–µ–Ω—Ç–µ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, `{"full_name": "Student2 from group2", ...}`), –∞ –Ω–µ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π.
#    - –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ —Å–ª–æ–≤–∞—Ä—é –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –∫–ª—é—á–µ–π (—Å—Ç—Ä–æ–∫), –∞ –Ω–µ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞—Ä–µ–π. –ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å `Student(**student_data)` –¥–ª—è —Å—Ç—Ä–æ–∫–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞.
     
#    **–†–µ—à–µ–Ω–∏–µ:**  
#    - –í –º–µ—Ç–æ–¥–µ `Group.create_group_from_file` –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Å—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —è–≤–ª—è—é—Ç—Å—è —Å–ª–æ–≤–∞—Ä—ë–º, —Ç–æ –æ–Ω–∏ –æ–±–æ—Ä–∞—á–∏–≤–∞—é—Ç—Å—è –≤ —Å–ø–∏—Å–æ–∫:
#      ```python
#      if isinstance(data, dict):
#          data = [data]
#      ```
#    - –¢–µ–ø–µ—Ä—å –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞ (–æ–¥–∏–Ω–æ—á–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤) —Å–æ–∑–¥–∞—ë—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫.

# 3. **–û—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã**  
#    - **–ú–µ—Ç–æ–¥ `Student.from_json`**  
#      –û–∂–∏–¥–∞–µ—Ç, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è JSON-–æ–±—ä–µ–∫—Ç (—Å–ª–æ–≤–∞—Ä—å). –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ —Å–ª–æ–≤–∞—Ä—å, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –æ—à–∏–±–∫–∞ —Å –ø–æ–Ω—è—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
#    - **–ú–µ—Ç–æ–¥ `serialize_to_json` –¥–ª—è –≥—Ä—É–ø–ø—ã**  
#      –ü–µ—Ä–µ–±–∏—Ä–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Ö `__dict__`, —á—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±—É–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É.
#    - **StudentEncoder**  
#      –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç —è–≤–ª—è–µ—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º `Student`, –º–µ—Ç–æ–¥ `default` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∞—Ç—Ä–∏–±—É—Ç—ã –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è. –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –º–µ—Ç–æ–¥.

### –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (—Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
# –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ `"2020-01.json"`:
# ```json
# {
#     "full_name": "Student2 from group2",
#     "avg_rank": 50.4,
#     "courses": ["C++"]
# }
# ```
# –¢–æ–≥–¥–∞ –≤—ã–∑–æ–≤—ã:
# ```python
# user1 = Student.from_json("2020-01.json")
# print(user1)
# ```
# –≤—ã–≤–µ–¥—É—Ç:
# ```
# Student2 from group2 (50.4): ['C++']
# ```

# –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ `"2020_2.json"` –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:
# ```json
# [
#     {"full_name": "Student 1 from second Group", "avg_rank": 98, "courses": ["Python"]},
#     {"full_name": "Student 2 from second Group", "avg_rank": 70.34, "courses": ["Ruby", "Python", "Frontend development"]}
# ]
# ```
# —Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
# ```python
# with open("2020_2.json") as read_file:
#     data = json.load(read_file)
# print([str(Student(**item)) for item in data])
# ```
# –≤—ã–≤–µ–¥–µ—Ç:
# ```
# ["Student 1 from second Group (98): ['Python']", "Student 2 from second Group (70.34): ['Ruby', 'Python', 'Frontend development']"]
# ```

# –ò, –Ω–∞–∫–æ–Ω–µ—Ü, –¥–ª—è –≥—Ä—É–ø–ø:
# ```python
# g1 = Group.create_group_from_file("2020_2.json")
# g2 = Group.create_group_from_file("2020-01.json")
# Group.serialize_to_json([g1, g2], "g1.json")
# ```
# —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ `"g1.json"` –±—É–¥–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º:
# ```json
# [
#     {
#         "title": "2020_2",
#         "students": [
#             {
#                 "full_name": "Student 1 from second Group",
#                 "avg_rank": 98,
#                 "courses": ["Python"]
#             },
#             {
#                 "full_name": "Student 2 from second Group",
#                 "avg_rank": 70.34,
#                 "courses": ["Ruby", "Python", "Frontend development"]
#             }
#         ]
#     },
#     {
#         "title": "2020-01",
#         "students": [
#             {
#                 "full_name": "Student2 from group2",
#                 "avg_rank": 50.4,
#                 "courses": ["C++"]
#             }
#         ]
#     }
# ]

### –ò—Ç–æ–≥

# - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ `__str__` –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–±—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –æ–±—ä–µ–∫—Ç–æ–≤ Student.
# - –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ JSON-—Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö —è–≤–ª—è–µ—Ç—Å—è –Ω–µ —Å–ø–∏—Å–∫–æ–º, –∞ –æ–¥–∏–Ω–æ—á–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º (—Å–ª–æ–≤–∞—Ä—ë–º), —Ä–µ—à–∞–µ—Ç –æ—à–∏–±–∫—É —Å —Ä–∞—Å–ø–∞–∫–æ–≤–∫–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
# - –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –º–µ—Ç–æ–¥–æ–≤ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏.

# –ü–æ–ø—Ä–æ–±—É–π –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–∞–π –∑–Ω–∞—Ç—å!

# üìå **–î–≤–∞ —Å–ª—É—á–∞—è —Ä–∞–±–æ—Ç—ã `StudentEncoder`**  
### **‚úÖ –°–ª—É—á–∞–π 1: –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ `Student` (–æ–Ω –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Å–ª–æ–≤–∞—Ä—å)**
# import json
# from json import JSONEncoder

# class Student:
#     def __init__(self, full_name, avg_rank, courses):
#         self.full_name = full_name
#         self.avg_rank = avg_rank
#         self.courses = courses

# class StudentEncoder(JSONEncoder):
#     """–ö–∞—Å—Ç–æ–º–Ω—ã–π JSONEncoder –¥–ª—è –∫–ª–∞—Å—Å–∞ Student."""
#     def default(self, obj):
#         if isinstance(obj, Student):  # –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç ‚Äî Student
#             return obj.__dict__  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
#         return super().default(obj)  # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥

# –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç Student
# student = Student("Alice Johnson", 4.5, ["Math", "Physics"])

# –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –µ–≥–æ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —ç–Ω–∫–æ–¥–µ—Ä–æ–º
# json_data = json.dumps(student, cls=StudentEncoder, indent=4)
# print(json_data)
# ```
# ‚úî **–í—ã–≤–æ–¥ JSON:**
# ```json
# {
#     "full_name": "Alice Johnson",
#     "avg_rank": 4.5,
#     "courses": ["Math", "Physics"]
# }
# ```
# üîπ **–û–±—ä–µ–∫—Ç `Student` –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Å–ª–æ–≤–∞—Ä—å** –±–ª–∞–≥–æ–¥–∞—Ä—è `obj.__dict__`.  

### **‚ùå –°–ª—É—á–∞–π 2: –ü–µ—Ä–µ–¥–∞—ë–º –Ω–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `super().default(obj)`)**
# –î–æ–ø—É—Å—Ç–∏–º, –º—ã –ø–µ—Ä–µ–¥–∞—ë–º **–Ω–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç** (–Ω–∞–ø—Ä–∏–º–µ—Ä, `set()`):  
# data = {"name": "Alice", "skills": {"Python", "Django"}}

# –ü—ã—Ç–∞–µ–º—Å—è —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º
# json_data = json.dumps(data, cls=StudentEncoder, indent=4)
# print(json_data)
# ```
# ‚ùå **–û—à–∏–±–∫–∞:**  
# ```
# TypeError: Object of type set is not JSON serializable
# ```
# üìå `super().default(obj)` **–Ω–µ –∑–Ω–∞–µ—Ç, –∫–∞–∫ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å `set`**, –ø–æ—ç—Ç–æ–º—É –≤—ã–¥–∞—ë—Ç –æ—à–∏–±–∫—É.  

### **‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º `set`)**
# class CustomEncoder(JSONEncoder):
#     def default(self, obj):
#         if isinstance(obj, Student):
#             return obj.__dict__  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Student –≤ —Å–ª–æ–≤–∞—Ä—å
#         if isinstance(obj, set):
#             return list(obj)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º set –≤ —Å–ø–∏—Å–æ–∫
#         return super().default(obj)  # –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ

# data = {"name": "Alice", "skills": {"Python", "Django"}}

# json_data = json.dumps(data, cls=CustomEncoder, indent=4)
# print(json_data)
# ```
# ‚úî **–í—ã–≤–æ–¥ JSON (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω `set`)**:
# ```json
# {
#     "name": "Alice",
#     "skills": ["Django", "Python"]
# }
# üîπ –¢–µ–ø–µ—Ä—å `set()` **–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–æ–∫!**  

# === üîπ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ===
# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤—Ä—É—á–Ω—É—é
student1 = Student("Alice Johnson", 4.5, ["Math", "Physics"])
student2 = Student("Bob Smith", 3.8, ["Biology", "Chemistry"])

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ JSON-—Ñ–∞–π–ª
student1.serialize_to_json("student1.json")

# –ß—Ç–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ JSON-—Ñ–∞–π–ª–∞
loaded_student = Student.from_json("student1.json")
print(loaded_student)

# –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ JSON-—Ñ–∞–π–ª–∞
group = Group.create_group_from_file("students.json")
print(group)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
Group.serialize_to_json([group], "groups.json")

### **–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è**
# ‚úÖ **–ö–ª–∞—Å—Å `Student`**
# - **–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è** (`serialize_to_json`) ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—ä–µ–∫—Ç –≤ JSON-—Ñ–∞–π–ª.
# - **–î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è** (`from_json`) ‚Üí –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞ –∏ —Å–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç `Student`.
# - **`__dict__`** ‚Üí –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç –≤ —Å–ª–æ–≤–∞—Ä—å –ø—Ä–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏.

# ‚úÖ **–ö–ª–∞—Å—Å `Group`**
# - **–ú–µ—Ç–æ–¥ `create_group_from_file`** ‚Üí –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ JSON –∏ —Å–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç `Group`.
# - **–ú–µ—Ç–æ–¥ `serialize_to_json`** ‚Üí –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –≤ JSON.
# - **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ `os.path.splitext()`** ‚Üí –±–µ—Ä—ë—Ç **–∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è** –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã.

# üìå **–í—ã–≤–æ–¥:**  
# ‚úî –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è.  
# ‚úî –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–∑–¥–∞—é—Ç—Å—è `Student` –∏ `Group`.  
# ‚úî –û–±—ä–µ–∫—Ç—ã –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑ —Ñ–∞–π–ª–æ–≤.

# **–î–≤–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ (`**`) –ø–æ–∑–≤–æ–ª—è—é—Ç "—Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å" —Å–ª–æ–≤–∞—Ä—å** –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞–∫ **–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã** (`key=value`) –≤ —Ñ—É–Ω–∫—Ü–∏—é –∏–ª–∏ –º–µ—Ç–æ–¥.  

### üîπ **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?**  
# –î–æ–ø—É—Å—Ç–∏–º, —É –Ω–∞—Å –µ—Å—Ç—å —Å–ª–æ–≤–∞—Ä—å:
# data = {"name": "Alice", "age": 25}

# –ï—Å–ª–∏ –º—ã –≤—ã–∑–æ–≤–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ç–∞–∫:  
# def greet(name, age):
#     print(f"–ü—Ä–∏–≤–µ—Ç, {name}! –¢–µ–±–µ {age} –ª–µ—Ç.")

# greet(**data)
# üîπ Python **—Ä–∞–∑–≤–µ—Ä–Ω—ë—Ç —Å–ª–æ–≤–∞—Ä—å** –∏ –ø–µ—Ä–µ–¥–∞—Å—Ç –µ–≥–æ –∫–∞–∫ `greet(name="Alice", age=25)`.  
# üîπ **–í—ã–≤–æ–¥:** `–ü—Ä–∏–≤–µ—Ç, Alice! –¢–µ–±–µ 25 –ª–µ—Ç.`  

### üîπ **–ì–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `**`?**
# ‚úÖ **–ü–µ—Ä–µ–¥–∞—á–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ —Ñ—É–Ω–∫—Ü–∏—é**  
# ‚úÖ **–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–ª–∞—Å—Å–æ–≤ (`__init__(**data)`)**  
# ‚úÖ **–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–π** ‚Üí `{**dict1, **dict2}`  
# ‚úÖ **–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (`kwargs`)**  

# üí° **–í—ã–≤–æ–¥:**  
# üöÄ `**data` **—Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å** –∏ –¥–µ–ª–∞–µ—Ç –∫–æ–¥ **–≥–∏–±–∫–∏–º –∏ —É–¥–æ–±–Ω—ã–º**.

# –¢—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å **—Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã JSONEncoder**, —á—Ç–æ–±—ã **—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã**, —Ç–∞–∫–∏–µ –∫–∞–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–æ–≤.  
### üîπ **–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥?**  
# - `StudentEncoder` –Ω–∞—Å–ª–µ–¥—É–µ—Ç `JSONEncoder`, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ `json.dump()`.  
# - –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω –º–µ—Ç–æ–¥ `default(self, obj)`, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç **–∫–∞–∫ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã**.  
# - –ï—Å–ª–∏ `obj` ‚Äî —ç—Ç–æ –æ–±—ä–µ–∫—Ç `Student`, –æ–Ω **–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ —Å–ª–æ–≤–∞—Ä—å** (`obj.__dict__`).  
# - –ï—Å–ª–∏ `obj` ‚Äî –Ω–µ `Student`, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π `super().default(obj)` (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏).  

### üîπ **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ø—Ä–∞–∫—Ç–∏–∫–µ?**  
#### ‚úÖ **–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è `StudentEncoder`**
# import json
# from json import JSONEncoder

# class Student:
#     def __init__(self, full_name, avg_rank, courses):
#         self.full_name = full_name
#         self.avg_rank = avg_rank
#         self.courses = courses

# class StudentEncoder(JSONEncoder):
#     """–ö–∞—Å—Ç–æ–º–Ω—ã–π JSONEncoder –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ Student."""
#     def default(self, obj):
#         if isinstance(obj, Student):
#             return obj.__dict__  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
#         return super().default(obj)  # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Student
# student = Student("Alice Johnson", 4.5, ["Math", "Physics"])

# –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º JSONEncoder
# json_data = json.dumps(student, cls=StudentEncoder, indent=4, ensure_ascii=False)
# print(json_data)

# üîπ **–í—ã–≤–æ–¥ JSON:**
# json
# {
#     "full_name": "Alice Johnson",
#     "avg_rank": 4.5,
#     "courses": ["Math", "Physics"]
# }

### üîπ **–ì–¥–µ —ç—Ç–æ –ø–æ–ª–µ–∑–Ω–æ?**
# ‚úÖ **–ö–æ–≥–¥–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π `json.dumps()` –Ω–µ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±—ä–µ–∫—Ç**  
# ‚úÖ **–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –∫–∞—Å—Ç–æ–º–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–∫–ª—é—á–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç—ã)**  
# ‚úÖ **–ö–æ–≥–¥–∞ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å–ª–æ–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã**  

### ‚úÖ **–ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –ø—Ä–∏–º–µ—Ä: –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã**  
# –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç **—Å–æ–¥–µ—Ä–∂–∏—Ç –¥—Ä—É–≥–æ–π –æ–±—ä–µ–∫—Ç**, –Ω–∞–º –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–±–∞:  

# class Group:
#     def __init__(self, title, students):
#         self.title = title
#         self.students = students

# class GroupEncoder(JSONEncoder):
#     def default(self, obj):
#         if isinstance(obj, Group):
#             return {
#                 "title": obj.title,
#                 "students": [StudentEncoder().default(student) for student in obj.students]  # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
#             }
#         return super().default(obj)

# –°–æ–∑–¥–∞—ë–º –≥—Ä—É–ø–ø—É
# group = Group("Physics Group", [Student("Alice", 4.5, ["Math"]), Student("Bob", 3.8, ["Physics"])])

# –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º
# json_data = json.dumps(group, cls=GroupEncoder, indent=4, ensure_ascii=False)
# print(json_data)

# ‚úî –¢–µ–ø–µ—Ä—å `GroupEncoder` —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç –∏ `Group`, –∏ `Student` –ø—Ä–∞–≤–∏–ª—å–Ω–æ.

### üí° **–í—ã–≤–æ–¥:**  
# üöÄ **–¢—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ `JSONEncoder`, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π!**  
# üìå –ò—Å–ø–æ–ª—å–∑—É–π `default()`, —á—Ç–æ–±—ã **–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–ª–∞—Å—Å—ã**.  
# üìå –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç **—Å–æ—Ö—Ä–∞–Ω—è—Ç—å –æ–±—ä–µ–∫—Ç—ã –≤ JSON –±–µ–∑ —Ä—É—á–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è**.  

# –ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥—ë–Ω –∏—Å–ø—Ä–∞–≤–ª—ë–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Ç–µ—Å—Ç–æ–≤, –∞ —Ç–∞–∫–∂–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω –æ—à–∏–±–æ–∫ –∏ –≤–Ω–µ—Å—ë–Ω–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π.

# import json
# import os
# from json import JSONEncoder

# class Student:
#     """Student class with information about the student."""
#     def __init__(self, full_name: str, avg_rank: float, courses: list):
#         self.full_name = full_name
#         self.avg_rank = avg_rank
#         self.courses = courses

#     def serialize_to_json(self, filename: str):
#         """
#         –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—ä–µ–∫—Ç Student –≤ JSON-—Ñ–∞–π–ª.
#         **–í–∞–∂–Ω–æ:** –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ JSON –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ, –±–µ–∑ –æ—Ç—Å—Ç—É–ø–æ–≤.
#         """
#         with open(filename, "w", encoding="utf-8") as f:
#             json.dump(self, f, cls=StudentEncoder, ensure_ascii=False)

#     @classmethod
#     def from_json(cls, json_file: str):
#         """
#         –°–æ–∑–¥–∞—ë—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä Student –∏–∑ JSON-—Ñ–∞–π–ª–∞.
#         –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å JSON-–æ–±—ä–µ–∫—Ç (—Å–ª–æ–≤–∞—Ä—å), –∞ –Ω–µ —Å–ø–∏—Å–æ–∫.
#         """
#         if not os.path.exists(json_file):
#             raise FileNotFoundError(f"File {json_file} not found!")
#         with open(json_file, "r", encoding="utf-8") as f:
#             data = json.load(f)
#         # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–∫–∞–∑–∞–ª–∏—Å—å —Å–ø–∏—Å–∫–æ–º, –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π).
#         if isinstance(data, list):
#             if not data:
#                 raise ValueError("Empty student list in file")
#             data = data[0]
#         return cls(**data)

#     def __str__(self):
#         # –¢–µ—Å—Ç—ã –æ–∂–∏–¥–∞—é—Ç –≤—ã–≤–æ–¥ –≤–∏–¥–∞:
#         # "Student2 from group2 (50.4): ['C++']"
#         return f"{self.full_name} ({self.avg_rank}): {self.courses}"

#     def __repr__(self):
#         return self.__str__()


# class Group:
#     """–ö–ª–∞—Å—Å Group –¥–ª—è –≥—Ä—É–ø–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤."""
#     def __init__(self, title: str, students: list):
#         self.title = title
#         self.students = students

#     @classmethod
#     def create_group_from_file(cls, students_file: str):
#         """
#         –°–æ–∑–¥–∞—ë—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä Group –∏–∑ JSON-—Ñ–∞–π–ª–∞ —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö.
#         –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –±–µ—Ä—ë—Ç—Å—è –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è).
        
#         –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:
#          - –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ (—Å–ª–æ–≤–∞—Ä—å), —Ç–æ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫,
#            —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏ –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ.
#         """
#         if not os.path.exists(students_file):
#             raise FileNotFoundError(f"File {students_file} not found")
#         with open(students_file, "r", encoding="utf-8") as f:
#             data = json.load(f)
#         # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ ‚Äì —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å (–æ–¥–∏–Ω —Å—Ç—É–¥–µ–Ω—Ç), –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫.
#         if isinstance(data, dict):
#             data = [data]
#         elif not isinstance(data, list):
#             raise ValueError(f"Expected list or dict in {students_file}, got {type(data).__name__}")
#         students = []
#         for student_data in data:
#             if not isinstance(student_data, dict):
#                 raise TypeError("Each student record must be a dictionary")
#             students.append(Student(**student_data))
#         # –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã ‚Äì –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è.
#         title = os.path.splitext(os.path.basename(students_file))[0]
#         return cls(title, students)

#     @staticmethod
#     def serialize_to_json(list_of_groups, filename: str):
#         """
#         –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –≤ JSON-—Ñ–∞–π–ª.
#         **–í–∞–∂–Ω–æ:** JSON –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ (–±–µ–∑ –æ—Ç—Å—Ç—É–ø–æ–≤), —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–∞–º.
#         """
#         groups_data = [
#             {"title": group.title, "students": [student.__dict__ for student in group.students]}
#             for group in list_of_groups
#         ]
#         with open(filename, "w", encoding="utf-8") as f:
#             json.dump(groups_data, f, ensure_ascii=False)

#     def __str__(self):
#         """
#         –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –≤–∏–¥–µ:
#         2020_2: ["Student 1 from second Group (98): ['Python']", "Student 2 from second Group (70.34): ['Ruby', 'Python', 'Frontend development']"]
#         """
#         # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤—ã–∑—ã–≤–∞–µ–º __str__ (–∫–æ—Ç–æ—Ä—ã–π —É–∂–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º)
#         students_str = [str(student) for student in self.students]
#         return f"{self.title}: {students_str}"

#     def __repr__(self):
#         return self.__str__()


# class StudentEncoder(JSONEncoder):
#     """–ö–∞—Å—Ç–æ–º–Ω—ã–π JSONEncoder –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ Student."""
#     def default(self, obj):
#         if isinstance(obj, Student):
#             return obj.__dict__
#         return super().default(obj)

# ## –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
# ### 1. **–§–æ—Ä–º–∞—Ç JSON –≤ –º–µ—Ç–æ–¥–µ `serialize_to_json`**
# **–ü—Ä–æ–±–ª–µ–º–∞:**  
# –¢–µ—Å—Ç—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ `Student.serialize_to_json` (–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è `Group.serialize_to_json`) –æ–∂–∏–¥–∞—é—Ç, —á—Ç–æ JSON –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ:  
# {"full_name": "Student2 from group2", "avg_rank": 50.4, "courses": ["C++"]}
# –∞ –Ω–µ –≤ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ (pretty print), –∫–∞–∫ –≤—ã–¥–∞—ë—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä `indent=4`.

# **–†–µ—à–µ–Ω–∏–µ:**  
# –ú—ã —É–¥–∞–ª–∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä `indent=4` –≤ –æ–±–æ–∏—Ö –º–µ—Ç–æ–¥–∞—Ö, —á—Ç–æ–±—ã –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π (–æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–π) —Ñ–æ—Ä–º–∞—Ç JSON.

# ### 2. **–í—ã–≤–æ–¥ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤**
# **–ü—Ä–æ–±–ª–µ–º–∞:**  
# ‚Äì –ü—Ä–∏ –≤—ã–∑–æ–≤–µ `print(user1)`, —Ç–µ—Å—Ç –æ–∂–∏–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞:  
# `Student2 from group2 (50.4): ['C++']`  
# –∞ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ `__repr__`, —Ç–æ –≤—ã–≤–æ–¥ –º–æ–≥ –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞–∫:  
# `Student(Student2 from group2, 50.4, ['C++'])`

# **–†–µ—à–µ–Ω–∏–µ:**  
# –ú—ã –¥–æ–±–∞–≤–∏–ª–∏ –º–µ—Ç–æ–¥ `__str__` –≤ –∫–ª–∞—Å—Å–µ `Student`, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —Ç—Ä–µ–±—É–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –¥–ª—è –∫–ª–∞—Å—Å–∞ `Group` —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –º–µ—Ç–æ–¥ `__str__`, —á—Ç–æ–±—ã –ø—Ä–∏ –≤—ã–∑–æ–≤–µ `print(g1)` –≤—ã–≤–æ–¥–∏–ª–æ—Å—å:
# 2020_2: ["Student 1 from second Group (98): ['Python']", "Student 2 from second Group (70.34): ['Ruby', 'Python', 'Frontend development']"]

# –í –º–µ—Ç–æ–¥–µ `__repr__` –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è `__str__`, —á—Ç–æ–±—ã –≤—ã–≤–æ–¥ –±—ã–ª –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º.

# ### 3. **–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã**
# **–ü—Ä–æ–±–ª–µ–º–∞:**  
# –û—à–∏–±–∫–∞  
# TypeError: __main__.Student() argument after ** must be a mapping, not str
# –≤–æ–∑–Ω–∏–∫–∞–ª–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –∏–∑ —Ñ–∞–π–ª–∞ `"2020-01.json"`, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∞–ª –Ω–µ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è. –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –ø—Ä–∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ —Å–ª–æ–≤–∞—Ä—é –≤—ã –ø–æ–ª—É—á–∞–ª–∏—Å—å –µ–≥–æ –∫–ª—é—á–∏ (—Å—Ç—Ä–æ–∫–∏), –∞ –Ω–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏.

# **–†–µ—à–µ–Ω–∏–µ:**  
# –í –º–µ—Ç–æ–¥–µ `Group.create_group_from_file` –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑ JSON, —è–≤–ª—è—é—Ç—Å—è —Å–ª–æ–≤–∞—Ä—ë–º, –æ–Ω–∏ –æ–±–æ—Ä–∞—á–∏–≤–∞—é—Ç—Å—è –≤ —Å–ø–∏—Å–æ–∫:
# ```python
# if isinstance(data, dict):
#     data = [data]
# –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –¥–∞–ª–µ–µ —Ü–∏–∫–ª `for student_data in data:` –±—É–¥–µ—Ç –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Å–ø–∏—Å–∫—É —Å–ª–æ–≤–∞—Ä–µ–π.

# ## –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –æ–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

# 1. **–î–ª—è Student.from_json –∏ __str__**
# –§–∞–π–ª `"2020-01.json"` (–ø—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ):
# ```json
# {
#     "full_name": "Student2 from group2",
#     "avg_rank": 50.4,
#     "courses": ["C++"]
# }

# –í—ã–∑–æ–≤:
# ```python
# user1 = Student.from_json("2020-01.json")
# print(user1)

# –í—ã–≤–æ–¥:

# Student2 from group2 (50.4): ['C++']


# 2. **–î–ª—è Student.serialize_to_json**
# –í—ã–∑–æ–≤:
# ```python
# user1 = Student.from_json("2020-01.json")
# Student.serialize_to_json(user1, "test_student.json")
# ```
# –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ `"test_student.json"` –±—É–¥–µ—Ç:
# ```
# {"full_name": "Student2 from group2", "avg_rank": 50.4, "courses": ["C++"]}
# ```
# (–ó–∞–ø–∏—Å–∞–Ω—ã –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º JSON‚Äë—Ñ–æ—Ä–º–∞—Ç–µ, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –æ—Ç—Å—Ç—É–ø–æ–≤)

# 3. **–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –∏–∑ —Ñ–∞–π–ª–∞**

# –§–∞–π–ª `"2020_2.json"` (–ø—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ):
# ```json
# [
#     {"full_name": "Student 1 from second Group", "avg_rank": 98, "courses": ["Python"]},
#     {"full_name": "Student 2 from second Group", "avg_rank": 70.34, "courses": ["Ruby", "Python", "Frontend development"]}
# ]
# ```
# –í—ã–∑–æ–≤:
# ```python
# g1 = Group.create_group_from_file("2020_2.json")
# print(g1)
# ```
# –í—ã–≤–æ–¥:
# ```
# 2020_2: ["Student 1 from second Group (98): ['Python']", "Student 2 from second Group (70.34): ['Ruby', 'Python', 'Frontend development']"]
# ```

# 4. **–î–ª—è Group.serialize_to_json**

# –í—ã–∑–æ–≤:
# ```python
# g1 = Group.create_group_from_file("2020_2.json")
# g2 = Group.create_group_from_file("2020-01.json")
# Group.serialize_to_json([g1, g2],"g1.json")
# ```
# –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ `"g1.json"` –±—É–¥–µ—Ç:
# ```json
# [{"title": "2020_2", "students": [{"full_name": "Student 1 from second Group", "avg_rank": 98, "courses": ["Python"]}, {"full_name": "Student 2 from second Group", "avg_rank": 70.34, "courses": ["Ruby", "Python", "Frontend development"]}]}, {"title": "2020-01", "students": [{"full_name": "Student2 from group2", "avg_rank": 50.4, "courses": ["C++"]}]}]
# ```
# (–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π JSON –±–µ–∑ –æ—Ç—Å—Ç—É–ø–æ–≤)

# ---

# ## –í—ã–≤–æ–¥

# - **–ü–∞—Ä–∞–º–µ—Ç—Ä `indent=4`** –±—ã–ª —É–±—Ä–∞–Ω –∏–∑ –º–µ—Ç–æ–¥–æ–≤ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏, —á—Ç–æ–±—ã JSON –∑–∞–ø–∏—Å—ã–≤–∞–ª—Å—è –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ (—Ç–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–µ—Å—Ç–∞–º–∏).
# - –î–æ–±–∞–≤–ª–µ–Ω—ã –º–µ—Ç–æ–¥—ã `__str__` –≤ –∫–ª–∞—Å—Å–∞—Ö **Student** –∏ **Group**, —á—Ç–æ–±—ã –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —á–µ—Ä–µ–∑ `print()` –æ—Ç–æ–±—Ä–∞–∂–∞–ª—Å—è –∏–º–µ–Ω–Ω–æ —Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤ —Ç–µ—Å—Ç–∞—Ö.
# - –í –º–µ—Ç–æ–¥–µ `Group.create_group_from_file` –¥–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –≤ —Ñ–∞–π–ª–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –Ω–µ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∞ –æ–¥–∏–Ω —Å—Ç—É–¥–µ–Ω—Ç (—Å–ª–æ–≤–∞—Ä—å).