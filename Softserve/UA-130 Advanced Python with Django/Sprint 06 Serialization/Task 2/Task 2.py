# Implement function parse_user(output_file, *input_files) for creating file that will contain only unique records (unique by key "name") by merging information from all input_files argument (if we find user with already existing name from previous file we should ignore it). Use pretty printing for writing users to json-file.


# If the function cannot find input files we need to log information with error level  

# root - ERROR - File <file name> doesn't exist

# For example:
# user1.json : 
# [{"name": "Bob1", "rate": 1, ‚Äúlanguages": ["English"]},
# {"name": "Bob2", "rate":0.78, "languages": ["English", "French"]}
# ]

# user2.json : 
# [{"name": "Bob1", "rate": 25, ‚Äúlanguages": ["French"]},
# {"name": "Bob3", "rate": 78, "languages": ["Germany"]}
# ]

# If we execute parse_user(user3.json, user1.json, user2.json)
# then file user3.json should contain information:
# [{"name": "Bob1", "rate": 1, ‚Äúlanguages": ["English"]},
# {"name": "Bob2", "rate":0.78, "languages": ["English", "French"]}
# {"name": "Bob3", "rate": 78, "languages": ["Germany"]}
# ]

import json
import logging
import os

# Setting up logging
logging.basicConfig(level=logging.ERROR, format="root - %(levelname)s - %(message)s")

def parse_user(output_file, *input_files):
    """Collects unique records by key 'name' from JSON files and writes to output file."""
    unique_users = {}
    
    for file in input_files:
        if not os.path.exists(file):
            logging.error(f"File {file} doesn't exist")  # Log an error if the file does not exist
            continue
        
        with open(file, "r", encoding="utf-8") as f:
            try:
                users = json.load(f)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON
            except json.JSONDecodeError:
                logging.error(f"File {file} contains invalid JSON format")
                continue
        
        # WorkWorking with downloaded data
        if isinstance(users, list):  # If the JSON contains a list of users
            for user in users:
                if "name" in user and user["name"] not in unique_users:
                    unique_users[user["name"]] = user
        elif isinstance(users, dict):  # If the JSON contains a single user as a dictionary
            if "name" in users and users["name"] not in unique_users:
                unique_users[users["name"]] = users

    # Write unique records to a JSON file
    with open(output_file, "w", encoding="utf-8") as f:
        json.dump(list(unique_users.values()), f, indent=4, ensure_ascii=False)  # Pretty-printing

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
parse_user("user3.json", r"E:\My project\MyEducation\Softserve\UA-130 Advanced Python with Django\Task 06 Serialization\Task 2\user1.json", r"E:\My project\MyEducation\Softserve\UA-130 Advanced Python with Django\Task 06 Serialization\Task 2\user2.json")

### **–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–¥–∞**
# ‚úÖ **–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ** (`logging.ERROR`), —á—Ç–æ–±—ã –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å **–æ—à–∏–±–∫–∏** –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ JSON.  
# ‚úÖ **–ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –≤—Ö–æ–¥–Ω—ã–º —Ñ–∞–π–ª–∞–º** –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON, **–ø—Ä–æ–ø—É—Å–∫–∞—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã** (`os.path.exists()`).  
# ‚úÖ **–§–∏–ª—å—Ç—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ `name`** –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ —Å–ª–æ–≤–∞—Ä—å `unique_users`.  
# ‚úÖ **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º JSON –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞** (`list` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –æ–¥–∏–Ω `dict`).  
# ‚úÖ **–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ `output_file`** –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (`indent=4` –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏).

# üí° **–í—ã–≤–æ–¥:**  
# –≠—Ç–æ—Ç –∫–æ–¥ **–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∑–∞–ø–∏—Å–∏**, **–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã**, **–ª–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏** –∏ **—Å–æ–∑–¥–∞—ë—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON-—Ñ–∞–π–ª**.  
# –ü–æ–ø—Ä–æ–±—É–π –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏ —Å–∫–∞–∂–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ —É—Ç–æ—á–Ω–∏—Ç—å! üöÄ
