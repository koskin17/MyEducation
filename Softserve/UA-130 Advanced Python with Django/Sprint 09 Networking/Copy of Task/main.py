import json
from http.server import HTTPServer, BaseHTTPRequestHandler
from urllib.parse import urlparse

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
USERS_LIST = [
    {
        "id": 1,
        "username": "theUser",
        "firstName": "John",
        "lastName": "James",
        "email": "john@email.com",
        "password": "12345",
    }
]

class SimpleHTTPRequestHandler(BaseHTTPRequestHandler):

    def _set_response(self, status_code=200, body=None):
        """Sets an HTTP response with the given status and body."""
        
        self.send_response(status_code)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        self.wfile.write(json.dumps(body if body else {}).encode('utf-8'))
        ## ‚úÖ **2. –Ø–∫ –ø—Ä–∞—Ü—é—î `_set_response`**
        # # –¶–µ **–Ω–µ –≤–±—É–¥–æ–≤–∞–Ω–∏–π –º–µ—Ç–æ–¥!** –¶–µ **–Ω–∞—à –≤–ª–∞—Å–Ω–∏–π** –º–µ—Ç–æ–¥, —è–∫–∏–π –º–∏ –Ω–∞–ø–∏—Å–∞–ª–∏, —â–æ–± –Ω–µ –¥—É–±–ª—é–≤–∞—Ç–∏ –æ–¥–Ω–∞–∫–æ–≤–∏–π –∫–æ–¥ –∫–æ–∂–Ω–æ–≥–æ —Ä–∞–∑—É.

        # ### –©–æ –≤—ñ–Ω —Ä–æ–±–∏—Ç—å:
        # # * `self.send_response(status_code)` ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –∫–æ–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `200`, `404`, `400`).
        # # * `self.send_header('Content-type', 'application/json')` ‚Äî –∫–∞–∂–µ –±—Ä–∞—É–∑–µ—Ä—É, —â–æ –º–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ JSON.
        # # * `self.end_headers()` ‚Äî –∑–∞–≤–µ—Ä—à—É—î –∑–∞–≥–æ–ª–æ–≤–∫–∏.
        # # * `self.wfile.write(...)` ‚Äî –Ω–∞–¥—Å–∏–ª–∞—î —Ç—ñ–ª–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–ª—ñ—î–Ω—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –±–∞–π—Ç—ñ–≤.

        # ### üîç –ü—Ä–∏–∫–ª–∞–¥:
        # self._set_response(200, {"message": "OK"})
        # # –í—ñ–¥–ø–æ–≤—ñ–¥—å:
        # # * Status: 200 OK
        # # * Content-Type: application/json
        # # * Body: `{"message": "OK"}`

    def _pars_body(self):
        """Reads and parses the JSON body of the request."""

        content_length = int(self.headers.get('Content-Length', 0))
        ## ‚úÖ **3. –©–æ –æ–∑–Ω–∞—á–∞—î:**
        # content_length = int(self.headers.get('Content-Length', 0))
        ### üîç –ü–æ—è—Å–Ω–µ–Ω–Ω—è:
        # * `self.headers` ‚Äî —Ü–µ —Å–ª–æ–≤–Ω–∏–∫ –∑ HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∑–∞–ø–∏—Ç—É (headers, —è–∫—ñ –ø—Ä–∏—Ö–æ–¥—è—Ç—å –≤—ñ–¥ –±—Ä–∞—É–∑–µ—Ä–∞/–∫–ª—ñ—î–Ω—Ç–∞).
        # * `.get('Content-Length', 0)` ‚Äî –±–µ—Ä–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ `"Content-Length"` (—Ä–æ–∑–º—ñ—Ä —Ç—ñ–ª–∞ –∑–∞–ø–∏—Ç—É –≤ –±–∞–π—Ç–∞—Ö), –∞–±–æ `0`, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞.
        # * `int(...)` ‚Äî –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î –∑–Ω–∞—á–µ–Ω–Ω—è —É —Ü—ñ–ª–µ —á–∏—Å–ª–æ.

        ### üîç –ü—Ä–∏–∫–ª–∞–¥:
        # POST /user HTTP/1.1
        # Content-Length: 102
        # Content-Type: application/json

        # {"id": 1, "username": "theUser", ...}

        # ‚Üí `Content-Length` –±—É–¥–µ `102`, —ñ —Ü–µ–π —Ä–æ–∑–º—ñ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è, —â–æ–± –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑—á–∏—Ç–∞—Ç–∏ —Ç—ñ–ª–æ.

        if content_length == 0:
            return None
        try:
            return json.loads(self.rfile.read(content_length).decode('utf-8'))
            ### üîç –ü–æ—è—Å–Ω–µ–Ω–Ω—è:
            # * `self.rfile` ‚Äî —Ü–µ **"–≤—Ö—ñ–¥–Ω–∏–π –ø–æ—Ç—ñ–∫"** ‚Äî —Ç–æ–±—Ç–æ –¥–∞–Ω—ñ, —è–∫—ñ –ø—Ä–∏–π—à–ª–∏ –≤ –∑–∞–ø–∏—Ç—ñ (—Ç—ñ–ª–æ).
            # * `.read(content_length)` ‚Äî —á–∏—Ç–∞—î —Ç–æ—á–Ω–æ `content_length` –±–∞–π—Ç—ñ–≤.
            # * `.decode('utf-8')` ‚Äî –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î –±–∞–π—Ç–∏ —É —Ç–µ–∫—Å—Ç.
            # * `json.loads(...)` ‚Äî —Ä–æ–∑–±–∏—Ä–∞—î —Ü–µ–π —Ç–µ–∫—Å—Ç —è–∫ JSON ‚Üí –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ –∞–±–æ —Å–ø–∏—Å–æ–∫.

            ### üîç –ü—Ä–∏–∫–ª–∞–¥:
            # –£ –∑–∞–ø–∏—Ç—ñ –ø—Ä–∏–π—à–ª–æ:
            # b'{"id": 1, "username": "admin"}'

            # –ü—ñ—Å–ª—è read + decode:
            # '{"id": 1, "username": "admin"}'

            # –ü—ñ—Å–ª—è json.loads:
            # {"id": 1, "username": "admin"}  ‚Üê dict
        except json.JSONDecodeError:
            return None
        
    def _is_valid_user(self, user):
        """Checks if the user object has all required fields."""

        required_fields = {"id", "username", "firstName", "lastName", "email", "password"}
        return isinstance(user, dict) and required_fields.issubset(user.keys())
        ## ‚úÖ **1. –©–æ –æ–∑–Ω–∞—á–∞—î:**
        # required_fields = {"username", "firstName", "lastName", "email", "password"}
        # return isinstance(data, dict) and required_fields.issubset(data.keys())

        ### üîç –ü–æ—è—Å–Ω–µ–Ω–Ω—è:
        # * `required_fields` ‚Äî —Ü–µ **–º–Ω–æ–∂–∏–Ω–∞** (set), –≤ —è–∫—ñ–π –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤–∞–Ω—ñ –≤—Å—ñ **–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ –ø–æ–ª—è** –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
        # * `user` ‚Äî —Ü–µ —Ç–µ, —â–æ –ø—Ä–∏–π—à–ª–æ –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Ç—ñ–ª–æ POST-–∑–∞–ø–∏—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON).
        # * `isinstance(user, dict)` ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —â–æ `data` ‚Äî —Ü–µ —Å–∞–º–µ **—Å–ª–æ–≤–Ω–∏–∫ (dict)**.
        # * `user.keys()` ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î –≤—Å—ñ –∫–ª—é—á—ñ —É —Å–ª–æ–≤–Ω–∏–∫—É `user`.
        # * `required_fields.issubset(data.keys())` ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ **–≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è —î –≤ —Å–ª–æ–≤–Ω–∏–∫—É**.

        ### üîç –ü—Ä–∏–∫–ª–∞–¥ 1 ‚Äî –≤—ñ—Ä–Ω–∏–π:
        # data = {
        #   "username": "test",
        #   "firstName": "John",
        #   "lastName": "Doe",
        #   "email": "john@email.com",
        #   "password": "123"
        # }
        # ‚úÖ –í—Å—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø–æ–ª—è —î ‚Üí `issubset` –ø–æ–≤–µ—Ä–Ω–µ `True`.

        ### üîç –ü—Ä–∏–∫–ª–∞–¥ 2 ‚Äî –Ω–µ –≤—ñ—Ä–Ω–∏–π:
        # data = {
        #   "firstName": "John",
        #   "email": "john@email.com"
        # }
        # ‚õîÔ∏è –í—ñ–¥—Å—É—Ç–Ω—ñ `"username"`, `"lastName"` —ñ `"password"` ‚Üí `issubset` –ø–æ–≤–µ—Ä–Ω–µ `False`.
    
    def _is_valid_update_data(self, data):
        """Checks if the update object has all required fields."""

        required_fields = {"username", "firstName", "lastName", "email", "password"}
        return isinstance(data, dict) and required_fields.issubset(data.keys())

    def do_GET(self):
        parsed_path = urlparse(self.path)
        # ## **–Ø–∫ –ø—Ä–∞—Ü—é—î `urlparse`?**
        # ### üîß `urlparse(url)` ‚Äî —Ü–µ —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ —Ä–æ–∑–±–∏–≤–∞—î –ø–æ–≤–Ω–∏–π URL –Ω–∞ —Å–∫–ª–∞–¥–æ–≤—ñ —á–∞—Å—Ç–∏–Ω–∏:
        # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ —É —Ç–µ–±–µ —î —Ç–∞–∫–∏–π URL:
        # from urllib.parse import urlparse

        # result = urlparse("http://localhost:8000/user/theUser?x=1#section")

        # –¢–æ–¥—ñ `result` –º—ñ—Å—Ç–∏—Ç–∏–º–µ:
        # | –ü–æ–ª–µ       | –ó–Ω–∞—á–µ–Ω–Ω—è           |
        # | ---------- | ------------------ |
        # | `scheme`   | `"http"`           |
        # | `netloc`   | `"localhost:8000"` |
        # | `path`     | `"/user/theUser"`  |
        # | `params`   | `""`               |
        # | `query`    | `"x=1"`            |
        # | `fragment` | `"section"`        |
        # –¢–æ–±—Ç–æ `urlparse` —Ä–æ–∑—É–º—ñ—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É URL:
        # scheme://netloc/path;params?query#fragment
        # –ú–∏ —É —Å–≤–æ—î–º—É –≤–∏–ø–∞–¥–∫—É –ø—Ä–∞—Ü—é—î–º–æ **–≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∑ `path`** ‚Äî —Å–∞–º–µ –≤—ñ–Ω –º—ñ—Å—Ç–∏—Ç—å —Ç–µ, —â–æ –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ (`/reset`, `/users`, `/user/theUser` —Ç–æ—â–æ).

        # urlparse(url)` **–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ** –∑–Ω–∞—î, —è–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–æ–∑–±–∏–≤–∞—Ç–∏ URL –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
        # –í—ñ–Ω —Å–ª—ñ–¥—É—î **–æ—Ñ—ñ—Ü—ñ–π–Ω—ñ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ URL**, –æ–ø–∏—Å–∞–Ω—ñ–π —É [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986):
        ### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ URL –∑–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º:
        # ```
        # scheme://netloc/path;params?query#fragment
        # ```
        ### –ü—Ä–∏–∫–ª–∞–¥:
        # from urllib.parse import urlparse

        # url = "https://example.com:8080/user/theUser?sort=name#top"
        # result = urlparse(url)

        # –û—Ç—Ä–∏–º–∞—î—à:
        # | –ü–æ–ª–µ     | –ó–Ω–∞—á–µ–Ω–Ω—è           |
        # | -------- | ------------------ |
        # | scheme   | "https"            |
        # | netloc   | "example.com:8080" |
        # | path     | "/user/theUser"    |
        # | params   | ""                 |
        # | query    | "sort=name"        |
        # | fragment | "top"              |

        ### üìå –©–æ –æ–∑–Ω–∞—á–∞—î —Ü–µ –Ω–∞ –ø—Ä–∞–∫—Ç–∏—Ü—ñ:
        # * **scheme** ‚Äî —Ü–µ –ø—Ä–æ—Ç–æ–∫–æ–ª: `http`, `https`, `ftp` —Ç–æ—â–æ
        # * **netloc** ‚Äî —Ö–æ—Å—Ç + –ø–æ—Ä—Ç (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `localhost:8000`)
        # * **path** ‚Äî —à–ª—è—Ö, —è–∫–∏–π –º–∏ –Ω–∞–π—á–∞—Å—Ç—ñ—à–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ (`/reset`, `/user/...`)
        # * **query** ‚Äî —á–∞—Å—Ç–∏–Ω–∞ –ø—ñ—Å–ª—è `?`, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: `?page=2`
        # * **fragment** ‚Äî —á–∞—Å—Ç–∏–Ω–∞ –ø—ñ—Å–ª—è `#`, –∑–∞–∑–≤–∏—á–∞–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–∞—Ö

        ### üß© –ß–∏ –º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ "–≤—à–∏—Ç—É" —Å—Ç—Ä—É–∫—Ç—É—Ä—É?
        # **–ù—ñ**, —Å–∞–º—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É `urlparse` –∑–º—ñ–Ω–∏—Ç–∏ –Ω–µ –º–æ–∂–Ω–∞, –±–æ –≤–æ–Ω–∞ —Å–ª—ñ–¥—É—î –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–æ–º—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É URL.
        # –ê–ª–µ —Ç–∏ –º–æ–∂–µ—à **–∫–µ—Ä—É–≤–∞—Ç–∏ —Ç–∏–º, —â–æ —Ç—É–¥–∏ –ø–µ—Ä–µ–¥–∞—î—à**.
        # –ù–∞–ø—Ä–∏–∫–ª–∞–¥:
        # urlparse("/user/theUser")  # –ø—Ä–∞—Ü—é—î —è–∫ –æ—á—ñ–∫—É—î—Ç—å—Å—è, —Ö–æ—á–∞ —Ü–µ "–≤—ñ–¥–Ω–æ—Å–Ω–∏–π URL"
        # –¢–æ–±—Ç–æ, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –Ω–µ–º–∞—î `http://...`, `urlparse` –≤—Å–µ –æ–¥–Ω–æ —Ä–æ–∑—É–º—ñ—î, —â–æ —Ü–µ ‚Äî `path`.
        ## ‚úÖ 2. –ß–æ–º—É –ø–æ—Ä—ñ–≤–Ω—é—î–º–æ `len(path_parts) == 2`?
        # path_parts = parsed_path.path.strip("/").split("/")

        ### –ù–∞–ø—Ä–∏–∫–ª–∞–¥:
        # URL: /user/theUser
        # parsed_path.path ‚Üí "/user/theUser"
        # path_parts ‚Üí ["user", "theUser"]

        # –û—Ç–∂–µ:
        # len(path_parts) == 2
        # path_parts[0] == "user"
        # path_parts[1] == "theUser"

        ### ‚ùì–ù–∞–≤—ñ—â–æ –ø–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ –∑ 2?
        # –ú–∏ —Ö–æ—á–µ–º–æ –ø–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è, —â–æ **—à–ª—è—Ö –º–∞—î —Å–∞–º–µ –¥–≤–∞ —Ä—ñ–≤–Ω—ñ**, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:

        # | –®–ª—è—Ö                    | path\_parts                      | –ü—ñ–¥—Ö–æ–¥–∏—Ç—å? |
        # | ----------------------- | -------------------------------- | ---------- |
        # | `/user/theUser`         | `["user", "theUser"]`            | ‚úÖ          |
        # | `/user`                 | `["user"]`                       | ‚ùå          |
        # | `/user/theUser/details` | `["user", "theUser", "details"]` | ‚ùå          |

        # –¢—ñ–ª—å–∫–∏ —è–∫—â–æ **—Ä—ñ–≤–Ω–æ –¥–≤–∞ –µ–ª–µ–º–µ–Ω—Ç–∏**, –º–∏ –∑–Ω–∞—î–º–æ:
        # * –ø–µ—Ä—à–∏–π ‚Äî —Ü–µ `"user"` (–º–∞—Ä—à—Ä—É—Ç)
        # * –¥—Ä—É–≥–∏–π ‚Äî —Ü–µ `username` (–ø–∞—Ä–∞–º–µ—Ç—Ä)

        # –¢–æ–º—É –º–∏ —ñ –ø–∏—à–µ–º–æ:
        # elif len(path_parts) == 2 and path_parts[0] == "user":

        ## ‚ú® –ü—ñ–¥—Å—É–º–æ–∫:
        # | –ü–∏—Ç–∞–Ω–Ω—è                           | –í—ñ–¥–ø–æ–≤—ñ–¥—å                                                            |
        # | --------------------------------- | -------------------------------------------------------------------- |
        # | `urlparse()` –º–∞—î –≤—à–∏—Ç—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É? | ‚úÖ –¢–∞–∫, –≤–æ–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞: `scheme://netloc/path;params?query#fragment` |
        # | –ú–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ —Ü—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É?       | ‚ùå –ù—ñ, –±–æ –≤–æ–Ω–∞ –π–¥–µ –∑–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º RFC 3986                             |
        # | –ù–∞–≤—ñ—â–æ `len(path_parts) == 2`?    | –©–æ–± –≤–ø–µ–≤–Ω–∏—Ç–∏—Å—è, —â–æ —à–ª—è—Ö –º–∞—î –¥–≤—ñ —á–∞—Å—Ç–∏–Ω–∏: `/user/–Ü–º'—è`                |

        ## ‚úÖ **5. –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è `urlparse(self.path)`**
        # from urllib.parse import urlparse

        # parsed_path = urlparse("/user/theUser?sort=asc#top")

        # ### üîç –©–æ –±—É–¥–µ –≤ `parsed_path`?
        # –¶–µ **–æ–±'—î–∫—Ç `ParseResult`**:
        # ParseResult(
        #     scheme='', 
        #     netloc='', 
        #     path='/user/theUser', 
        #     params='', 
        #     query='sort=asc', 
        #     fragment='top'
        # )

        path_parts = parsed_path.path.strip("/").split("/")  # —Ä–æ–∑–±–∏–≤–∞—î–º–æ —à–ª—è—Ö –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
        # ## **–ù–∞–≤—ñ—â–æ `.strip("/")` –ø–µ—Ä–µ–¥ `.split("/")`?**
        # –¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–æ–±–∏—Ç–∏ —à–ª—è—Ö.
        # –ü–æ–¥–∏–≤–∏—Å—å –Ω–∞ –ø—Ä–∏–∫–ª–∞–¥:
        # ```python
        # "/user/theUser".strip("/").split("/") ‚Üí ["user", "theUser"]
        # ```
        # **–ü–æ—è—Å–Ω–µ–Ω–Ω—è:**
        # * `strip("/")` –ø—Ä–∏–±–∏—Ä–∞—î `/` —Å–ø–æ—á–∞—Ç–∫—É —Ç–∞ –≤ –∫—ñ–Ω—Ü—ñ, —â–æ–± –Ω–µ –≤–∏–π—à–æ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç —É —Å–ø–∏—Å–∫—É.
        # * `.split("/")` –¥—ñ–ª–∏—Ç—å —Ä—è–¥–æ–∫ –ø–æ —Å–∏–º–≤–æ–ª—É `/`.

        # üîç –ë–µ–∑ `strip("/")` –º–∏ –æ—Ç—Ä–∏–º–∞—î–º–æ:
        # ```python
        # "/user/theUser".split("/") ‚Üí ["", "user", "theUser"]
        # ```
        # –Ü —Ü–µ –Ω–µ–∑—Ä—É—á–Ω–æ: –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç ‚Äî –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫.

        if parsed_path.path == "/reset":
            # ## **–Ø–∫ —É `parsed_path.path` –º–æ–∂–µ –∑‚Äô—è–≤–∏—Ç–∏—Å—å `/reset` –∞–±–æ `/users`?**
            # –ö–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä –∞–±–æ –∫–ª—ñ—î–Ω—Ç –Ω–∞–¥—Å–∏–ª–∞—î –∑–∞–ø–∏—Ç –Ω–∞ –∞–¥—Ä–µ—Å—É —Å–µ—Ä–≤–µ—Ä–∞, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:
            # ```
            # http://localhost:8000/reset
            # ```
            # —Ç–æ–¥—ñ —É —Å–µ—Ä–≤–µ—Ä–Ω–æ–º—É –∫–æ–¥—ñ –≤ –º–µ—Ç–æ–¥—ñ `do_GET(self)` –±—É–¥–µ:
            # ```python
            # self.path == "/reset"
            # ```
            # –¢–∏ –º–æ–∂–µ—à –≤–∏–≤–µ—Å—Ç–∏ —Ü–µ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:
            # ```python
            # print("Path:", self.path)
            # ```
            # –ü—ñ—Å–ª—è `urlparse(self.path)`, —É `parsed_path.path` –±—É–¥–µ —Ç—ñ–ª—å–∫–∏ —á–∞—Å—Ç–∏–Ω–∞ —à–ª—è—Ö—É, —Ç–æ–±—Ç–æ `/reset`.
            
            # –Ø–∫—â–æ —à–ª—è—Ö —Ç–æ—á–Ω–æ `/reset`:
            # * –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω
            # * –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å 200 OK
            # * –¶–µ –æ–∑–Ω–∞—á–∞—î, —â–æ –º–∏ —Å–∫–∏–¥–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É

            global USERS_LIST
            USERS_LIST = [
                {
                    "id": 1,
                    "username": "theUser",
                    "firstName": "John",
                    "lastName": "James",
                    "email": "john@email.com",
                    "password": "12345",
                }
            ]
            self._set_response(200, USERS_LIST)

        elif parsed_path.path == "/users":
            # –Ø–∫—â–æ —à–ª—è—Ö `/users` ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            # ".path" –æ–∑–Ω–∞—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –º—ã –±–µ—Ä—ë–º –ø–æ–ª–µ —Å –∏–º–µ–Ω–µ–º "path", –∫–æ—Ç–æ—Ä–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –ø–µ—Ä–µ–≤–µ–Ω–Ω–æ–π "parsed_path".
            # –í parsed_path –±—É–¥–µ—Ç –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏:
            # * `.scheme`
            # * `.netloc`
            # * `.path`
            # * `.params`
            # * `.query`
            # * `.fragment`

            # –ò `.path` ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –æ–±—ä–µ–∫—Ç–∞, –∞ –Ω–µ –º–µ—Ç–æ–¥.
            # –ü—Ä–∏–º–µ—Ä:
            # self.path ‚Üí "/user/theUser?sort=asc" - –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ø—É—Ç—å
            # parsed_path = urlparse(self.path) - –ø–æ–ª—É—á–∏–ª–∏ —á–∞—Å—Ç—å –∞–¥—Ä–µ—Å–∞ "path"
            # parsed_path.path ‚Üí "/user/theUser" - –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –º—ã –ø–æ–ª—É—á–∏–º –≤–æ—Ç —Ç–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
            self._set_response(200, USERS_LIST)

        elif len(path_parts) == 2 and path_parts[0] == "user":
            username = path_parts[1]
            # –Ø–∫—â–æ —à–ª—è—Ö —É –≤–∏–≥–ª—è–¥—ñ `/user/—ñ–º‚Äô—è`:
            # * –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Å–∞–º–µ 2 —á–∞—Å—Ç–∏–Ω–∏ ‚Äî `["user", "theUser"]`
            # * –í–∏—Ç—è–≥—É—î–º–æ —ñ–º‚Äô—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –¥—Ä—É–≥–æ—ó —á–∞—Å—Ç–∏–Ω–∏
            user = next((user for user in USERS_LIST if user["username"] == username), None)
            # –®—É–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É —Å–ø–∏—Å–∫—É –ø–æ `username`.
            # `next(...)` –ø–æ–≤–µ—Ä—Ç–∞—î –ø–µ—Ä—à–æ–≥–æ –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ, –∞–±–æ `None`.
            #  —Ñ—É–Ω–∫–∏—Ü–∏—è next() —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º –æ–±—ã—á–Ω—ã–π —Ü–∏–∫–ª for –∏ –æ–Ω–∞ —Å—Ä–∞–∑—É –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫–æ–π-—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç —Å any(), —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è any() –≤–µ—Ä–Ω—ë—Ç –±—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ True / False, –∞ –Ω–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –∏—â–µ–º.
            if user:
            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–∏–π ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –π–æ–≥–æ, —ñ–Ω–∞–∫—à–µ ‚Äî –ø–æ–º–∏–ª–∫–∞ 400
                self._set_response(200, user)
            else:
                self._set_response(400, {"error": "User not found"})
        else:
            self._set_response(418)

    def do_POST(self):
        """–û–±—Ä–æ–±–ª—è—î POST-–∑–∞–ø–∏—Ç–∏:
        - /user ‚Äî –¥–æ–¥–∞—î –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        - /user/createWithList ‚Äî –¥–æ–¥–∞—î —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        """
        parsed_path = urlparse(self.path)
        # path_parts = parsed_path.path.strip("/").split("/")

        data = self._pars_body()
        if data is None:
            self._set_response(400, {})
            return

        global USERS_LIST

        if parsed_path.path == "/user":
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if not self._is_valid_user(data):
                self._set_response(400, {})
                return
            if any(u["id"] == data["id"] for u in USERS_LIST):
                self._set_response(400, {})
                return
            USERS_LIST.append(data)
            self._set_response(201, data)

        elif parsed_path.path == "/user/createWithList":
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            if not isinstance(data, list) or not all(self._is_valid_user(u) for u in data):
                self._set_response(400, {})
                return
            existing_ids = {u["id"] for u in USERS_LIST}
            new_ids = {u["id"] for u in data}
            if existing_ids & new_ids:
                self._set_response(400, {})
                return
            # > **–ß–æ–º—É –º–∏ –Ω–µ –ø–∏—à–µ–º–æ `return self._set_response(400, {})`, –∞ –ø—Ä–æ—Å—Ç–æ –≤–∏–∫–ª–∏–∫–∞—î–º–æ `self._set_response(400, {})` —ñ –ø–æ—Ç—ñ–º `return`?**

            # ## ‚úÖ –ö–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:
            # üî∏ –ú–∏ –Ω–µ –ø–∏—à–µ–º–æ `return self._set_response(...)`, –±–æ **–º–µ—Ç–æ–¥ `_set_response()` –Ω—ñ—á–æ–≥–æ –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î** (–≤—ñ–Ω –ø–æ–≤–µ—Ä—Ç–∞—î `None`).
            # üî∏ –¢–æ–º—É –º–∏ –≤–∏–∫–ª–∏–∫–∞—î–º–æ `_set_response(...)`, **—â–æ–± –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–ª—ñ—î–Ω—Ç—É**,
            # –∞ –ø–æ—Ç—ñ–º –ø—Ä–æ—Å—Ç–æ —Ä–æ–±–∏–º–æ `return`, —â–æ–± **–∑—É–ø–∏–Ω–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó `do_POST()`**.
            # ---
            # ## üß© –î–∞–≤–∞–π—Ç–µ —Ä–æ–∑–±–µ—Ä–µ–º–æ –Ω–∞ –ø—Ä–∏–∫–ª–∞–¥—ñ
            # ### –ü—Ä–∏–∫–ª–∞–¥:
            # ```python
            # def do_POST(self):
            #     data = self._pars_body()
            #     if data is None:
            #         self._set_response(400, {})
            #         return
            # ```
            # ### –î–µ—Ç–∞–ª—å–Ω–æ:
            # * üîπ `self._set_response(400, {})` ‚Äî —Ñ–æ—Ä–º—É—î HTTP-–≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –∫–æ–¥–æ–º 400 —ñ –ø—É—Å—Ç–∏–º JSON.
            # * üîπ `return` ‚Äî –∑—É–ø–∏–Ω—è—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è `do_POST`.
            # ---
            # ### ‚ùå –©–æ –±—É–ª–æ –±, —è–∫–±–∏ –Ω–∞–ø–∏—Å–∞–ª–∏:
            # ```python
            # return self._set_response(400, {})
            # ```
            # * –¶–µ —Ç–µ–∂ —Å–ø—Ä–∞—Ü—é—î, **–∞–ª–µ –Ω–µ–º–∞—î —Å–µ–Ω—Å—É –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ `None`**, –±–æ –∫–ª—ñ—î–Ω—Ç—É —Ü–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ.
            # * –ë—ñ–ª—å—à–µ —Ç–æ–≥–æ, Python –ø–æ–≤–µ—Ä–Ω–µ `None` –∑ `do_POST`, –∞–ª–µ `BaseHTTPRequestHandler` —Ü—å–æ–≥–æ –Ω–µ —á–µ–∫–∞—î.
            # * –¶–µ –º–æ–∂–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ **–∑–∞–π–≤—É –ø–ª—É—Ç–∞–Ω–∏–Ω—É** ‚Äî –Ω—ñ–±–∏ `self._set_response(...)` —â–æ—Å—å –≤–∞–∂–ª–∏–≤–µ –ø–æ–≤–µ—Ä—Ç–∞—î, —Ö–æ—á–∞ –Ω–∞—Å–ø—Ä–∞–≤–¥—ñ –Ω—ñ.
            # ---
            # ## ‚úÖ –¢–æ–º—É –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —à–∞–±–ª–æ–Ω:
            # ```python
            # self._set_response(400, {"error": "Invalid data"})
            # return
            # ```
            # ---
            # ## üß† –ü–æ—è—Å–Ω–µ–Ω–Ω—è –Ω–∞ –ø—Ä–∏–∫–ª–∞–¥—ñ –∑–≤–∏—á–∞–π–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó:
            # ```python
            # def print_and_return():
            #     print("Hello")
            #     return
            # print(print_and_return())  # –í–∏–≤–µ–¥–µ: Hello, –ø–æ—Ç—ñ–º None
            # ```
            # –¢–µ —Å–∞–º–µ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –∑ `_set_response()`:
            # * –í—ñ–Ω —â–æ—Å—å —Ä–æ–±–∏—Ç—å (–≤–∏–≤–æ–¥–∏—Ç—å/–≤—ñ–¥–ø—Ä–∞–≤–ª—è—î), –∞–ª–µ **–Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç** ‚Üí —Ç–æ–±—ñ –Ω–µ–º–∞—î —á–æ–≥–æ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏.
            # ---
            # ## ‚úÖ –ü—ñ–¥—Å—É–º–æ–∫:
            # | –©–æ                                        | –ß–æ–º—É —Ç–∞–∫                                                 |
            # | ------------------------------------------| -------------------------------------------------------- |
            # | `self._set_response(...)`                 | –§–æ—Ä–º—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å, –∞–ª–µ **–Ω—ñ—á–æ–≥–æ –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î**             |
            # | `return` –ø—ñ—Å–ª—è –Ω—å–æ–≥–æ                      | –ü—Ä–æ—Å—Ç–æ –∑—É–ø–∏–Ω—è—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó                         |
            # | –ù–µ —Ç—Ä–µ–±–∞ –ø–∏—Å–∞—Ç–∏
            # `return self._set_response(...)`            | –ë–æ —Ü–µ –ª–∏—à–µ –∑–±–∏–≤–∞—î –∑ –ø–∞–Ω—Ç–µ–ª–∏–∫—É ‚Äî –º–µ—Ç–æ–¥ –Ω—ñ—á–æ–≥–æ –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î |

            USERS_LIST.extend(data)
            self._set_response(201, data)
        else:
            self._set_response(418)

    def do_PUT(self):
        """Processes PUT requests:
            - /user/<id> ‚Äî updates user data
        """

        parsed_path = urlparse(self.path)
        path_parts = parsed_path.path.strip("/").split("/")

        if len(path_parts) == 2 and path_parts[0] == "user":
            try:
                user_id = int(path_parts[1])
            except ValueError:
                self._set_response(404, {"error": "User not found"})
                return

            data = self._pars_body()
            if not self._is_valid_update_data(data):
                self._set_response(400, {"error": "not valid request data"})
                return

            global USERS_LIST
            for user in USERS_LIST:
                if user["id"] == user_id:
                    user.update(data)
                    self._set_response(200, user)
                    return
            self._set_response(404, {"error": "User not found"})
        else:
            self._set_response(418)

    def do_DELETE(self):
        """–û–±—Ä–æ–±–ª—è—î DELETE-–∑–∞–ø–∏—Ç–∏:
        - /user/<id> ‚Äî –≤–∏–¥–∞–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID
        """
        parsed_path = urlparse(self.path)
        path_parts = parsed_path.path.strip("/").split("/")

        if len(path_parts) == 2 and path_parts[0] == "user":
            try:
                user_id = int(path_parts[1])
            except ValueError:
                self._set_response(404, {"error": "User not found"})
                return

            global USERS_LIST
            for i, user in enumerate(USERS_LIST):
                if user["id"] == user_id:
                    USERS_LIST.pop(i)
                    self._set_response(200, {})
                    return
            self._set_response(404, {"error": "User not found"})
        else:
            self._set_response(418)


def run(server_class=HTTPServer, handler_class=SimpleHTTPRequestHandler, host='localhost', port=8000):
    server_address = (host, port)
    httpd = server_class(server_address, handler_class)
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        pass
    httpd.server_close()


if __name__ == '__main__':
    from sys import argv

    if len(argv) == 2:
        run(port=int(argv[1]))
    else:
        run()

## ‚úÖ –ü–æ—è—Å–Ω–µ–Ω–Ω—è —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó
# * **`_set_response`**: –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è JSON-—Ç—ñ–ª–∞.
# * **`_parse_body`**: –ó—á–∏—Ç—É—î —Ç–∞ –ø–∞—Ä—Å–∏—Ç—å JSON-—Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É. –ü–æ–≤–µ—Ä—Ç–∞—î `None`, —è–∫—â–æ —Ç—ñ–ª–æ –ø–æ—Ä–æ–∂–Ω—î –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ.
# * **`_is_valid_user` —Ç–∞ `_is_valid_update_data`**: –ü–µ—Ä–µ–≤—ñ—Ä—è—é—Ç—å, —á–∏ –æ–±'—î–∫—Ç–∏ –º–∞—é—Ç—å –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–æ–ª—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
# * **`do_GET`**: –û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç–∏ –Ω–∞ `/reset`, `/users` —Ç–∞ `/user/<username>`.
# * **`do_POST`**: –û–±—Ä–æ–±–ª—è—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (`/user`) –∞–±–æ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (`/user/createWithList`). –ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–æ–ª—ñ–≤ —Ç–∞ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å `id`.
# * **`do_PUT`**: –û–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ `id`. –ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö —Ç–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
# * **`do_DELETE`**: –í–∏–¥–∞–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ `id`. –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞—î –ø–æ–º–∏–ª–∫—É.

# ## üß™ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
# * –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É, —è–∫–∏–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å —Ç–µ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `8765`).
# * –ü–µ—Ä–µ–¥ –∫–æ–∂–Ω–∏–º —Ç–µ—Å—Ç–æ–º –≤–∏–∫–æ–Ω—É–π –∑–∞–ø–∏—Ç –Ω–∞ `/reset`, —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É.
# * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –Ω–∞–¥–∞–Ω—ñ —Ç–µ—Å—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—ñ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó.
