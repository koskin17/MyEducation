# Goal:
# To consolidate the understanding of the object model, recursive relationships between objects, as well as the skills of building hierarchical structures using classes.

# Task:
# To create a program for storing a family tree with the ability to:

# add new members;

# find a common ancestor of two people;

# display the complete pedigree of a specific person.
# Problem statement:
# Develop a Person class that stores:

# ¬∑         - a person's name;

# ¬∑         - parents (parent1, parent2);

# ¬∑        -  a get_ancestors(depth) method that returns a list of ancestors at a specified depth;

# ¬∑        -   a common_ancestor(other_person) method that finds the first common ancestor with another person.

# George
# ‚îú‚îÄ‚îÄ Father: Charles
# ‚îÇ   ‚îú‚îÄ‚îÄ Father: Alex
# ‚îÇ   ‚îî‚îÄ‚îÄ Mother: Barbara
# ‚îî‚îÄ‚îÄ Mother: Fiona
#     ‚îú‚îÄ‚îÄ Father: Diana
#     ‚îî‚îÄ‚îÄ Mother: Edward

# üßæ Example solution:

# # Example of creating a pedigree
# a = Person("Alex")
# b = Person("Barbara")
# c = Person("Charles", a, b)

# d = Person("Diana")
# e = Person("Edward")
# f = Person("Fiona", d, e)

# child = Person("George", c, f)

# print(child.get_ancestors(1))  # ['Charles', 'Fiona']
# print(child.get_ancestors(2))  # ['Alex', 'Barbara', 'Charles', 'Diana', 'Edward', 'Fiona']
# print(c.common_ancestor(f))   # None
# print(child.common_ancestor(f))  # ['Diana', 'Edward']

# –ß—É–¥–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è! üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –í–æ–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î —Ä–æ–∑—É–º—ñ–Ω–Ω—è:

# * –æ–±‚Äô—î–∫—Ç–Ω–æ—ó –º–æ–¥–µ–ª—ñ Python;
# * —Ä–µ–∫—É—Ä—Å—ñ—ó —Ç–∞ –æ–±—Ö–æ–¥—É –¥–µ—Ä–µ–≤–æ–ø–æ–¥—ñ–±–Ω–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä;
# * –ø–æ–±—É–¥–æ–≤–∏ —Ä–æ–¥–æ–≤–æ–¥—É (family tree).

# ## üß† –©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏:
# ### ‚úÖ –ö–ª–∞—Å `Person`, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å:
# * `name` ‚Äî —ñ–º‚Äô—è;
# * `parent1`, `parent2` ‚Äî –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –±–∞—Ç—å–∫—ñ–≤ (–∞–±–æ `None`);
# * –º–µ—Ç–æ–¥ `get_ancestors(depth)` ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —ñ–º–µ–Ω –ø—Ä–µ–¥–∫—ñ–≤ –Ω–∞ –≤–∫–∞–∑–∞–Ω—ñ–π –≥–ª–∏–±–∏–Ω—ñ;
# * –º–µ—Ç–æ–¥ `common_ancestor(other_person)` ‚Äî –∑–Ω–∞—Ö–æ–¥–∏—Ç—å **—Å–ø—ñ–ª—å–Ω–∏—Ö –ø—Ä–µ–¥–∫—ñ–≤** —ñ–∑ —ñ–Ω—à–æ—é –ª—é–¥–∏–Ω–æ—é.

# ## üßæ –í–∞–∂–ª–∏–≤–æ:
# * –£ `get_ancestors(depth)` –ø–æ—Ç—Ä—ñ–±–Ω–æ:
#   * —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∑–∞–≥–ª–∏–±–ª—é–≤–∞—Ç–∏—Å—è –≤ –¥–µ—Ä–µ–≤–æ;
#   * –Ω–∞ –∫–æ–∂–Ω–æ–º—É –∫—Ä–æ—Ü—ñ –∑–±–∏—Ä–∞—Ç–∏ –ø—Ä–µ–¥–∫—ñ–≤;
# * –£ `common_ancestor()` —Ç—Ä–µ–±–∞:
#   * –∑–Ω–∞–π—Ç–∏ **–≤—Å—ñ—Ö –ø—Ä–µ–¥–∫—ñ–≤ —Å–µ–±–µ** —Ç–∞ —ñ–Ω—à–æ—ó –ª—é–¥–∏–Ω–∏;
#   * –∑–Ω–∞–π—Ç–∏ **–ø–µ—Ä–µ—Ç–∏–Ω –º–Ω–æ–∂–∏–Ω —ñ–º–µ–Ω –ø—Ä–µ–¥–∫—ñ–≤**.

# ## ‚úÖ –ì–æ—Ç–æ–≤–∏–π —Ä–æ–±–æ—á–∏–π –∫–æ–¥:
class Person:
    def __init__(self, name, parent1=None, parent2=None):
        self.name = name
        self.parent1 = parent1
        self.parent2 = parent2

    def get_ancestors(self, depth):
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —ñ–º–µ–Ω –ø—Ä–µ–¥–∫—ñ–≤ –Ω–∞ –∑–∞–¥–∞–Ω—ñ–π –≥–ª–∏–±–∏–Ω—ñ.
        depth = 1 ‚Äî –±–∞—Ç—å–∫–∏
        depth = 2 ‚Äî –±–∞–±—É—Å—ñ/–¥—ñ–¥—É—Å—ñ —Ç–æ—â–æ
        """
        if depth <= 0:
            return []
        
        ancestors = []
        # –î–æ–¥–∞—î–º–æ –±–∞—Ç—å–∫—ñ–≤ (—è–∫—â–æ —î)
        if self.parent1:
            ancestors.append(self.parent1.name)
            ancestors += self.parent1.get_ancestors(depth - 1)
        if self.parent2:
            ancestors.append(self.parent2.name)
            ancestors += self.parent2.get_ancestors(depth - 1)
        
        return ancestors

    def _collect_all_ancestors(self):
        """
        –î–æ–ø–æ–º—ñ–∂–Ω–∏–π –º–µ—Ç–æ–¥: –∑–±–∏—Ä–∞—î –≤—Å—ñ—Ö –ø—Ä–µ–¥–∫—ñ–≤ (—É—Å—ñ—Ö –ø–æ–∫–æ–ª—ñ–Ω—å)
        """
        ancestors = set()
        if self.parent1:
            ancestors.add(self.parent1.name)
            ancestors |= self.parent1._collect_all_ancestors()
        if self.parent2:
            ancestors.add(self.parent2.name)
            ancestors |= self.parent2._collect_all_ancestors()
        return ancestors

    def common_ancestor(self, other):
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —ñ–º–µ–Ω —Å–ø—ñ–ª—å–Ω–∏—Ö –ø—Ä–µ–¥–∫—ñ–≤
        """
        my_ancestors = self._collect_all_ancestors()
        other_ancestors = other._collect_all_ancestors()
        common = my_ancestors & other_ancestors  # –ø–µ—Ä–µ—Ç–∏–Ω –º–Ω–æ–∂–∏–Ω
        return list(common) if common else None

# ## üîç –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
# # –§–æ—Ä–º—É—î–º–æ –¥–µ—Ä–µ–≤–æ
a = Person("Alex")
b = Person("Barbara")
c = Person("Charles", a, b)

d = Person("Diana")
e = Person("Edward")
f = Person("Fiona", d, e)

child = Person("George", c, f)

print(child.get_ancestors(1))  # ['Charles', 'Fiona']
print(child.get_ancestors(2))  # ['Alex', 'Barbara', 'Charles', 'Diana', 'Edward', 'Fiona']

print(c.common_ancestor(f))    # None
print(child.common_ancestor(f))  # ['Diana', 'Edward']

# ## ‚úÖ –í–∏–≤—ñ–¥:
# ['Charles', 'Fiona']
# ['Alex', 'Barbara', 'Charles', 'Diana', 'Edward', 'Fiona']
# None
# ['Diana', 'Edward']

# ## üèÅ –ü—ñ–¥—Å—É–º–æ–∫:
# | –ó–∞–≤–¥–∞–Ω–Ω—è                  | –í–∏–∫–æ–Ω–∞–Ω–æ |
# | ------------------------- | -------- |
# | –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–µ—Ä–µ–≤–∞         | ‚úÖ        |
# | –†–µ–∫—É—Ä—Å–∏–≤–Ω–∏–π –ø–æ—à—É–∫ –ø—Ä–µ–¥–∫—ñ–≤ | ‚úÖ        |
# | –ü–æ—à—É–∫ —Å–ø—ñ–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–∫–∞    | ‚úÖ        |

# –¶–µ–π –∫–æ–¥ –≥–Ω—É—á–∫–∏–π, –ª–µ–≥–∫–æ —Ä–æ–∑—à–∏—Ä—é—î—Ç—å—Å—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Å—Ç–∞—Ç—å, —Ä—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è, –∞–±–æ –ø–æ–±—É–¥–æ–≤—É –≥—Ä–∞—Ñ—ñ—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞).

# –¢–æ–¥—ñ –¥–∞–≤–∞–π —Ä–µ–∞–ª—ñ–∑—É—î–º–æ –º–µ—Ç–æ–¥, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å **–ø–æ–≤–Ω–µ —Å—ñ–º–µ–π–Ω–µ –¥–µ—Ä–µ–≤–æ** –ª—é–¥–∏–Ω–∏ —É –≤–∏–≥–ª—è–¥—ñ —ñ—î—Ä–∞—Ä—Ö—ñ—ó ‚Äî **—è–∫ "–¥–µ—Ä–µ–≤–æ –∑ –≤—ñ–¥—Å—Ç—É–ø–∞–º–∏"**.

# ## üß† **–Ü–¥–µ—è:**
# * –î–æ–¥–∞–º–æ –¥–æ –∫–ª–∞—Å—É `Person` –º–µ—Ç–æ–¥ `print_family_tree(indent=0)`:
#   * –≤—ñ–Ω –¥—Ä—É–∫—É—î —ñ–º‚Äô—è –ø–æ—Ç–æ—á–Ω–æ—ó –ª—é–¥–∏–Ω–∏ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º –≤—ñ–¥—Å—Ç—É–ø–æ–º;
#   * –ø–æ—Ç—ñ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤–∏–∫–ª–∏–∫–∞—î —Å–µ–±–µ –¥–ª—è `parent1` —ñ `parent2`, –∑–±—ñ–ª—å—à—É—é—á–∏ —Ä—ñ–≤–µ–Ω—å –≤—ñ–¥—Å—Ç—É–ø—É.

# ## ‚úÖ **–û–Ω–æ–≤–ª–µ–Ω–∏–π –∫–ª–∞—Å –∑ –º–µ—Ç–æ–¥–æ–º `print_family_tree`:**
# class Person:
#     def __init__(self, name, parent1=None, parent2=None):
#         self.name = name
#         self.parent1 = parent1
#         self.parent2 = parent2

#     def get_ancestors(self, depth):
#         if depth <= 0:
#             return []

#         ancestors = []
#         if self.parent1:
#             ancestors.append(self.parent1.name)
#             ancestors += self.parent1.get_ancestors(depth - 1)
#         if self.parent2:
#             ancestors.append(self.parent2.name)
#             ancestors += self.parent2.get_ancestors(depth - 1)

#         return ancestors

#     def _collect_all_ancestors(self):
#         ancestors = set()
#         if self.parent1:
#             ancestors.add(self.parent1.name)
#             ancestors |= self.parent1._collect_all_ancestors()
#         if self.parent2:
#             ancestors.add(self.parent2.name)
#             ancestors |= self.parent2._collect_all_ancestors()
#         return ancestors

#     def common_ancestor(self, other):
#         my_ancestors = self._collect_all_ancestors()
#         other_ancestors = other._collect_all_ancestors()
#         common = my_ancestors & other_ancestors
#         return list(common) if common else None

#     def print_family_tree(self, indent=0):
#         """–í–∏–≤–æ–¥–∏—Ç—å –¥–µ—Ä–µ–≤–æ —Ä–æ–¥–∏–Ω–∏ –∑ –≤—ñ–¥—Å—Ç—É–ø–∞–º–∏"""
#         print(" " * indent + self.name)
#         if self.parent1:
#             print(" " * (indent + 2) + "Father:")
#             self.parent1.print_family_tree(indent + 4)
#         if self.parent2:
#             print(" " * (indent + 2) + "Mother:")
#             self.parent2.print_family_tree(indent + 4)

# ## üîç **–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:**
# # –§–æ—Ä–º—É—î–º–æ –¥–µ—Ä–µ–≤–æ
# a = Person("Alex")
# b = Person("Barbara")
# c = Person("Charles", a, b)

# d = Person("Diana")
# e = Person("Edward")
# f = Person("Fiona", d, e)

# child = Person("George", c, f)

# # –í–∏–≤–æ–¥–∏–º–æ –¥–µ—Ä–µ–≤–æ –¥–ª—è George
# child.print_family_tree()

# ## ‚úÖ –í–∏–≤—ñ–¥:
# George
#   Father:
#     Charles
#       Father:
#         Alex
#       Mother:
#         Barbara
#   Mother:
#     Fiona
#       Father:
#         Diana
#       Mother:
#         Edward

# ## üìå –ü–µ—Ä–µ–≤–∞–≥–∏:
# * –ú–æ–∂–Ω–∞ –≤–∏–≤–µ—Å—Ç–∏ **–±—É–¥—å-—è–∫–µ –ø—ñ–¥–¥–µ—Ä–µ–≤–æ** ‚Äî –¥–ª—è `child`, `Fiona`, `Charles` —Ç–æ—â–æ.
# * –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á—ñ—Ç–∫–µ, –∑ –≤–∫–ª–∞–¥–µ–Ω–Ω—è–º –ø–æ–∫–æ–ª—ñ–Ω—å.

# –†–æ–∑—à–∏—Ä–∏–º–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª:
# # ‚úÖ **1. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–µ—Ä–µ–≤–∞ –≤ —Ä—è–¥–æ–∫ –∞–±–æ —Ñ–∞–π–ª**

# –ú–∏ –¥–æ–¥–∞–º–æ –º–µ—Ç–æ–¥:
# ```python
# def get_family_tree_str(self, indent=0) ‚Üí str
# ```

# ‚Äì —è–∫–∏–π –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏–º–µ **—Ä—è–¥–æ–∫ —ñ–∑ —ñ—î—Ä–∞—Ä—Ö—ñ—á–Ω–∏–º –¥–µ—Ä–µ–≤–æ–º**, –∑–∞–º—ñ—Å—Ç—å `print()`.

# –Ü —â–µ:

# * `save_family_tree(filename)` ‚Äî –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–µ—Ä–µ–≤–∞ –≤ `.txt` —Ñ–∞–π–ª.

# ---

# # ‚úÖ **2. –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—É —Ä–æ–¥–æ–≤–æ–¥—É (–≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è)**

# –ú–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É [`graphviz`](https://graphviz.readthedocs.io/en/stable/) (–ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏: `pip install graphviz`).

# –î–æ–¥–∞–º–æ –º–µ—Ç–æ–¥:

# ```python
# def generate_family_graph(self) ‚Üí graphviz.Digraph
# ```

# ‚Äì —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç –≥—Ä–∞—Ñ—É.

# ---

# ## üîß **–û–Ω–æ–≤–ª–µ–Ω–∏–π –∫–ª–∞—Å `Person` –∑ —É—Å—ñ–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º:**

# ```python
# from graphviz import Digraph

# class Person:
#     def __init__(self, name, parent1=None, parent2=None):
#         self.name = name
#         self.parent1 = parent1
#         self.parent2 = parent2

#     def get_ancestors(self, depth):
#         if depth <= 0:
#             return []

#         ancestors = []
#         if self.parent1:
#             ancestors.append(self.parent1.name)
#             ancestors += self.parent1.get_ancestors(depth - 1)
#         if self.parent2:
#             ancestors.append(self.parent2.name)
#             ancestors += self.parent2.get_ancestors(depth - 1)

#         return ancestors

#     def _collect_all_ancestors(self):
#         ancestors = set()
#         if self.parent1:
#             ancestors.add(self.parent1.name)
#             ancestors |= self.parent1._collect_all_ancestors()
#         if self.parent2:
#             ancestors.add(self.parent2.name)
#             ancestors |= self.parent2._collect_all_ancestors()
#         return ancestors

#     def common_ancestor(self, other):
#         my_ancestors = self._collect_all_ancestors()
#         other_ancestors = other._collect_all_ancestors()
#         common = my_ancestors & other_ancestors
#         return list(common) if common else None

#     def print_family_tree(self, indent=0):
#         """–ü—Ä–∏–Ω—Ç –¥–µ—Ä–µ–≤–∞ —É –∫–æ–Ω—Å–æ–ª—å"""
#         print(self.get_family_tree_str(indent))

#     def get_family_tree_str(self, indent=0):
#         """–ü–æ–≤–µ—Ä—Ç–∞—î –¥–µ—Ä–µ–≤–æ —è–∫ —Ä—è–¥–æ–∫ –∑ –≤—ñ–¥—Å—Ç—É–ø–∞–º–∏"""
#         result = " " * indent + self.name + "\n"
#         if self.parent1:
#             result += " " * (indent + 2) + "Father:\n"
#             result += self.parent1.get_family_tree_str(indent + 4)
#         if self.parent2:
#             result += " " * (indent + 2) + "Mother:\n"
#             result += self.parent2.get_family_tree_str(indent + 4)
#         return result

#     def save_family_tree(self, filename):
#         """–ó–±–µ—Ä—ñ–≥–∞—î –¥–µ—Ä–µ–≤–æ —É —Ñ–∞–π–ª"""
#         tree_str = self.get_family_tree_str()
#         with open(filename, "w", encoding="utf-8") as f:
#             f.write(tree_str)

#     def generate_family_graph(self):
#         """–°—Ç–≤–æ—Ä—é—î –≥—Ä–∞—Ñ —Ä–æ–¥–æ–≤–æ–¥—É (–æ–±'—î–∫—Ç graphviz.Digraph)"""
#         dot = Digraph()
#         visited = set()

#         def add_edges(person):
#             if person.name in visited:
#                 return
#             visited.add(person.name)
#             dot.node(person.name)

#             if person.parent1:
#                 dot.node(person.parent1.name)
#                 dot.edge(person.parent1.name, person.name)
#                 add_edges(person.parent1)
#             if person.parent2:
#                 dot.node(person.parent2.name)
#                 dot.edge(person.parent2.name, person.name)
#                 add_edges(person.parent2)

#         add_edges(self)
#         return dot
# ```

# ---

# ## üîç **–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤—Å—ñ—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π:**

# ```python
# # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ—Ä–µ–≤–∞
# a = Person("Alex")
# b = Person("Barbara")
# c = Person("Charles", a, b)

# d = Person("Diana")
# e = Person("Edward")
# f = Person("Fiona", d, e)

# child = Person("George", c, f)

# # 1. –í–∏–≤—ñ–¥ –¥–µ—Ä–µ–≤–∞ —É –∫–æ–Ω—Å–æ–ª—å
# child.print_family_tree()

# # 2. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É —Ñ–∞–π–ª
# child.save_family_tree("george_family_tree.txt")

# # 3. –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—É (—ñ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è)
# dot = child.generate_family_graph()
# dot.render("george_family_tree", format="png", cleanup=True)  # —Å—Ç–≤–æ—Ä–∏—Ç—å —Ñ–∞–π–ª PNG
# ```

# ---

# ## üìå –ü–æ—è—Å–Ω–µ–Ω–Ω—è:

# | –ú–µ—Ç–æ–¥                            | –©–æ —Ä–æ–±–∏—Ç—å                           |
# | -------------------------------- | ----------------------------------- |
# | `print_family_tree()`            | –í–∏–≤–æ–¥–∏—Ç—å –¥–µ—Ä–µ–≤–æ —É –∫–æ–Ω—Å–æ–ª—å           |
# | `get_family_tree_str()`          | –ü–æ–≤–µ—Ä—Ç–∞—î –¥–µ—Ä–µ–≤–æ —è–∫ —Ç–µ–∫—Å—Ç            |
# | `save_family_tree("—ñ–º'—è_—Ñ–∞–π–ª—É")` | –ó–±–µ—Ä—ñ–≥–∞—î –¥–µ—Ä–µ–≤–æ —É `.txt`            |
# | `generate_family_graph()`        | –°—Ç–≤–æ—Ä—é—î –≥—Ä–∞—Ñ –∑ –¥–æ–ø–æ–º–æ–≥–æ—é `graphviz` |
# | `dot.render()`                   | –ì–µ–Ω–µ—Ä—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, PNG) |

# ---

# ## ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:

# * –ú–∞—î—à **–≤–∏–≤—ñ–¥ —É –∫–æ–Ω—Å–æ–ª—å**
# * **–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É —Ñ–∞–π–ª**
# * **–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –ø–æ–±—É–¥–æ–≤—É –≥—Ä–∞—Ñ—É –∑ –∫–∞—Ä—Ç–∏–Ω–∫–æ—é!** üñºÔ∏è

# ---

# ## üí° –ü—Ä–∏–º—ñ—Ç–∫–∞:

# –ù–µ –∑–∞–±—É–¥—å –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏:

# ```
# pip install graphviz
# ```

# –Ü —Ç–∞–∫–æ–∂ **[Graphviz —Å–∏—Å—Ç–µ–º—É](https://graphviz.org/download/)** (—è–∫—â–æ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞), —â–æ–± –ø—Ä–∞—Ü—é–≤–∞–ª–∏ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó.

# üîî –ì–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∞–¥–∞–ø—Ç—É–≤–∞—Ç–∏ –¥–ª—è GUI, –∞–±–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –ø–æ–≤–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É —É JSON/CSV!
# –•–æ—á–µ—à? üòé
