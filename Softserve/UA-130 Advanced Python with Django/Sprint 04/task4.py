# Your task is to write a program which allows teachers to create a multiple choice test in a class called Testpaper and to be also able to assign a minimum pass mark. The testpaper's subject should also be included. The attributes are in the following order:

# 1. subject
# 2. markscheme
# 3. pass_mark
# As well as that, we need to create student objects to take the test itself! Create another class called Student and do the following:

# Create an attribute called tests_taken and set the default as  'No tests taken'.
# Make a method called take_test(), which takes in the testpaper object they are completing and the student's answers. Compare what they wrote to the mark scheme, and append to the/create a dictionary assigned to tests_taken in the way as shown in the point below.
# Each key in the dictionary should be the testpaper subject and each value should be a string in the format seen in the examples below (whether or not the student has failed, and their percentage in brackets).
# Example:

# paper1 = Testpaper("Maths", ["1A", "2C", "3D", "4A", "5A"], "60%")
# paper2 = Testpaper("Chemistry", ["1C", "2C", "3D", "4A"], "75%")
# paper3 = Testpaper("Computing", ["1D", "2C", "3C", "4B", "5D", "6C", "7A"], "75%")

# student1 = Student()
# student2 = Student()
# student1.tests_taken ‚ûû "No tests taken"
# student1.take_test(paper1, ["1A", "2D", "3D", "4A", "5A"])
# student1.tests_taken ‚ûû {"Maths" : "Passed! (80%)"}

# student2.take_test(paper2, ["1C", "2D", "3A", "4C"])
# student2.take_test(paper3, ["1A", "2C", "3A", "4C", "5D", "6C", "7B"])
# student2.tests_taken ‚ûû {"Chemistry" : "Failed! (25%)", "Computing" : "Failed! (43%)"}

# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç —É—á–∏—Ç–µ–ª—è–º —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–µ—Å—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –∫–ª–∞—Å—Å–µ Testpaper –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª. –¢–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –≤ —Å–µ–±—è:
# - subject ‚Äì –ø—Ä–µ–¥–º–µ—Ç —Ç–µ—Å—Ç–∞
# - markscheme ‚Äì –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
# - pass_mark ‚Äì –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
# –¢–∞–∫–∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å Student, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç—ã. –î–ª—è —ç—Ç–æ–≥–æ:
# - –°–æ–∑–¥–∞–π—Ç–µ –∞—Ç—Ä–∏–±—É—Ç tests_taken —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º "No tests taken" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
# - –†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ take_test(), –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ—Å—Ç Testpaper –∏ —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ tests_taken.
# - tests_taken —Ö—Ä–∞–Ω–∏—Ç —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á ‚Äì —ç—Ç–æ –ø—Ä–µ–¥–º–µ—Ç —Ç–µ—Å—Ç–∞, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äì —Å—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º (–ø—Ä–æ—à—ë–ª/–Ω–µ –ø—Ä–æ—à—ë–ª + –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤).
# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
# paper1 = Testpaper("Maths", ["1A", "2C", "3D", "4A", "5A"], "60%")
# paper2 = Testpaper("Chemistry", ["1C", "2C", "3D", "4A"], "75%")
# paper3 = Testpaper("Computing", ["1D", "2C", "3C", "4B", "5D", "6C", "7A"], "75%")

# student1 = Student()
# student2 = Student()

# print(student1.tests_taken)  # "No tests taken"

# student1.take_test(paper1, ["1A", "2D", "3D", "4A", "5A"])
# print(student1.tests_taken)  # {"Maths" : "Passed! (80%)"}

# student2.take_test(paper2, ["1C", "2D", "3A", "4C"])
# student2.take_test(paper3, ["1A", "2C", "3A", "4C", "5D", "6C", "7B"])
# print(student2.tests_taken)  # {"Chemistry" : "Failed! (25%)", "Computing" : "Failed! (43%)"}

# class Testpaper:
#     def __init__(self, subject, markscheme, pass_mark):
#         """Test initialization"""
#         self.subject = subject               # subject name
#         self.markscheme = markscheme          # List of correct answers
#         self.pass_mark = int(pass_mark[:-1])  # Passing percentage (remove '%' and turn into a number)

# class Student:
#     def __init__(self):
#         """Creating a student"""
#         self.tests_taken = "No tests taken"  # Default: no passed tests

#     def take_test(self, testpaper, answers):
#         """Take the test and save the result"""
#         # Count the number of correct answers
#         correct_answers = sum(1 for a, b in zip(answers, testpaper.markscheme) if a == b)
#         total_questions = len(testpaper.markscheme)  # Total number of questions
#         percentage = (correct_answers / total_questions) * 100  # Calculating percentage

#         # Determine whether the student passed the test
#         result = "Passed!" if percentage >= testpaper.pass_mark else "Failed!"
#         result += f" ({round(percentage)}%)"  # Rounding off the percentage

#         # Update `tests_taken` (change `"No tests taken"` to a dictionary)
#         if self.tests_taken == "No tests taken":
#             self.tests_taken = {}  
#         self.tests_taken[testpaper.subject] = result

class Testpaper:
    def __init__(self, subject, markscheme, pass_mark):
        """Test initialization"""
        self.subject = subject              # subject name
        self.markscheme = markscheme       # List of correct answers
        self._pass_mark_value = int(pass_mark.strip().rstrip('%'))  # numerical values
        self._pass_mark_str = pass_mark.strip()                     # for display

    @property
    def pass_mark(self):
        """Returns the passing score as a string"""
        return self._pass_mark_str

    def get_pass_mark_value(self):
        """Returns a numeric value for comparison"""
        return self._pass_mark_value


class Student:
    def __init__(self):
        """Creating a student"""
        self.tests_taken = "No tests taken" # Default: no passed tests

    def take_test(self, testpaper, answers):
        """Take the test and save the result"""
        # Count the number of correct answers
        correct = sum(1 for a, b in zip(answers, testpaper.markscheme) if a == b)
        total = len(testpaper.markscheme)   # Total number of questions
        percentage = (correct / total) * 100    # Calculating percentage
        rounded_percentage = round(percentage)

        # Compare with a numeric value
        if rounded_percentage >= testpaper.get_pass_mark_value():
            result = f"Passed! ({rounded_percentage}%)"
        else:
            result = f"Failed! ({rounded_percentage}%)"

        if self.tests_taken == "No tests taken":
            self.tests_taken = {}

        self.tests_taken[testpaper.subject] = result


# –ü–æ–¥—Ä–æ–±–Ω–æ–µ, –ø–æ—à–∞–≥–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–¥–∞
# üîπ –ö–ª–∞—Å—Å Testpaper (—ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ—Å—Ç–∞)
# - subject ‚Äì –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞.
# - markscheme ‚Äì —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ["1A", "2C", "3D"]).
# - pass_mark ‚Äì –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è ("60%" ‚Üí 60).
# üîπ –ö–ª–∞—Å—Å Student (—ç–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞)
# - –ê—Ç—Ä–∏–±—É—Ç tests_taken:
# - –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "No tests taken", –µ—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –µ—â—ë –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç—ã.
# - –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–∞ tests_taken –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ {"Maths": "Passed! (80%)"}.
# - –ú–µ—Ç–æ–¥ take_test(testpaper, answers):
# - –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Ç–µ—Å—Ç–∞ Testpaper –∏ —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞.
# - –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ (markscheme).
# - –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.
# - –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É "Passed! (XX%)" –∏–ª–∏ "Failed! (XX%)", –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ö–æ–¥–Ω–æ–≥–æ –±–∞–ª–ª–∞.
# - –û–±–Ω–æ–≤–ª—è–µ—Ç tests_taken.

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∏–º –∫–æ–¥ –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö
# # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç—ã
# paper1 = Testpaper("Maths", ["1A", "2C", "3D", "4A", "5A"], "60%")
# paper2 = Testpaper("Chemistry", ["1C", "2C", "3D", "4A"], "75%")
# paper3 = Testpaper("Computing", ["1D", "2C", "3C", "4B", "5D", "6C", "7A"], "75%")

# # # –°–æ–∑–¥–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
# student1 = Student()
# student2 = Student()

# print(student1.tests_taken)  # "No tests taken"

# # # Student 1 –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–µ—Å—Ç –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ
# student1.take_test(paper1, ["1A", "2D", "3D", "4A", "5A"])
# print(student1.tests_taken)  # {"Maths" : "Passed! (80%)"}

# # # Student 2 –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–µ—Å—Ç –ø–æ —Ö–∏–º–∏–∏ –∏ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ
# student2.take_test(paper2, ["1C", "2D", "3A", "4C"])
# student2.take_test(paper3, ["1A", "2C", "3A", "4C", "5D", "6C", "7B"])
# print(student2.tests_taken)  # {"Chemistry" : "Failed! (25%)", "Computing" : "Failed! (43%)"}

# –¢–µ—Å—Ç1
paper1 = Testpaper('Maths', ['1A', '2C', '3D', '4A', '5A'], '60%')
student1 = Student()
print(student1.tests_taken)
student1.take_test(paper1, ['1A', '2D', '3D', '4A', '5A'])
print(student1.tests_taken)
print(paper1.subject)
print(paper1.markscheme)
print(paper1.pass_mark)

# –¢–µ—Å—Ç2
paper2 = Testpaper('Chemistry', ['1C', '2C', '3D', '4A'], '75%')
student2 = Student()
student2.take_test(paper2, ['1C', '2D', '3A', '4C'])
print(student2.tests_taken)
print(paper2.subject)
print(paper2.markscheme)
print(paper2.pass_mark)

# –¢–µ—Å—Ç3
paper3 = Testpaper('Computing', ['1D', '2C', '3C', '4B', '5D', '6C', '7A'], '75%')
student2 = Student()
student3 = Student()
student2.take_test(paper3, ['1A', '2C', '3A', '4C', '5D', '6C', '7B'])
print(student3.tests_taken)
student3.take_test(paper1, ['1C', '2D', '3A', '4C', '5A'])
student3.take_test(paper3, ['1A', '2C', '3A', '4C', '5D', '6C', '7B'])
print(student3.tests_taken)
print(paper3.subject)
print(paper3.markscheme)
print(paper3.pass_mark)

# –¢–µ—Å—Ç4
student3 = Student()
paper4 = Testpaper('Physics', ['1A', '2B', '3A', '4C', '5A', '6C', '7A', '8C', '9D', '10A', '11A'], '90%')
student3.take_test(paper4, ['1A', '2C', '3A', '4C', '5D', '6C', '7B', '8C', '9D', '10A', '11A'])
print(student3.tests_taken)
print(paper4.subject)
print(paper4.markscheme)
print(paper4.pass_mark)