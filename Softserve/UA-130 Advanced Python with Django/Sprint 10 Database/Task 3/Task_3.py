# Create a Python program to use the sqlite database named "q1.db". The query to the database should display information, as shown in the example below, including phrases: about the successful connection, the total number of records, the actual records, the record of closing the database. From the table of "customers" to deduce all records for which in a "grade" field of value more than 200 with sort ordering on id

# For example output:
# Connected to SQLite
# Total rows are:   2
# Printing each row
# Id:  3022
# Name:  Nik Rimando
# City:  Madrid
# Grade:  1000
# Seller:  6001

# Id:  3025
# Name:  Grem Zusisa
# City:  USA
# Grade:  2000
# Seller:  6002

# The SQLite connection is closed

## üß© **–©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏:**
# 1. **–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö `q1.db`**
# 2. **–í–∏–≤–µ—Å—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è**
# 3. **–í–∏–∫–æ–Ω–∞—Ç–∏ SQL-–∑–∞–ø–∏—Ç: –≤–∏–±—Ä–∞—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –∑ —Ç–∞–±–ª–∏—Ü—ñ `customers`, —É —è–∫–∏—Ö `grade > 200`, –≤–ø–æ—Ä—è–¥–∫—É–≤–∞—Ç–∏ –∑–∞ `id`**
# 4. **–í–∏–≤–µ—Å—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤**
# 5. **–í–∏–≤–µ—Å—Ç–∏ –∫–æ–∂–µ–Ω –∑–∞–ø–∏—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ:**
#    Id:  <–∑–Ω–∞—á–µ–Ω–Ω—è>
#    Name:  <–∑–Ω–∞—á–µ–Ω–Ω—è>
#    City:  <–∑–Ω–∞—á–µ–Ω–Ω—è>
#    Grade:  <–∑–Ω–∞—á–µ–Ω–Ω—è>
#    Seller:  <–∑–Ω–∞—á–µ–Ω–Ω—è>
#    ```
# 6. **–ó–∞–∫—Ä–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö**
# 7. **–í–∏–≤–µ—Å—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω–Ω—è**

## üîß –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ `customers` (–∑–∞ –ø—Ä–∏–∫–ª–∞–¥–æ–º):
# id INTEGER
# name TEXT
# city TEXT
# grade INTEGER
# salesperson_id INTEGER

## ‚úÖ **SQL-–∑–∞–ø–∏—Ç** –¥–ª—è –≤–∏–±—ñ—Ä–∫–∏:
# ```sql
# SELECT * FROM customers WHERE grade > 200 ORDER BY id;
# ```

import sqlite3
from pathlib import Path

def getting_customers_on_condition():
    db_path = Path(__file__).parent / "q1.db"  # Get the current folder of python-script for conection to database

    try:
        # connect to DB
        connection = sqlite3.connect(db_path)
        cursor = connection.cursor()
        print("Connected to SQLite")

        # make SQL-query on condition
        query = """
                SELECT * FROM customers
                WHERE grade > 200
                ORDER BY id;
                """
        cursor.execute(query)

        # Get results
        rows = cursor.fetchall()

        # ### `fetchall()` ‚Äî —Ü–µ –º–µ—Ç–æ–¥, —è–∫–∏–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø—ñ—Å–ª—è SQL-–∑–∞–ø–∏—Ç—É, —â–æ–± **–æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏** –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —É –≤–∏–≥–ª—è–¥—ñ **—Å–ø–∏—Å–∫—É —Ä—è–¥–∫—ñ–≤ (list of tuples)**.
        # ## üì¶ –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:
        # ### –£—è–≤—ñ–º–æ:
        # –¢–∏ –∑—Ä–æ–±–∏–≤ SQL-–∑–∞–ø–∏—Ç, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:
        # ```python
        # cursor.execute("SELECT * FROM customers WHERE grade > 200")
        # ```
        # –¢–µ–ø–µ—Ä —É –∫—É—Ä—Å–æ—Ä—ñ (`cursor`) –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤—Å—ñ –∑–∞–ø–∏—Å–∏, —è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å —É–º–æ–≤—ñ.
        # ### –Ü —Ç–æ–¥—ñ:
        # ```python
        # rows = cursor.fetchall()
        # ```
        # ‚Äî –æ–∑–Ω–∞—á–∞—î: ¬´–í—ñ–∑—å–º–∏ **–≤—Å—ñ –∑–∞–ø–∏—Å–∏** –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Ü—å–æ–≥–æ –∑–∞–ø–∏—Ç—É —Ç–∞ –∑–±–µ—Ä–µ–∂–∏ —ó—Ö —É –∑–º—ñ–Ω–Ω—É `rows` —É –≤–∏–≥–ª—è–¥—ñ —Å–ø–∏—Å–∫—É –∫–æ—Ä—Ç–µ–∂—ñ–≤¬ª.
        # ---
        # ## ‚úÖ –ü—Ä–∏–∫–ª–∞–¥:
        # ### –¢–∞–±–ª–∏—Ü—è:
        # | id | name  | grade |
        # | -- | ----- | ----- |
        # | 1  | Alice | 300   |
        # | 2  | Bob   | 250   |
        # ```python
        # cursor.execute("SELECT id, name, grade FROM customers WHERE grade > 200")
        # rows = cursor.fetchall()
        # ```
        # –¢–µ–ø–µ—Ä `rows` –±—É–¥–µ:
        # ```python
        # [
        #     (1, 'Alice', 300),
        #     (2, 'Bob', 250)
        # ]
        # ```
        # –ö–æ–∂–µ–Ω –∑–∞–ø–∏—Å ‚Äî —Ü–µ **–∫–æ—Ä—Ç–µ–∂ (tuple)**.
        # ---
        # ## üîÅ –©–æ –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –∑ —Ü–∏–º–∏ –¥–∞–Ω–∏–º–∏:
        # ```python
        # for row in rows:
        #     print(f"ID: {row[0]}, Name: {row[1]}, Grade: {row[2]}")
        # ```
        # ---
        # ## üìå –©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–∞–º‚Äô—è—Ç–∞—Ç–∏:
        # | –û—Å–æ–±–ª–∏–≤—ñ—Å—Ç—å       | –û–ø–∏—Å                                           |
        # | ----------------- | ---------------------------------------------- |
        # | `fetchall()`      | –ü–æ–≤–µ—Ä—Ç–∞—î **–≤—Å—ñ –∑–∞–ø–∏—Å–∏** —è–∫ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂—ñ–≤     |
        # | –ü—ñ—Å–ª—è `execute()` | –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è, —â–æ–± –∑—á–∏—Ç–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Ç—É |
        # | –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ–º–∞  | –ü–æ–≤–µ—Ä—Ç–∞—î **–ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫** (`[]`)            |
        # ---
        # ## üß† –î–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è:
        # * `fetchone()` ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î **—Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à–∏–π** —Ä—è–¥–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        # * `fetchmany(n)` ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î **–ø–µ—Ä—à—ñ `n` —Ä—è–¥–∫—ñ–≤**
        # ---
        # ## üéØ –£ —Ä–µ–∞–ª—å–Ω–æ–º—É –∂–∏—Ç—Ç—ñ:
        # –ö–æ–ª–∏ —Ç–∏ —Ä–æ–±–∏—à `fetchall()`, —É –ø–∞–º‚Äô—è—Ç—å –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å—Å—è –≤—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏. –¶–µ –æ–∫, —è–∫—â–æ —Ä—è–¥–∫—ñ–≤ –Ω–µ –Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ. –Ø–∫—â–æ —Ç–∏ –æ—á—ñ–∫—É—î—à **—Ç–∏—Å—è—á—ñ –∞–±–æ –º—ñ–ª—å–π–æ–Ω–∏ –∑–∞–ø–∏—Å—ñ–≤** ‚Äî –∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `fetchone()` –∞–±–æ –æ–±—Ä–æ–±–ª—è—Ç–∏ –∫—É—Ä—Å–æ—Ä –ø–æ—Å—Ç—É–ø–æ–≤–æ (—ñ—Ç–µ—Ä—É–≤–∞—Ç–∏ –ø–æ –Ω—å–æ–º—É).
        # ---
        # –¢–∏ —Å—Ç–∞–≤–∏—à –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è! –ë–µ–∑ —Ä–æ–∑—É–º—ñ–Ω–Ω—è `fetchall()` –Ω–µ –æ–±—ñ–π—Ç–∏—Å—å –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ –±–∞–∑–∞–º–∏ üí°
        # –•–æ—á–µ—à, –º–æ–∂—É –∑—Ä–æ–±–∏—Ç–∏ –º–∞–ª–µ–Ω—å–∫–∏–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥ —ñ–∑ `sqlite3`, —â–æ–± –ø–æ—Ç—Ä–µ–Ω—É–≤–∞—Ç–∏—Å—å?
        print("Total rows are:  ", len(rows))
        print("Printing each row")
        # Output each line
        for row in rows:
            print(f"Id:  {row[0]}")
            print(f"Name:  {row[1]}")
            print(f"City:  {row[2]}")
            print(f"Grade:  {row[3]}")
            print(f"Seller:  {row[4]}")
            print()  # empty line
    except sqlite3.Error as error:
        print("Error while connecting to SQLite", error)
    finally:
        # Close the connection
        if connection:
            connection.close()
            print("The SQLite connection is closed")

getting_customers_on_condition()

## üìò –ü–æ—è—Å–Ω–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–∏–º–∏ —Å–ª–æ–≤–∞–º–∏:
# * –ú–∏ –ø—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—å –¥–æ —Ñ–∞–π–ª—É `q1.db` —è–∫ –¥–æ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —Ñ–∞–π–ª—É (—Ü–µ –æ—Å–æ–±–ª–∏–≤—ñ—Å—Ç—å SQLite ‚Äî –≤—ñ–Ω –Ω–µ –ø–æ—Ç—Ä–µ–±—É—î —Å–µ—Ä–≤–µ—Ä–∞).
# * –î–∞–ª—ñ –≤–∏–∫–æ–Ω—É—î–º–æ `SELECT` –∑ —É–º–æ–≤–æ—é `grade > 200`.
# * –ó—á–∏—Ç—É—î–º–æ –≤—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —á–µ—Ä–µ–∑ `fetchall()`.
# * –í–∏–≤–æ–¥–∏–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ —Ç–∞ —Å–∞–º—ñ –∑–∞–ø–∏—Å–∏.
# * –Ü –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è ‚Äî –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è.

## üìå –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É (–ø—Ä–∏–∫–ª–∞–¥):
# Connected to SQLite
# Total rows are:   2
# Printing each row
# Id:  3022
# Name:  Nik Rimando
# City:  Madrid
# Grade:  1000
# Seller:  6001

# Id:  3025
# Name:  Grem Zusisa
# City:  USA
# Grade:  2000
# Seller:  6002

# The SQLite connection is closed