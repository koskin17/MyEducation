# Write the function sum_slice_array(arr, first, second), which accepts the array (list) arr and two numbers (first and second) - the ordinal numbers of the elements of the array that must be added. For example, if 3 and 5 were entered, the 3rd and 5th elements must be added.

# The function should generate exceptions MyExceptions:
# if non-numbers or numbers less than 1 were entered;
# if non-numbers obtained from array;
# if when one of the numbers or both is larger than the array length.
# For example:

# print(sum_slice_array([1, 2, 3], 1, 2))
# 3.0

# try:
#     print(sum_slice_array([1, "string", 3], 1, 2))
# except MyExceptions:
#     print("MyExceptions")
# MyExceptions

# try:
#     print(sum_slice_array([14, 5, 3], -1, 2))
# except MyExceptions:
#     print("MyExceptions")
# MyExceptions

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
class MyExceptions(Exception):
    pass

def sum_slice_array(arr, first, second):
    # try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ first –∏ second —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞–º–∏ –∏ >= 1
    if not (isinstance(first, int) and isinstance(second, int) and first >= 1 and second >= 1):
        raise MyExceptions("Numbers must be integers and at least 1")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ first –∏ second –Ω–µ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞
    if first > len(arr) or second > len(arr):
        raise MyExceptions("Indexes are out of range")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑—ã–≤–∞—é—Ç first –∏ second, —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞–º–∏
    if not (isinstance(arr[first - 1], (int, float)) and isinstance(arr[second - 1], (int, float))):
        raise MyExceptions("Elements must be numbers")
    # except MyExceptions as e:
    #     return "MyExceptions"
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É–º–º—É –¥–≤—É—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    return float(arr[first - 1] + arr[second - 1])
    
    

# # –ü—Ä–∏–º–µ—Ä—ã –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
print(sum_slice_array([1, 2, 3], 1, 2))      # –í—ã–≤–æ–¥: 3.0

try:
    print(sum_slice_array([1, "string", 3], 1, 2))  # –í—ã–≤–æ–¥: MyExceptions
except MyExceptions:
    print("MyExceptions")

try:
    print(sum_slice_array([14, 5, 3], -1, 2))  # –í—ã–≤–æ–¥: MyExceptions
except MyExceptions:
    print("MyExceptions")

# ### **–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–¥–∞**
# 1. **–°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ `MyExceptions`**:
#    - –ö–ª–∞—Å—Å `MyExceptions` –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç `Exception`, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `raise MyExceptions(...)`.

# 2. **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∏ —Ç–∏–ø–∞ –æ—à–∏–±–æ–∫ –≤ `try-except`**:
#    - **`first` –∏ `second` –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏ ‚â• 1**:  
#      –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ —á–∏—Å–ª–∞ –∏–ª–∏ –æ–Ω–∏ –º–µ–Ω—å—à–µ `1`, –≤—ã–∑—ã–≤–∞–µ–º `MyExceptions`.
#    - **–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ `first` –∏ `second` –Ω–µ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞**:  
#      –ï—Å–ª–∏ –æ–¥–Ω–æ –∏–∑ —á–∏—Å–µ–ª –±–æ–ª—å—à–µ –¥–ª–∏–Ω—ã —Å–ø–∏—Å–∫–∞, –≤—ã–∑—ã–≤–∞–µ–º `MyExceptions`.
#    - **–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞–º–∏**:  
#      –ï—Å–ª–∏ `arr[first-1]` –∏–ª–∏ `arr[second-1]` –Ω–µ —á–∏—Å–ª–∞, –≤—ã–∑—ã–≤–∞–µ–º `MyExceptions`.

# 3. **–ï—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É–º–º—É —á–∏—Å–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ –≤–∏–¥–µ `float`**.

# 1. ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ **–≤–ª–∞—Å–Ω–∏–π –∫–ª–∞—Å –≤–∏–∫–ª—é—á–µ–Ω–Ω—è `MyExceptions`**.
# 2. ‚úÖ –£—Å—ñ —É–º–æ–≤–∏ –∑–∞–¥–∞—á—ñ –ø–æ–∫—Ä–∏—Ç—ñ:
#    * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ —ñ–Ω–¥–µ–∫—Å–∏ ‚Äî —Ü—ñ–ª—ñ —Ç–∞ ‚â• 1.
#    * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ —ñ–Ω–¥–µ–∫—Å–∏ –Ω–µ –≤–∏—Ö–æ–¥—è—Ç—å –∑–∞ –º–µ–∂—ñ —Å–ø–∏—Å–∫—É.
#    * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –æ–±—Ä–∞–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ ‚Äî —á–∏—Å–ª–∞ (`int` –∞–±–æ `float`).
# 3. ‚úÖ –ü–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è —Å—É–º–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ `float`.
# 4. ‚úÖ –ü–æ–≤–µ—Ä—Ç–∞—î `"MyExceptions"` –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø—Ä–∏–∫–ª–∞–¥—É.

# ## ‚ö†Ô∏è **–©–æ –º–æ–∂–Ω–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏:**
# ### 1. ‚ùóÔ∏è –ü–æ–≥–∞–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è `try-except`:
# * –í–∏–Ω—è—Ç–æ–∫ `MyExceptions` –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –≤ `try`, —ñ –ø–æ—Ç—ñ–º —É —Ü—å–æ–º—É –∂ `except` –≤—ñ–Ω –ø–µ—Ä–µ—Ö–æ–ø–ª—é—î—Ç—å—Å—è —Ç–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–æ–∫—É `"MyExceptions"`.
# * –¶–µ **–ø–æ—Ä—É—à—É—î –ø—Ä–∏–Ω—Ü–∏–ø**: —è–∫—â–æ –≤–∏–Ω—è—Ç–æ–∫ –∫–∏–¥–∞—î—Ç—å—Å—è ‚Äî –π–æ–≥–æ –ø–æ–≤–∏–Ω–µ–Ω –æ–±—Ä–æ–±–∏—Ç–∏ **–≤–∏–∫–ª–∏–∫–∞—é—á–∏–π –∫–æ–¥**, –∞ –Ω–µ –≥–ª—É—à–∏—Ç–∏ —Å–∞–º `sum_slice_array`.

# üìå **–ó–≥—ñ–¥–Ω–æ –∑–∞–¥–∞—á—ñ**, **–≤–∏–∫–ª–∏–∫** –ø–æ–≤–∏–Ω–µ–Ω –≤–∏–≥–ª—è–¥–∞—Ç–∏ —Ç–∞–∫:
# try:
#     print(sum_slice_array([...], ..., ...))
# except MyExceptions:
#     print("MyExceptions")

# –ê –Ω–µ —â–æ–± —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞–ª–∞ —Ä—è–¥–æ–∫ `"MyExceptions"`.

# ## üõ†Ô∏è **–ü–æ–ª—ñ–ø—à–µ–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è (–ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑ —Ç–æ—á–∫–∏ –∑–æ—Ä—É Python-–ø—Ä–∞–∫—Ç–∏–∫–∏):**
# # –í–ª–∞—Å–Ω–∏–π –∫–ª–∞—Å –≤–∏–Ω—è—Ç–∫—É
# class MyExceptions(Exception):
#     pass

# def sum_slice_array(arr, first, second):
#     # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —Ü—ñ–ª—ñ —á–∏—Å–ª–∞ ‚â• 1
#     if not (isinstance(first, int) and isinstance(second, int) and first >= 1 and second >= 1):
#         raise MyExceptions("Indexes must be integers ‚â• 1")

#     # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —ñ–Ω–¥–µ–∫—Å–∏ –Ω–µ –≤–∏—Ö–æ–¥—è—Ç—å –∑–∞ –º–µ–∂—ñ –º–∞—Å–∏–≤—É
#     if first > len(arr) or second > len(arr):
#         raise MyExceptions("Indexes out of range")

#     # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: –µ–ª–µ–º–µ–Ω—Ç–∏ ‚Äî —á–∏—Å–ª–∞
#     elem1 = arr[first - 1]
#     elem2 = arr[second - 1]
#     if not (isinstance(elem1, (int, float)) and isinstance(elem2, (int, float))):
#         raise MyExceptions("Elements must be numeric")

#     # –û–±—á–∏—Å–ª–µ–Ω–Ω—è —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
#     return float(elem1 + elem2)

# ## ‚úÖ **–Ø–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é:**
# print(sum_slice_array([1, 2, 3], 1, 2))
# # ‚ûû 3.0

# try:
#     print(sum_slice_array([1, "string", 3], 1, 2))
# except MyExceptions:
#     print("MyExceptions")
# # ‚ûû MyExceptions

# try:
#     print(sum_slice_array([14, 5, 3], -1, 2))
# except MyExceptions:
#     print("MyExceptions")
# # ‚ûû MyExceptions

# ## üîç **–ß–æ–º—É —Ç–∞–∫ –∫—Ä–∞—â–µ:**

# | –û—Ä–∏–≥—ñ–Ω–∞–ª                    | –ü–æ–∫—Ä–∞—â–µ–Ω–æ                                     |
# | --------------------------- | --------------------------------------------- |
# | –í–∏–Ω—è—Ç–æ–∫ –≥–ª—É—à–∏—Ç—å—Å—è —É —Ñ—É–Ω–∫—Ü—ñ—ó | –í–∏–Ω—è—Ç–æ–∫ –ø—ñ–¥–Ω—ñ–º–∞—î—Ç—å—Å—è —ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è |
# | –ü–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è —Ä—è–¥–æ–∫          | –ü–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–Ω—è –∞–±–æ –≤–∏–Ω–∏–∫–∞—î –≤–∏–Ω—è—Ç–æ–∫     |
# | –°—É–ø–µ—Ä–µ—á–∏—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—É SRP     | –î–æ—Ç—Ä–∏–º–∞–Ω–æ –ø—Ä–∏–Ω—Ü–∏–ø—ñ–≤ —á–∏—Å—Ç–æ–≥–æ –∫–æ–¥—É              |

# * üõ†Ô∏è –£—Ç–æ—á–Ω–µ–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –¥–æ–∑–≤–æ–ª—è—î:

#   * **–≤—ñ–¥–æ–∫—Ä–µ–º–∏—Ç–∏ –ª–æ–≥—ñ–∫—É –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫**;
#   * –∑–∞–±–µ–∑–ø–µ—á–∏—Ç–∏ **–≥–Ω—É—á–∫—ñ—Å—Ç—å** —É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ;
#   * **–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `try-except` —Ç–∞–º, –¥–µ —Ç—Ä–µ–±–∞**, –∞ –Ω–µ –≤ —Å–µ—Ä–µ–¥–∏–Ω—ñ —Å–∞–º–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó.

# –õ–æ–≥—É–≤–∞–Ω–Ω—è ‚Äî —Ü–µ –≤–∞–∂–ª–∏–≤–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è **–≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è** —Ç–∞ **–º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É** —Ä–æ–±–æ—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º.
# –î–∞–≤–∞–π –ø–æ–∫–∞–∂—É, —è–∫ –¥–æ–¥–∞—Ç–∏ **–ª–æ–≥—É–≤–∞–Ω–Ω—è –≤ `sum_slice_array`**, —â–æ–± –≤–æ–Ω–æ:
# * —Ñ—ñ–∫—Å—É–≤–∞–ª–æ –≤—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏;
# * –∑–∞–ø–∏—Å—É–≤–∞–ª–æ –≤–∏–Ω—è—Ç–∫–∏;
# * –ø–æ–≤—ñ–¥–æ–º–ª—è–ª–æ, —â–æ —Ñ—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞—Ü—é–≤–∞–ª–∞ —É—Å–ø—ñ—à–Ω–æ.

# ## ‚úÖ **1. –ë–∞–∑–æ–≤–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å `logging`**
# import logging

# # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
# logging.basicConfig(
#     level=logging.INFO,
#     format='%(asctime)s - %(levelname)s - %(message)s',
#     filename='sum_slice_array.log',  # –ª–æ–≥-—Ñ–∞–π–ª
#     filemode='w'  # –ø–µ—Ä–µ–∑–∞–ø–∏—Å –ø—Ä–∏ –∫–æ–∂–Ω–æ–º—É –∑–∞–ø—É—Å–∫—É
# )

# # –í–ª–∞—Å–Ω–∏–π –≤–∏–Ω—è—Ç–æ–∫
# class MyExceptions(Exception):
#     pass

# def sum_slice_array(arr, first, second):
#     logging.info(f"Function called with arr={arr}, first={first}, second={second}")

#     if not (isinstance(first, int) and isinstance(second, int) and first >= 1 and second >= 1):
#         logging.error("Invalid indexes: must be integers ‚â• 1")
#         raise MyExceptions("Indexes must be integers ‚â• 1")

#     if first > len(arr) or second > len(arr):
#         logging.error("Indexes out of range")
#         raise MyExceptions("Indexes out of range")

#     elem1 = arr[first - 1]
#     elem2 = arr[second - 1]
#     if not (isinstance(elem1, (int, float)) and isinstance(elem2, (int, float))):
#         logging.error(f"Invalid elements: {elem1} or {elem2} are not numeric")
#         raise MyExceptions("Elements must be numeric")

#     result = float(elem1 + elem2)
#     logging.info(f"Sum calculated successfully: {result}")
#     return result

# ## üîç **–Ø–∫ –ø—Ä–∞—Ü—é—î:**
# * üì¶ `logging.basicConfig(...)` ‚Äî –Ω–∞–ª–∞—à—Ç–æ–≤—É—î –∂—É—Ä–Ω–∞–ª—é–≤–∞–Ω–Ω—è:
#   * —Ä—ñ–≤–µ–Ω—å ‚Äî `INFO` (–º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞ `DEBUG`, `ERROR`, —Ç–æ—â–æ),
#   * –∑–∞–ø–∏—Å —É —Ñ–∞–π–ª `sum_slice_array.log`.

# * üìÑ –ö–æ–∂–µ–Ω –≤–∏–∫–ª–∏–∫ —ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–≥—É—é—Ç—å—Å—è:
#   * `logging.info(...)` ‚Äî –∑–≤–∏—á–∞–π–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è,
#   * `logging.error(...)` ‚Äî —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–æ–∫.

# ## üöÄ **–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:**
# try:
#     print(sum_slice_array([1, 2, 3], 1, 2))
# except MyExceptions:
#     print("MyExceptions")

# try:
#     print(sum_slice_array([1, "oops", 3], 1, 2))
# except MyExceptions:
#     print("MyExceptions")

# try:
#     print(sum_slice_array([1, 2], 5, 1))
# except MyExceptions:
#     print("MyExceptions")

# ## üìÅ **–í–º—ñ—Å—Ç —Ñ–∞–π–ª—É `sum_slice_array.log` –ø—ñ—Å–ª—è –∑–∞–ø—É—Å–∫—É:**

# 2025-05-14 14:30:15,001 - INFO - Function called with arr=[1, 2, 3], first=1, second=2
# 2025-05-14 14:30:15,002 - INFO - Sum calculated successfully: 3.0
# 2025-05-14 14:30:15,003 - INFO - Function called with arr=[1, 'oops', 3], first=1, second=2
# 2025-05-14 14:30:15,004 - ERROR - Invalid elements: 1 or oops are not numeric
# 2025-05-14 14:30:15,005 - INFO - Function called with arr=[1, 2], first=5, second=1
# 2025-05-14 14:30:15,006 - ERROR - Indexes out of range

# ## ‚úÖ –ü–µ—Ä–µ–≤–∞–≥–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è:

# * –ú–æ–∂–Ω–∞ **–≤—ñ–¥—Å—Ç–µ–∂–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –≤–∏–∫–ª–∏–∫—ñ–≤**, –ø–∞—Ä–∞–º–µ—Ç—Ä–∏, –ø–æ–º–∏–ª–∫–∏;
# * –ó—Ä—É—á–Ω–æ –¥–ª—è **–Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è** –∞–±–æ **–º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –≤ –ø—Ä–æ–¥–∞–∫—à–Ω—ñ**;
# * –õ–µ–≥–∫–æ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤ **–∫–æ–Ω—Å–æ–ª—å + —Ñ–∞–π–ª**.

# –•–æ—á–µ—à, —è –ø–æ–∫–∞–∂—É —â–µ —è–∫ **–ª–æ–≥—É–≤–∞—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —ñ —Ñ–∞–π–ª –æ–¥–Ω–æ—á–∞—Å–Ω–æ**, –∞–±–æ **–Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Ä—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç/–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è**? üòä

