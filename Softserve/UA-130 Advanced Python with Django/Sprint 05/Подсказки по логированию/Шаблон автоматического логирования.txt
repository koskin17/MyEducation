–û–∫–µ–π! üòä –¢—Ä–∏–º–∞–π **–ø–æ–≤–Ω—ñ—Å—Ç—é –≥–æ—Ç–æ–≤–∏–π —à–∞–±–ª–æ–Ω Python-—Ñ–∞–π–ª—É**, —è–∫–∏–π –ø–æ—î–¥–Ω—É—î:

---

## ‚úÖ –©–æ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ:

1. üß± **–ë–∞–∑–æ–≤–∏–π –∫–ª–∞—Å –∑ –ª–æ–≥–≥–µ—Ä–æ–º**, —è–∫–∏–π:

   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î –ª–æ–≥-—Ñ–∞–π–ª –∑ —ñ–º‚Äô—è–º –∫–ª–∞—Å—É
   * –ó–∞–ø–∏—Å—É—î –≤ –Ω—å–æ–≥–æ –≤—Å—ñ –ø–æ–¥—ñ—ó

2. üé© **–î–µ–∫–æ—Ä–∞—Ç–æ—Ä**, —è–∫–∏–π:

   * –õ–æ–≥—É—î **—É—Å—ñ –≤–∏–∫–ª–∏–∫–∏ –º–µ—Ç–æ–¥—ñ–≤ –∫–ª–∞—Å—É**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Å—Ç–∞–≤–ª—è—î—Ç—å—Å—è –≤ –∫–ª–∞—Å

---

## üßæ –ö–æ–¥ —à–∞–±–ª–æ–Ω—É

```python
import logging
import functools


def log_method_calls(cls):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –∫–ª–∞—Å—É: –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ª–æ–≥—É–≤–∞—Ç–∏ –≤—Å—ñ –ø—É–±–ª—ñ—á–Ω—ñ –º–µ—Ç–æ–¥–∏.
    """
    for attr_name, attr_value in cls.__dict__.items():
        if callable(attr_value) and not attr_name.startswith("__"):
            @functools.wraps(attr_value)
            def wrapper(self, *args, __method=attr_value, __name=attr_name, **kwargs):
                self.logger.info(f"–ú–µ—Ç–æ–¥ '{__name}' –≤–∏–∫–ª–∏–∫–∞–Ω–∏–π –∑ args={args}, kwargs={kwargs}")
                return __method(self, *args, **kwargs)
            setattr(cls, attr_name, wrapper)
    return cls


@log_method_calls
class BaseLoggerClass:
    """
    –ë–∞–∑–æ–≤–∏–π –∫–ª–∞—Å, —è–∫–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î –ª–æ–≥–≥–µ—Ä –¥–ª—è —Å–≤–æ–≥–æ –∫–ª–∞—Å—É.
    """
    def __init__(self):
        class_name = self.__class__.__name__
        self.logger = logging.getLogger(class_name)
        self.logger.setLevel(logging.INFO)

        handler = logging.FileHandler(f"{class_name}.log")
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        handler.setFormatter(formatter)

        if not self.logger.handlers:
            self.logger.addHandler(handler)

        self.logger.info(f"–û–±'—î–∫—Ç –∫–ª–∞—Å—É '{class_name}' —Å—Ç–≤–æ—Ä–µ–Ω–æ.")


# üîß –ö–ª–∞—Å –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è

class OrderManager(BaseLoggerClass):
    def __init__(self):
        super().__init__()

    def create_order(self, product, quantity):
        print(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ: {product} x{quantity}")

    def cancel_order(self, order_id):
        print(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ: {order_id}")
```

---

## üß™ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:

```python
if __name__ == "__main__":
    om = OrderManager()
    om.create_order("–ö–∞–≤–∞", 3)
    om.cancel_order("#123")
```

---

## üìÇ –í –ª–æ–≥-—Ñ–∞–π–ª—ñ `OrderManager.log` —Ç–∏ –ø–æ–±–∞—á–∏—à:

```
2025-05-15 14:45:00 - OrderManager - INFO - –û–±'—î–∫—Ç –∫–ª–∞—Å—É 'OrderManager' —Å—Ç–≤–æ—Ä–µ–Ω–æ.
2025-05-15 14:45:01 - OrderManager - INFO - –ú–µ—Ç–æ–¥ 'create_order' –≤–∏–∫–ª–∏–∫–∞–Ω–∏–π –∑ args=('–ö–∞–≤–∞', 3), kwargs={}
2025-05-15 14:45:02 - OrderManager - INFO - –ú–µ—Ç–æ–¥ 'cancel_order' –≤–∏–∫–ª–∏–∫–∞–Ω–∏–π –∑ args=('#123',), kwargs={}
```

---

## üß† –Ø–∫ —Ü–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å?

* –•–æ—á–µ—à –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤ –±—É–¥—å-—è–∫–æ–º—É –∫–ª–∞—Å—ñ? üëâ –£—Å–ø–∞–¥–∫–æ–≤—É–π `BaseLoggerClass`
* –•–æ—á–µ—à, —â–æ–± —É—Å—ñ –º–µ—Ç–æ–¥–∏ –ª–æ–≥—É–≤–∞–ª–∏—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ? üëâ `@log_method_calls` –∑—Ä–æ–±–∏—Ç—å —Ü–µ

---

## üí° –•–æ—á–µ—à –±—ñ–ª—å—à–µ?

* –í–µ—Å—Ç–∏ –æ–¥–∏–Ω –ª–æ–≥-—Ñ–∞–π–ª –¥–ª—è **–≤—Å—ñ—î—ó –ø—Ä–æ–≥—Ä–∞–º–∏**?
* –ê–±–æ –ª–æ–≥—É–≤–∞—Ç–∏ –ª–∏—à–µ **–ø–æ–º–∏–ª–∫–∏**?
* –ê–±–æ **–≤–∏–≤–æ–¥–∏—Ç–∏ –ª–æ–≥ –æ–¥–Ω–æ—á–∞—Å–Ω–æ –≤ –∫–æ–Ω—Å–æ–ª—å**?

–ü–∏—à–∏, —ñ —è –ø–æ–∫–∞–∂—É, —è–∫ –∑—Ä–æ–±–∏—Ç–∏ üí™
