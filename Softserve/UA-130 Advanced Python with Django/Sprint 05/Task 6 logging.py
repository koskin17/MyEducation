# You get a list of numbers and you have to write a program that calculates the arithmetic mean of these numbers and logs the result in the file 'app.log' with the notification level - "info".

# If the input list is empty, the program should return the line "The list is empty" - the notification should be of the "debug" level.

# If a ZeroDivisionError error occurs in the process of calculating the arithmetic mean, the program should return the line "Division by zero" - the notification should be of the "warning" level.

# If the function receives an argument that has the correct type but an inappropriate value, then handle a ValueError exception - the notification should be of the "error" level.

# If one of the numbers in the list is not a number, the program should return the line "Incorrect data entered" - the notification should be of the "critical" level.


# Change the basic configuration with filename 'app.log', file read method 'w' and output name, level name and message.
# Don't use: encoding='utf-8'.
# Don't use'print()'.
# Don't use'return'.
# Please use logging.

# –ó–∞–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–¥–∞
# import logging

# logging.... # type your code here

# def average(numbers):
#     # type your code here

# average([1, 2, 3, 4, 5])
# average([10, -20, -30])
# average([])
# average([1, 2, 3, 0, 5])
# average([1, 2, "three", 4, 5])

import logging

# Setting up logging
logging.basicConfig(
    filename="app.log",  # Log file name
    filemode="w",  # File writing method (overwrite)
    format="%(name)s - %(levelname)s - %(message)s",  # Output format
    level=logging.DEBUG  # Logging level (lowest level - DEBUG)
)

def average(numbers):
    try:
        # Check if the list is empty
        if not numbers:
            logging.debug("The list is empty")
            logging.warning("Division by zero")
       # Check if all elements of a list are numbers
        elif not all(isinstance(number, (int, float)) for number in numbers):
            logging.critical("Incorrect data entered")
        else:
            # Calculating the arithmetic mean
            result = sum(numbers) / len(numbers)
            logging.info(f"Arithmetic mean: {result}")

    except ZeroDivisionError:
        logging.warning("Division by zero")
    except ValueError:
        logging.error("Incorrect value")

# –ü—Ä–∏–º–µ—Ä—ã –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
average([1, 2, 3, 4, 5])        # "INFO: Arithmetic mean: 3.0"
average([10, -20, -30])         # "INFO: Arithmetic mean: -13.333333333333334"
average([])                     # "DEBUG: The list is empty"
average([1, 2, 3, 0, 5])        # "INFO: Arithmetic mean: 2.2"
average([1, 2, "three", 4, 5])  # "CRITICAL: Incorrect data entered"

### **–†–∞–∑–±–æ—Ä –∫–æ–¥–∞**
# ‚úî **–ù–∞—Å—Ç—Ä–æ–∏–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ**:
# - `filename="app.log"` ‚Üí –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª `app.log`.
# - `filemode="w"` ‚Üí –∫–∞–∂–¥—ã–π –∑–∞–ø—É—Å–∫ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–π–ª.
# - `level=logging.DEBUG` ‚Üí –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –≤—Å–µ —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–æ–≤ (`DEBUG`, `INFO`, `WARNING`, `ERROR`, `CRITICAL`).

# ‚úî **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –≤ `try-except`**:
# 1. **–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫** ‚Üí `logging.debug("The list is empty")`.
# 2. **–ï—Å—Ç—å –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ** ‚Üí `logging.critical("Incorrect data entered")`.
# 3. **–í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ** –∏ –ª–æ–≥–∏—Ä—É–µ–º `INFO`-—É—Ä–æ–≤–µ–Ω—å.
# 4. **–õ–æ–≤–∏–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è** `ZeroDivisionError` –∏ `ValueError`.

# üîπ **–†–µ—à–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å–ª–æ–≤–∏—è–º –∑–∞–¥–∞—á–∏**.  
# –ü–æ–ø—Ä–æ–±—É–π –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏ —Å–∫–∞–∂–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å! üöÄ