# üéØ Objective:
# Implement a simplified Bank Account Management System in Python with the following key requirements:

# Use custom exceptions for input validation.

# Employ Python's logging module to log actions at both the application and per-account levels.

# ‚úÖ Requirements:
# Create a custom exception class AccountError:
# Used to handle invalid account operations such as incorrect name type, negative balances, or invalid deposit/withdrawal amounts.
# Should automatically log the error message to a shared application log file.
# Define an Account class with the following features:
# Attributes:

# pk: unique ID for each account (auto-incremented).
# name: account holder‚Äôs name (string only).
# balance: starting from a non-negative number (int or float).

# Methods:
# deposit(amount): adds funds to the account (must be positive number).
# withdraw(amount): removes funds from the account (must be positive and ‚â§ balance).
# get_balance(): returns the current balance.
# __str__(): returns a string representation of the account.

# Logging:
# Global logging setup (app.log) with a basic configuration.
# Each account has a separate log file named account_<pk>.log.
# Log key actions: account creation, deposits, withdrawals, balance checks, and exceptions.

# Helper Function:
# Implement create_account(name, initial_balance) to handle account creation and exception logging gracefully.

# üìÇ Deliverables:
# A single Python script containing:
# Class definitions
# Logging setup
# Log files should be generated automatically when operations are performed.

#### **–¶–µ–ª—å:**
# –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å **—É–ø—Ä–æ—â—ë–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–∏–º–∏ —Å—á–µ—Ç–∞–º–∏** –Ω–∞ Python —Å —É—á—ë—Ç–æ–º —Å–ª–µ–¥—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:

### **–û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:**  
# ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å **–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è** –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.  
# ‚úÖ –ü—Ä–∏–º–µ–Ω—è—Ç—å **–º–æ–¥—É–ª—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è** (`logging`) –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π –∫–∞–∫ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —Ç–∞–∫ –∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.  

### **–ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å?**  
### **1. –°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è `AccountError`**  
# - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ **–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π**, —Ç–∞–∫–∏—Ö –∫–∞–∫:
#   - –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∏–º–µ–Ω–∏ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å `string`).
#   - –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å.
#   - –ù–µ–≤–µ—Ä–Ω—ã–µ —Å—É–º–º—ã **–¥–µ–ø–æ–∑–∏—Ç–∞** –∏–ª–∏ **—Å–Ω—è—Ç–∏—è**.  
# - –û—à–∏–±–∫–∏ –¥–æ–ª–∂–Ω—ã **–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å—Å—è** –≤ –æ–±—â–µ–º —Ñ–∞–π–ª–µ `app.log`.

### **2. –°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å `Account`**  
# **–ê—Ç—Ä–∏–±—É—Ç—ã:**  
# - `pk` ‚Üí **—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä** —Å—á–µ—Ç–∞ (**–∞–≤—Ç–æ-–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç**).  
# - `name` ‚Üí –∏–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å—á–µ—Ç–∞ (**—Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∞**).  
# - `balance` ‚Üí –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å (**–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º, `int` –∏–ª–∏ `float`**).  

# **–ú–µ—Ç–æ–¥—ã:**  
# - `deposit(amount)` ‚Üí **–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ** —Å—á—ë—Ç–∞ (**—Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ**).  
# - `withdraw(amount)` ‚Üí **—Å–Ω—è—Ç–∏–µ** –¥–µ–Ω–µ–≥ (**—Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–µ–µ –±–∞–ª–∞–Ω—Å**).  
# - `get_balance()` ‚Üí **–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å**.  
# - `__str__()` ‚Üí **–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞**.  

### **3. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (`logging`)**
# - **–û–±—â–∏–π –ª–æ–≥-—Ñ–∞–π–ª `app.log`** ‚Üí —Ö—Ä–∞–Ω–∏—Ç —Å–æ–±—ã—Ç–∏—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.  
# - **–õ–æ–≥-—Ñ–∞–π–ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞** ‚Üí `account_<pk>.log`.  
# - –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å **–æ—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è**:
#   - –°–æ–∑–¥–∞–Ω–∏–µ —Å—á—ë—Ç–∞.
#   - –î–µ–ø–æ–∑–∏—Ç.
#   - –°–Ω—è—Ç–∏–µ —Å—Ä–µ–¥—Å—Ç–≤.
#   - –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞.
#   - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫.

### **4. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è `create_account(name, initial_balance)`**  
# - **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è** –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.  
# - –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç **—Å –∏–º–µ–Ω–µ–º –∏ –Ω–∞—á–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º**.  

### **–û—Å–æ–±—ã–π –Ω—é–∞–Ω—Å**
# üí° **–ê–≤—Ç–æ-–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç `pk` –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞** ‚Äî —ç—Ç–æ –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É—á–µ—Å—Ç—å. –ó–Ω–∞—á–µ–Ω–∏–µ `pk` –¥–æ–ª–∂–Ω–æ **—É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è** –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å—á—ë—Ç–∞.

# import logging

# # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—â–µ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# logging.basicConfig(
#     filename="app.log",
#     filemode="w",
#     format="%(levelname)s: %(message)s",
#     level=logging.DEBUG
# )

# class AccountError(Exception):
#     """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."""
#     def __init__(self, message):
#         super().__init__(message)
#         logging.error(message)  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –æ–±—â–µ–º –ª–æ–≥-—Ñ–∞–π–ª–µ


# class Account:
#     """–ö–ª–∞—Å—Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞."""
#     account_counter = 1  # –ê–≤—Ç–æ-–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç pk

#     def __init__(self, name, balance):
#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ name
#         if not isinstance(name, str):
#             raise AccountError("Invalid name type. Name must be a string.")

#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
#         if not isinstance(balance, (int, float)) or balance < 0:
#             raise AccountError("Invalid balance. Balance must be a non-negative number.")

#         # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ (auto-increment)
#         self.pk = Account.account_counter
#         Account.account_counter += 1
#         self.name = name
#         self.balance = balance

#         # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
#         self.logger = logging.getLogger(f"Account_{self.pk}")
#         handler = logging.FileHandler(f"account_{self.pk}.log", mode="w")
#         formatter = logging.Formatter("%(levelname)s: %(message)s")
#         handler.setFormatter(formatter)
#         self.logger.addHandler(handler)

#         self.logger.info(f"Account {self.pk} created for {self.name} with balance {self.balance}")

#     def deposit(self, amount):
#         """–ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞."""
#         if not isinstance(amount, (int, float)) or amount <= 0:
#             raise AccountError("Invalid deposit amount. Must be a positive number.")

#         self.balance += amount
#         self.logger.info(f"Deposited {amount}. New balance: {self.balance}")

#     def withdraw(self, amount):
#         """–ú–µ—Ç–æ–¥ –¥–ª—è —Å–Ω—è—Ç–∏—è —Å—Ä–µ–¥—Å—Ç–≤."""
#         if not isinstance(amount, (int, float)) or amount <= 0:
#             raise AccountError("Invalid withdrawal amount. Must be a positive number.")

#         if amount > self.balance:
#             raise AccountError("Insufficient funds for withdrawal.")

#         self.balance -= amount
#         self.logger.info(f"Withdrawn {amount}. New balance: {self.balance}")

#     def get_balance(self):
#         """–ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞."""
#         self.logger.info(f"Balance check. Current balance: {self.balance}")
#         return self.balance

#     def __str__(self):
#         return f"Account {self.pk}: {self.name}, Balance: {self.balance}"


# def create_account(name, initial_balance):
#     """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
#     try:
#         account = Account(name, initial_balance)
#         return account
#     except AccountError as e:
#         logging.error(f"Failed to create account: {e}")
#         return None


# # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
# acc1 = create_account("Alice", 1000)
# acc2 = create_account(1234, 500)  # –û—à–∏–±–∫–∞: –∏–º—è –Ω–µ —Å—Ç—Ä–æ–∫–∞
# acc3 = create_account("Bob", -200)  # –û—à–∏–±–∫–∞: –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å

# if acc1:
#     acc1.deposit(500)  # –î–µ–ø–æ–∑–∏—Ç 500
#     acc1.withdraw(200)  # –°–Ω—è—Ç–∏–µ 200
#     acc1.get_balance()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞

### **–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–¥–∞**
# ‚úî **–ö–ª–∞—Å—Å `AccountError`** ‚Äî –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏—Ä—É–µ—Ç –∏—Ö –≤ `app.log`.  
# ‚úî **–ö–ª–∞—Å—Å `Account`** ‚Äî –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á—ë—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç:
#    - –ê–≤—Ç–æ-–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç `pk` (`account_counter`).
#    - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Å—á–µ—Ç–∞ (`account_<pk>.log`).
# ‚úî **–ú–µ—Ç–æ–¥—ã (`deposit`, `withdraw`, `get_balance`)**:
#    - –ü—Ä–æ–≤–µ—Ä—è—é—Ç **–ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö**.
#    - –õ–æ–≥–∏—Ä—É—é—Ç **–∫–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ**.
# ‚úî **–§—É–Ω–∫—Ü–∏—è `create_account(name, initial_balance)`**:
#    - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç **–æ—à–∏–±–∫–∏** –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞.
#    - –õ–æ–≥–∏—Ä—É–µ—Ç **—É—Å–ø–µ—à–Ω—ã–µ –∏ –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏**.

# üîπ **–í—ã–≤–æ–¥**  
# –≠—Ç–æ—Ç –∫–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Å–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∑–∞–¥–∞—á–∏:
# ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è `AccountError`.  
# ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ **–Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –∞–∫–∫–∞—É–Ω—Ç–∞** (`app.log`, `account_<pk>.log`).  
# ‚úÖ –ê–≤—Ç–æ-–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç `pk`.  
# ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫.

# –¢–≤–æ—î —Ä—ñ—à–µ–Ω–Ω—è –¥—É–∂–µ –¥–æ–±—Ä–µ ‚Äî —á—ñ—Ç–∫–µ, —á–∏—Å—Ç–µ —ñ –≥—Ä–∞–º–æ—Ç–Ω–æ –ø–æ–±—É–¥–æ–≤–∞–Ω–µ. –ê–ª–µ —è–∫ –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π Python-—Ä–æ–∑—Ä–æ–±–Ω–∏–∫ —è –º–æ–∂—É –¥–∞—Ç–∏ —è–∫ –ø–æ–∑–∏—Ç–∏–≤–Ω—É –æ—Ü—ñ–Ω–∫—É, —Ç–∞–∫ —ñ –¥–µ—è–∫—ñ **—Ç–æ—á–∫–æ–≤—ñ –ø–æ—Ä–∞–¥–∏ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è**.

# ---

# ## ‚úÖ –©–æ –∑—Ä–æ–±–ª–µ–Ω–æ **–≤—ñ–¥–º—ñ–Ω–Ω–æ**:

# | –ö–æ–º–ø–æ–Ω–µ–Ω—Ç                                       | –û—Ü—ñ–Ω–∫–∞                                                    |
# | ----------------------------------------------- | --------------------------------------------------------- |
# | **–ö–∞—Å—Ç–æ–º–Ω–µ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è `AccountError`**          | ‚úî –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–∏–º–æ–≥–∞–º, –ª–æ–≥—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ `logging.error()` ‚úÖ |
# | **–ö–ª–∞—Å `Account` –∑ –∞–≤—Ç–æ—ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç–æ–º pk**         | ‚úî –ß—ñ—Ç–∫–∞ —ñ–Ω–∫–∞–ø—Å—É–ª—è—Ü—ñ—è, —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π `pk`, –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É   |
# | **–õ–æ–≥—É–≤–∞–Ω–Ω—è –≤ –æ–∫—Ä–µ–º—ñ —Ñ–∞–π–ª–∏ `account_<pk>.log`** | ‚úî –Ü–¥–µ–∞–ª—å–Ω–æ! –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ç–µ—Ö–∑–∞–≤–¥–∞–Ω–Ω—é                        |
# | **–ú–µ—Ç–æ–¥–∏ `deposit`, `withdraw`, `get_balance`** | ‚úî –í–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å + –ª–æ–≥—É–≤–∞–Ω–Ω—è ‚úÖ                                |
# | **–§—É–Ω–∫—Ü—ñ—è `create_account(...)`**               | ‚úî –í–∏–Ω–µ—Å–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è + –∑–∞—Ö–∏—Å—Ç —á–µ—Ä–µ–∑ try-except ‚úÖ   |
# | **–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —á–∏—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å**      | ‚úî –î—É–∂–µ —á–∏—Å—Ç–æ, —á–∏—Ç–∞—î—Ç—å—Å—è –ª–µ–≥–∫–æ                             |

# ---

# ## üõ† –©–æ –º–æ–∂–Ω–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏

# ### 1. üßπ –õ–æ–≥–≥–µ—Ä –∫–æ–∂–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å—Ç–≤–æ—Ä—é—î **–Ω–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ (`handler`) –ø—Ä–∏ –∫–æ–∂–Ω–æ–º—É –≤–∏–∫–ª–∏–∫—É**

# –¶–µ –ø—Ä–∏–∑–≤–µ–¥–µ –¥–æ **–¥—É–±–ª—é–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤**, —è–∫—â–æ –æ–±'—î–∫—Ç —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –¥–µ–∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø—Ä–∏ –¥–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó).
# üîß **–†—ñ—à–µ–Ω–Ω—è** ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏, —á–∏ –≤–∂–µ –¥–æ–¥–∞–Ω–æ –æ–±—Ä–æ–±–Ω–∏–∫:

# ```python
# if not self.logger.handlers:
#     handler = logging.FileHandler(f"account_{self.pk}.log", mode="w")
#     ...
#     self.logger.addHandler(handler)
# ```

# ---

# ### 2. ‚ö† –õ–æ–≥–≥–µ—Ä `AccountError` ‚Äî —Ü–µ –Ω–µ –≤–ª–∞—Å–Ω–∏–π –ª–æ–≥–≥–µ—Ä, –∞ –≥–ª–æ–±–∞–ª—å–Ω–∏–π `root`

# > –¶–µ –Ω–µ –ø–æ–º–∏–ª–∫–∞, –∞–ª–µ –∫—Ä–∞—â–µ –∑—Ä–æ–±–∏—Ç–∏ **—Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π `app_logger`** –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è.

# ```python
# app_logger = logging.getLogger("app")
# app_logger.setLevel(logging.DEBUG)
# app_handler = logging.FileHandler("app.log", mode="w")
# app_handler.setFormatter(logging.Formatter("%(levelname)s: %(message)s"))
# app_logger.addHandler(app_handler)
# ```

# –Ü –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `app_logger.error(...)` –∑–∞–º—ñ—Å—Ç—å `logging.error(...)`.

# ---

# ### 3. üß™ –ú–µ—Ç–æ–¥ `get_balance()` –ª–æ–≥—ñ—á–Ω–æ –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ª–æ–≥—É–≤–∞—Ç–∏ –∫–æ–∂–µ–Ω –∑–∞–ø–∏—Ç

# –õ–æ–≥ –∫–æ–∂–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É –±–∞–ª–∞–Ω—Å—É —à–≤–∏–¥–∫–æ ¬´–∑–∞–±‚Äô—î¬ª –ª–æ–≥-—Ñ–∞–π–ª, –æ—Å–æ–±–ª–∏–≤–æ –ø—Ä–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º—É –¥–æ—Å—Ç—É–ø—ñ.
# üìå –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è: –∞–±–æ –ø—Ä–∏–±—Ä–∞—Ç–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–≤—ñ–¥—Ç–∏, –∞–±–æ —Ä–æ–±–∏—Ç–∏ –π–æ–≥–æ –Ω–∞ DEBUG-—Ä—ñ–≤–Ω—ñ:

# ```python
# self.logger.debug(f"Balance check. Current balance: {self.balance}")
# ```

# ---

# ### 4. üßº –ú–µ—Ç–æ–¥ `__str__()` ‚Äî –∫—Ä–∞—â–µ –ø—Ä–∏–≤–µ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å –¥–æ –¥–≤–æ—Ö –∑–Ω–∞–∫—ñ–≤:

# ```python
# return f"Account {self.pk}: {self.name}, Balance: {self.balance:.2f}"
# ```

# ---

# ### 5. üöÄ –î–æ–¥–∞—Ç–∏ `__repr__()` ‚Äî –¥–ª—è –∑—Ä—É—á–Ω–æ—ó —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ (–Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ)

# ```python
# def __repr__(self):
#     return f"Account(pk={self.pk}, name='{self.name}', balance={self.balance})"
# ```

# ---

# ## üíØ –ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞:

# * **–†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è**: ‚úÖ 9.5 / 10
# * **–°—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å**: ‚úÖ –ù–∞–¥—ñ–π–Ω–∞
# * **–õ–æ–≥—ñ–∫–∞**: ‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –¢–ó
# * **–ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è**: üîß –ü–æ—Ç—Ä—ñ–±–Ω–∞ –æ–±–µ—Ä–µ–∂–Ω—ñ—Å—Ç—å –∑ logger'–∞–º–∏


# –û—Å—å –ø–æ–≤–Ω–∞ –≤–µ—Ä—Å—ñ—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ —Ä—ñ—à–µ–Ω–Ω—è, —è–∫–µ:
# * ‚úÖ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ª–æ–≥–µ—Ä–∏ (`app_logger` —ñ –ª–æ–≥–µ—Ä –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞),
# * ‚úÖ –∑–∞—Ö–∏—â–∞—î –≤—ñ–¥ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤,
# * ‚úÖ –¥–æ–¥–∞—î —Ñ–æ—Ä–º–∞—Ç –±–∞–ª–∞–Ω—Å—É –∑ –¥–≤–æ–º–∞ –∑–Ω–∞–∫–∞–º–∏,
# * ‚úÖ –Ω–µ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂—É—î –ª–æ–≥ –ø—Ä–∏ –≤–∏–∫–ª–∏–∫—É `get_balance()` (DEBUG-—Ä—ñ–≤–µ–Ω—å),
# * ‚úÖ –º—ñ—Å—Ç–∏—Ç—å `__repr__()` –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ –≤—ñ–¥–ª–∞–¥–∫–∏.

## üîß –ü–æ–≤–Ω–∏–π –∫–æ–¥:
import logging

# üîπ –ì–ª–æ–±–∞–ª—å–Ω–∏–π –ª–æ–≥–≥–µ—Ä –¥–æ–¥–∞—Ç–∫—É
app_logger = logging.getLogger("app")
app_logger.setLevel(logging.DEBUG)

app_handler = logging.FileHandler("app.log", mode="w")
app_handler.setFormatter(logging.Formatter("%(levelname)s: %(message)s"))
app_logger.addHandler(app_handler)


class AccountError(Exception):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."""
    def __init__(self, message):
        super().__init__(message)
        app_logger.error(message)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –ª–æ–≥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è


class Account:
    """–ö–ª–∞—Å—Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞."""
    account_counter = 1  # –ê–≤—Ç–æ-–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç pk

    def __init__(self, name, balance):
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
        if not isinstance(name, str):
            raise AccountError("Invalid name type. Name must be a string.")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞
        if not isinstance(balance, (int, float)) or balance < 0:
            raise AccountError("Invalid balance. Balance must be a non-negative number.")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
        self.pk = Account.account_counter
        Account.account_counter += 1
        self.name = name
        self.balance = balance

        # üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
        self.logger = logging.getLogger(f"Account_{self.pk}")
        self.logger.setLevel(logging.DEBUG)

        if not self.logger.handlers:
            handler = logging.FileHandler(f"account_{self.pk}.log", mode="w")
            formatter = logging.Formatter("%(levelname)s: %(message)s")
            handler.setFormatter(formatter)
            self.logger.addHandler(handler)

        self.logger.info(f"Account {self.pk} created for {self.name} with balance {self.balance:.2f}")

    def deposit(self, amount):
        if not isinstance(amount, (int, float)) or amount <= 0:
            raise AccountError("Invalid deposit amount. Must be a positive number.")

        self.balance += amount
        self.logger.info(f"Deposited {amount:.2f}. New balance: {self.balance:.2f}")

    def withdraw(self, amount):
        if not isinstance(amount, (int, float)) or amount <= 0:
            raise AccountError("Invalid withdrawal amount. Must be a positive number.")

        if amount > self.balance:
            raise AccountError("Insufficient funds for withdrawal.")

        self.balance -= amount
        self.logger.info(f"Withdrawn {amount:.2f}. New balance: {self.balance:.2f}")

    def get_balance(self):
        self.logger.debug(f"Balance check. Current balance: {self.balance:.2f}")
        return self.balance

    def __str__(self):
        return f"Account {self.pk}: {self.name}, Balance: {self.balance:.2f}"

    def __repr__(self):
        return f"Account(pk={self.pk}, name='{self.name}', balance={self.balance:.2f})"


def create_account(name, initial_balance):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        account = Account(name, initial_balance)
        return account
    except AccountError as e:
        app_logger.error(f"Failed to create account: {e}")
        return None


# üî∏ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∫–∞–∫ –º–æ–¥—É–ª—è)
if __name__ == "__main__":
    acc1 = create_account("Alice", 1000)
    acc2 = create_account("Bob", -50)  # –û—à–∏–±–∫–∞
    if acc1:
        acc1.deposit(500)
        acc1.withdraw(200)
        print(acc1.get_balance())
        print(acc1)

# ## üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É:

# * –°—Ç–≤–æ—Ä—é—î—Ç—å—Å—è `app.log` –∑ —É—Å—ñ–º–∞ –∑–∞–≥–∞–ª—å–Ω–∏–º–∏ –ø–æ–º–∏–ª–∫–∞–º–∏.
# * –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞ ‚Äî –æ–∫—Ä–µ–º–∏–π `account_<pk>.log`.
# * –ü—Ä–æ–≥—Ä–∞–º–∞ —Å—Ç–∞–±—ñ–ª—å–Ω–∞, —á–∏—Ç–∞—î–º—ñ—Å—Ç—å –∫–æ–¥—É –≤–∏—Å–æ–∫–∞.

# ---

# –•–æ—á–µ—à ‚Äî –º–æ–∂—É —Ç–∞–∫–æ–∂:

# * –î–æ–¥–∞—Ç–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É,
# * –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç–∏ —É —Ñ–∞–π–ª,
# * –ó—Ä–æ–±–∏—Ç–∏ REST API –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∞–∫–∞—É–Ω—Ç–∞–º–∏.

# –ü–∏—à–∏, —è–∫—â–æ –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ üôÇ

