## **1. –ó–∞–¥–∞–Ω–∏–µ (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)**

# Create a decorator `logger`. The decorator should print to the console information about the function's name and all its arguments separated with ',' for the function decorated with `logger`.

# Create the function `concat` with any number of any arguments which concatenates arguments and applies the `logger` decorator to this function.

### **For example:**
# print(concat(2, 3))  # Expected output:
# Executing of function concat with arguments 2, 3...
# 23

# print(concat('hello', 2))  # Expected output:
# Executing of function concat with arguments hello, 2...
# hello2

# print(concat(first='one', second='two'))  # Expected output:
# Executing of function concat with arguments one, two...
# onetwo

## **2. –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫**

# –°–æ–∑–¥–∞–π—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä `logger`. –≠—Ç–æ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–º–µ–Ω–∏ –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤—Å–µ—Ö –µ—ë –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö –∑–∞–ø—è—Ç–æ–π.

# –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é `concat`, –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä–∞—è –∫–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ—Ç –∏—Ö –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä `logger`.

### **–ü—Ä–∏–º–µ—Ä—ã –≤—ã–∑–æ–≤–æ–≤:**
# print(concat(2, 3))  # –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥:
# Executing of function concat with arguments 2, 3...
# 23

# print(concat('hello', 2))  # –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥:
# Executing of function concat with arguments hello, 2...
# hello2

# print(concat(first='one', second='two'))  # –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥:
# Executing of function concat with arguments one, two...
# onetwo
## **3. –†–∞–±–æ—á–∏–π –∫–æ–¥**
# –≠—Ç–æ—Ç –∫–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –∏ —É—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –≤—ã–≤–æ–¥–∞ `print()`.

import functools

def logger(func):
    @functools.wraps(func)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)  # –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        arguments = []
        if args:
            arguments.extend(map(str, args))
        if kwargs:
            arguments.extend(map(str, kwargs.values()))
        print(f"Executing of function {func.__name__} with arguments " + ", ".join(arguments) + "...")
        return result  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    return wrapper


@logger
def concat(*args, **kwargs):
    result = ""
    for arg in args:
        result += str(arg)
    for value in kwargs.values():
        result += str(value)
    return result


@logger
def sum(a, b):
    return a + b


@logger
def print_arg(arg):
    print(arg)


# # ‚úÖ **–ü—Ä–æ–≤–µ—Ä–∏–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ**
# print_arg(2)

# # üî• **–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:**
# # 2
# # Executing of function print_arg with arguments 2...

# ## **4. –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞**

# ### **üîπ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä `logger`**
# 1. **–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ (`@functools.wraps(func)`)**  
#    - –ë–µ–∑ —ç—Ç–æ–≥–æ, `wrapper` –∑–∞–º–µ–Ω–∏–ª –±—ã –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, —Ç–µ—Ä—è—è –µ—ë –∏–º—è (`func.__name__`) –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é (`func.__doc__`).
#    - `functools.wraps(func)` –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏.

# 2. **–§—É–Ω–∫—Ü–∏—è `wrapper` –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º –ª–æ–≥–æ–≤**  
#    - `result = func(*args, **kwargs)` ‚Üí **–°–Ω–∞—á–∞–ª–∞ –≤—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é**.
#    - –ó–∞—Ç–µ–º —Å–æ–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ `Executing of function ...`.

# 3. **–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏**  
#    - `return result` –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (`concat`, `sum`, `print_arg`) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

# ---

# ### **üîπ –§—É–Ω–∫—Ü–∏—è `concat`**
# 1. **–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤** (`*args, **kwargs`).  
# 2. **–ö–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ—Ç –∏—Ö –≤ —Å—Ç—Ä–æ–∫—É**:
#    - `for arg in args:` ‚Üí –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç.
#    - `for value in kwargs.values():` ‚Üí –¥–µ–ª–∞–µ—Ç —Ç–æ –∂–µ —Å–∞–º–æ–µ –¥–ª—è –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.

# ---

# ### **üîπ –§—É–Ω–∫—Ü–∏—è `print_arg`**
# 1. –í—ã–≤–æ–¥–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç `arg` —Å –ø–æ–º–æ—â—å—é `print(arg)`.  
# 2. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç `logger`, –∫–æ—Ç–æ—Ä—ã–π **—Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç `print(arg)`, –∞ –∑–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ**.  
# 3. –ë–ª–∞–≥–æ–¥–∞—Ä—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–µ **—Å–Ω–∞—á–∞–ª–∞ –ø–µ—á–∞—Ç–∞–µ—Ç—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç, –ø–æ—Ç–æ–º –ª–æ–≥**, –∫–∞–∫ —Ç–æ–≥–æ —Ç—Ä–µ–±—É—é—Ç —Ç–µ—Å—Ç—ã.

# ---

# ### **üîπ –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è `print_arg(2)`**
# ```plaintext
# 2
# Executing of function print_arg with arguments 2...