# Goal Learn to create functions with internal state (through locking) and work with a limit on the size of stored data.
# Task Implement the function limited_cache(limit), which returns the function cache(key, value=None):
# If value is given ‚Äî caches key:value. If value is not given ‚Äî returns the value by key or None, if there is none. If the number of stored keys exceeds limit, the oldest key is removed (according to the FIFO principle).
# Example
# cache = limited_cache(2) cache('a', 1) cache('b', 2) print(cache('a'))  # -> 1 cache('c', 3) print(cache('b'))  # -> None (removed)

# **–¶–µ–ª—å:**  
# –û—Å–≤–æ–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º (—á–µ—Ä–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É) –∏ —Ä–∞–±–æ—Ç—É —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞ —Ö—Ä–∞–Ω–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö.  

# **–ó–∞–¥–∞—á–∞:**  
# –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é `limited_cache(limit)`, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é `cache(key, value=None)`.  

# - –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω `value`, —Ç–æ `cache` —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ø–∞–º—è—Ç–∏ `key: value`.  
# - –ï—Å–ª–∏ `value` –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ `key` –∏–ª–∏ `None`, –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –∫–ª—é—á–∞ –Ω–µ—Ç.  
# - –ï—Å–ª–∏ —á–∏—Å–ª–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π –ø—Ä–µ–≤—ã—à–∞–µ—Ç `limit`, —É–¥–∞–ª—è–µ—Ç—Å—è **—Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –∫–ª—é—á** (–ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É FIFO ‚Äî –ø–µ—Ä–≤—ã–π –ø—Ä–∏—à—ë–ª, –ø–µ—Ä–≤—ã–π —É—à—ë–ª).  

# ### **–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**  

# cache = limited_cache(2)
# cache('a', 1)
# cache('b', 2)
# print(cache('a'))  # -> 1
# cache('c', 3)
# print(cache('b'))  # -> None (—É–¥–∞–ª–µ–Ω–æ)
# ```
# –ó–∞–¥–∞—á–∞ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –ø–æ–≤—ã—à–µ–Ω–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å, –∑–Ω–∞—á–∏—Ç, –≤ –Ω–µ–π –µ—Å—Ç—å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Ä—è–¥–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.

# –•–∏—Ç—Ä–æ—Å—Ç—å –≤ –∑–∞–¥–∞—á–µ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–¥–∞–ª—è—Ç—å **—Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –∫–ª—é—á** –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞. –î–ª—è —ç—Ç–æ–≥–æ –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç `OrderedDict` –∏–∑ `collections`, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.

# –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–µ:

from collections import OrderedDict

def limited_cache(limit):
    cache_store = OrderedDict()

    def cache(key, value=None):
        if value is not None:
            # –ï—Å–ª–∏ –∫–ª—é—á —É–∂–µ –µ—Å—Ç—å, —É–¥–∞–ª—è–µ–º –µ–≥–æ, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫
            if key in cache_store:
                cache_store.pop(key)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü (—Å–∞–º—ã–π –Ω–æ–≤—ã–π)
            cache_store[key] = value
            
            # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç, —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç (FIFO)
            if len(cache_store) > limit:
                cache_store.popitem(last=False)  # –£–¥–∞–ª—è–µ—Ç –ø–µ—Ä–≤—ã–π (—Å—Ç–∞—Ä–µ–π—à–∏–π) —ç–ª–µ–º–µ–Ω—Ç
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ—Ç
            return cache_store.get(key, None)

    return cache
```

### üîé **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–¥?**
# 1. **–°–æ–∑–¥–∞—ë–º `OrderedDict`** (`cache_store`)  
#    - –û–Ω —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç **–ø–æ—Ä—è–¥–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è** –∫–ª—é—á–µ–π, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–∞–ª—è—Ç—å —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç, –µ—Å–ª–∏ –ª–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω.

# 2. **–§—É–Ω–∫—Ü–∏—è `cache(key, value=None)`:**
#    - –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω `value` ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ–º `key:value`, –Ω–æ **–ø–µ—Ä–µ–¥ —ç—Ç–∏–º —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á**, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª –≤ `cache_store`, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ –ø–æ–∑–∏—Ü–∏—é.
#    - –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç `limit`, —É–¥–∞–ª—è–µ–º **—Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π** —ç–ª–µ–º–µ–Ω—Ç (`popitem(last=False)`).
#    - –ï—Å–ª–∏ `value` –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω ‚Üí –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É (`get(key, None)`).

### ‚úÖ **–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è**
# cache = limited_cache(2)
# cache('a', 1)
# cache('b', 2)
# print(cache('a'))  # 1
# cache('c', 3)
# print(cache('b'))  # None (—É–¥–∞–ª–µ–Ω–æ –ø–æ FIFO)
# ```
# **–í—ã–≤–æ–¥:**  
# ```
# 1
# None
# ```

### üöÄ **–ü–æ—á–µ–º—É `OrderedDict` —É–¥–æ–±–µ–Ω?**
# - **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –≤—Å—Ç–∞–≤–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.**
# - **–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ —É–¥–∞–ª—è–µ—Ç —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç (`popitem(last=False)`).**
# - **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏ (O(1) –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è).**

# –≠—Ç–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–¥–∞—á–µ, –≤–∫–ª—é—á–∞—è FIFO-—É–¥–∞–ª–µ–Ω–∏–µ. –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–π! üòâ