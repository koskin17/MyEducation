# Class Student has attributes full_name:str, avg_rank: float, courses: list
# Class Group has attributes title: str, students: list.

# Make both classes JSON serializable. 

# Json-files represent information about student (students). 

# Create methods:  

# Student.from_json(json_file) that return Student instance from attributes from json-file;

# Student.serialize_to_json(filename)

# Group.serialize_to_json(list_of_groups, filename)

# Group.create_group_from_file(students_file)

# Parse given files, create instances of Student class and create instances of Group class (title for group is name of json-file without extension).

import json
import os
from json import JSONEncoder

class Student:
    """The Student clas swith information about a student."""
    def __init__(self, full_name: str, avg_rank: float, courses: list):
        self.full_name = full_name
        self.avg_rank = avg_rank
        self.courses = courses

    def serialize_to_json(self, filename: str):
        """Save the Student object to a JSON file."""
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(self, f, cls=StudentEncoder, indent=4, ensure_ascii=False)

    @classmethod
    def from_json(cls, json_file: str):
        """Create an instance of the Student class from a JSON file."""
        if not os.path.exists(json_file):
            raise FileNotFoundError(f"File {json_file} not found!")
        
        with open(json_file, "r", encoding="utf-8") as f:
            data = json.load(f)
        
        return cls(**data)

    def __repr__(self):
        return f"Student({self.full_name}, {self.avg_rank}, {self.courses})"


class Group:
    """Group class for a group of students."""
    def __init__(self, title: str, students: list):
        self.title = title
        self.students = students

    @classmethod
    def create_group_from_file(cls, students_file: str):
        """Create a Group instance from a JSON file with a list of students."""
        if not os.path.exists(students_file):
            raise FileNotFoundError(f"File {students_file} not found")

        with open(students_file, "r", encoding="utf-8") as f:
            data = json.load(f)
        
        students = [Student(**student_data) for student_data in data]  # Creating Student objects
        title = os.path.splitext(os.path.basename(students_file))[0]  # File name without extension is the group name

        return cls(title, students)

    @staticmethod
    def serialize_to_json(list_of_groups, filename: str):
        """Save the list of groups to a JSON file."""
        groups_data = [
            {"title": group.title, "students": [student.__dict__ for student in group.students]}
            for group in list_of_groups
        ]

        with open(filename, "w", encoding="utf-8") as f:
            json.dump(groups_data, f, indent=4, ensure_ascii=False)

    def __repr__(self):
        return f"Group({self.title}, {len(self.students)} students)"


# Define a custom JSONEncoder for the Student class
class StudentEncoder(JSONEncoder):
    """Serialize Student objects to JSON."""
    def default(self, obj):
        if isinstance(obj, Student):
            return obj.__dict__  # Return the object attributes as a dictionary
        return super().default(obj)

# === üîπ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ===
# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤—Ä—É—á–Ω—É—é
student1 = Student("Alice Johnson", 4.5, ["Math", "Physics"])
student2 = Student("Bob Smith", 3.8, ["Biology", "Chemistry"])

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ JSON-—Ñ–∞–π–ª
student1.serialize_to_json("student1.json")

# –ß—Ç–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ JSON-—Ñ–∞–π–ª–∞
loaded_student = Student.from_json("student1.json")
print(loaded_student)

# –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ JSON-—Ñ–∞–π–ª–∞
group = Group.create_group_from_file("students.json")
print(group)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
Group.serialize_to_json([group], "groups.json")

### **–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è**
# ‚úÖ **–ö–ª–∞—Å—Å `Student`**
# - **–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è** (`serialize_to_json`) ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—ä–µ–∫—Ç –≤ JSON-—Ñ–∞–π–ª.
# - **–î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è** (`from_json`) ‚Üí –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞ –∏ —Å–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç `Student`.
# - **`__dict__`** ‚Üí –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç –≤ —Å–ª–æ–≤–∞—Ä—å –ø—Ä–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏.

# ‚úÖ **–ö–ª–∞—Å—Å `Group`**
# - **–ú–µ—Ç–æ–¥ `create_group_from_file`** ‚Üí –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ JSON –∏ —Å–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç `Group`.
# - **–ú–µ—Ç–æ–¥ `serialize_to_json`** ‚Üí –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –≤ JSON.
# - **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ `os.path.splitext()`** ‚Üí –±–µ—Ä—ë—Ç **–∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è** –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã.

# üìå **–í—ã–≤–æ–¥:**  
# ‚úî –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è.  
# ‚úî –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–∑–¥–∞—é—Ç—Å—è `Student` –∏ `Group`.  
# ‚úî –û–±—ä–µ–∫—Ç—ã –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑ —Ñ–∞–π–ª–æ–≤.

# **–î–≤–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ (`**`) –ø–æ–∑–≤–æ–ª—è—é—Ç "—Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å" —Å–ª–æ–≤–∞—Ä—å** –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞–∫ **–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã** (`key=value`) –≤ —Ñ—É–Ω–∫—Ü–∏—é –∏–ª–∏ –º–µ—Ç–æ–¥.  

### üîπ **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?**  
# –î–æ–ø—É—Å—Ç–∏–º, —É –Ω–∞—Å –µ—Å—Ç—å —Å–ª–æ–≤–∞—Ä—å:
# data = {"name": "Alice", "age": 25}

# –ï—Å–ª–∏ –º—ã –≤—ã–∑–æ–≤–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ç–∞–∫:  
# def greet(name, age):
#     print(f"–ü—Ä–∏–≤–µ—Ç, {name}! –¢–µ–±–µ {age} –ª–µ—Ç.")

# greet(**data)
# üîπ Python **—Ä–∞–∑–≤–µ—Ä–Ω—ë—Ç —Å–ª–æ–≤–∞—Ä—å** –∏ –ø–µ—Ä–µ–¥–∞—Å—Ç –µ–≥–æ –∫–∞–∫ `greet(name="Alice", age=25)`.  
# üîπ **–í—ã–≤–æ–¥:** `–ü—Ä–∏–≤–µ—Ç, Alice! –¢–µ–±–µ 25 –ª–µ—Ç.`  

### üîπ **–ì–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `**`?**
# ‚úÖ **–ü–µ—Ä–µ–¥–∞—á–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ —Ñ—É–Ω–∫—Ü–∏—é**  
# ‚úÖ **–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–ª–∞—Å—Å–æ–≤ (`__init__(**data)`)**  
# ‚úÖ **–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–π** ‚Üí `{**dict1, **dict2}`  
# ‚úÖ **–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (`kwargs`)**  

# üí° **–í—ã–≤–æ–¥:**  
# üöÄ `**data` **—Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å** –∏ –¥–µ–ª–∞–µ—Ç –∫–æ–¥ **–≥–∏–±–∫–∏–º –∏ —É–¥–æ–±–Ω—ã–º**.  
