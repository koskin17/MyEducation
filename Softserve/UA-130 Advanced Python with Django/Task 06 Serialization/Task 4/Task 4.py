# Create context manager class SerializeManager with attributes filename and type for serializing python object to different formats.
# This class should contain method serialize for serialize object to filename according to  type. 
# For defining format create enum FileType with values JSON, BYTE.
# Create function serialize(object, filename, filetype).
# This function use SerializeManager and should serialize object to filename according to type.
# For example:
# if user_dict = { 'name': 'Roman', 'id': 8}
# then
# serialize(user_dict, "2", FileType.BYTE) -> creates file with name "2" and this file will contain user_dict as byte array
# serialize("String", "string.json", FileType.JSON) -> creates file with name "string.json" and text "String"

# –ó–∞–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–¥–∞:
# import json
# import pickle
# from enum import Enum

# // type your code here

# def serialize(object, filename, fileType):
#     with SerializeManager(filename, fileType) as manager:
#         manager.serialize(object)

### **–ö–æ–¥ —Ä–µ—à–µ–Ω–∏—è**
import json
import pickle
from enum import Enum

class FileType(Enum):
    """–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤."""
    JSON = "json"
    BYTE = "byte"

    # ### üî∏ `Enum` ‚Äî —Ü–µ **–ø–µ—Ä–µ–ª—ñ—á–µ–Ω–Ω—è (–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ)**
    # > –£—è–≤–∏, —â–æ —Ç–∏ —Å—Ç–≤–æ—Ä—é—î—à **–æ–±–º–µ–∂–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤**, –∑ —è–∫–∏–º–∏ –º–æ–∂–Ω–∞ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏.
    # –£ —Ü—å–æ–º—É –≤–∏–ø–∞–¥–∫—É:
    # * `FileType` ‚Äî —Ç–∏–ø —Ñ–∞–π–ª—É, —ñ –≤—ñ–Ω –º–æ–∂–µ –±—É—Ç–∏ –∞–±–æ `"json"`, –∞–±–æ `"byte"`.
    # ## üìå –©–æ —Ç–∞–∫–µ `class FileType(Enum)`?
    # –¶–µ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –∫–ª–∞—Å, —è–∫–∏–π:
    # * –Ω–µ –¥–æ–∑–≤–æ–ª—è—î —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –Ω–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è,
    # * –¥–∞—î –ª–∏—à–µ **—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤** (enum = "enumeration" = –ø–µ—Ä–µ–ª—ñ–∫).
    # ---
    # ## üü© –ü–æ—è—Å–Ω–µ–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ —Ä—è–¥–∫–∞
    # | –†—è–¥–æ–∫                   | –©–æ –æ–∑–Ω–∞—á–∞—î                                                            |
    # | ----------------------- | --------------------------------------------------------------------- |
    # | `class FileType(Enum):` | –ú–∏ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ –ø–µ—Ä–µ–ª—ñ—á–µ–Ω–Ω—è –∑ —ñ–º–µ–Ω–µ–º `FileType`                     |
    # | `JSON = "json"`         | –û–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ —Ü—å–æ–≥–æ –ø–µ—Ä–µ–ª—ñ–∫—É ‚Äì `JSON`, —è–∫–∏–π –º–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è `"json"` |
    # | `BYTE = "byte"`         | –Ü–Ω—à–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç ‚Äì `BYTE`, –∑–Ω–∞—á–µ–Ω–Ω—è `"byte"`                             |
    # ---
    # ## üîß –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?
    # ```python
    # print(FileType.JSON)           # FileType.JSON
    # print(FileType.JSON.value)     # "json"
    # print(FileType.BYTE.name)      # "BYTE"
    # ```
    # * `.value` ‚Üí —Ñ–∞–∫—Ç–∏—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è (—Ç–µ, —â–æ –º–∏ –ø—Ä–∏—Å–≤–æ—ó–ª–∏ ‚Äî "json" —á–∏ "byte")
    # * `.name` ‚Üí —ñ–º‚Äô—è –µ–ª–µ–º–µ–Ω—Ç–∞ –ø–µ—Ä–µ–ª—ñ–∫—É ("JSON" —á–∏ "BYTE")
    # ---
    # ## ‚úÖ –ù–∞–≤—ñ—â–æ —Ç–∞–∫ —Ä–æ–±–∏—Ç–∏?
    # | –ë–µ–∑ `Enum`               | –ó `Enum`                            |
    # | ------------------------ | ----------------------------------- |
    # | `file_type = "json"`     | `file_type = FileType.JSON`         |
    # | –õ–µ–≥–∫–æ –ø–æ–º–∏–ª–∏—Ç–∏—Å—è –≤ –Ω–∞–∑–≤—ñ | –ë–µ–∑–ø–µ—á–Ω–µ –∞–≤—Ç–æ–¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è + –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ |
    # | –ù–µ–º–∞—î –æ–±–º–µ–∂–µ–Ω—å           | –¢—ñ–ª—å–∫–∏ –¥–æ–∑–≤–æ–ª–µ–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è           |
    # | –ö–æ–¥ –º–µ–Ω—à –∑—Ä–æ–∑—É–º—ñ–ª–∏–π      | –ö–æ–¥ —Å–∞–º –∫–∞–∂–µ, —è–∫—ñ —î –≤–∞—Ä—ñ–∞–Ω—Ç–∏        |
    # ---
    # ## üßÅ –ü—Ä–æ—Å—Ç–∏–π –ø—Ä–∏–∫–ª–∞–¥ –∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∂–∏—Ç—Ç—è
    # ```python
    # class TrafficLight(Enum):
    #     RED = "Stop"
    #     YELLOW = "Wait"
    #     GREEN = "Go"
    # ```
    # ```python
    # light = TrafficLight.RED
    # print(light.value)  # "Stop"
    # ```
    # ---
    # ## ‚ú® –ü—ñ–¥—Å—É–º–æ–∫:
    # > `Enum` ‚Äî —Ü–µ **–∑—Ä—É—á–Ω–∏–π —ñ –±–µ–∑–ø–µ—á–Ω–∏–π —Å–ø–æ—Å—ñ–± –æ–±–º–µ–∂–∏—Ç–∏ –Ω–∞–±—ñ—Ä –¥–æ–ø—É—Å—Ç–∏–º–∏—Ö –∑–Ω–∞—á–µ–Ω—å**, –Ω–∞–¥–∞—Ç–∏ —ó–º —ñ–º–µ–Ω–∞ –π —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–æ–∫ —É –∫–æ–¥—ñ.
    # –£ —Ç–≤–æ—î–º—É –ø—Ä–∏–∫–ª–∞–¥—ñ:
    # * `FileType` ‚Äî –ø–µ—Ä–µ–ª—ñ–∫ –¥–æ–ø—É—Å—Ç–∏–º–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ —Ñ–∞–π–ª—ñ–≤
    # * `"json"` —ñ `"byte"` ‚Äî —î–¥–∏–Ω—ñ –¥–æ–ø—É—Å—Ç–∏–º—ñ —Ç–∏–ø–∏
    # * –¶–µ –¥–æ–ø–æ–º–∞–≥–∞—î —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–æ–∫ —Ç–∏–ø—É `file_type = "jsn"` —á–∏ `"btie"`

class SerializeManager:
    """Context manager for serializing objects."""
    def __init__(self, filename: str, filetype: FileType):
        self.filename = filename
        self.filetype = filetype

    # For a class to work with "with" methods, it must have "enter" and "exit" methods defined in it.
    def __enter__(self):
        """Entering the context."""
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        """Out of context."""
        pass  # –í –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ

    def serialize(self, obj):
        """Method for serializing an object to a file according to the specified format."""
        if self.filetype == FileType.JSON:
            self._serialize_json(obj)
        elif self.filetype == FileType.BYTE:
            self._serialize_byte(obj)
        else:
            raise ValueError(f"Unsupported file type: {self.filetype}")

    def _serialize_json(self, obj):
        """Serialize an object to a JSON file."""
        with open(self.filename, "w", encoding="utf-8") as f:
            json.dump(obj, f, ensure_ascii=False)

    def _serialize_byte(self, obj):
        """Serialize an object to a binary file."""
        with open(self.filename, "wb") as f:
            pickle.dump(obj, f)

def serialize(obj, filename, filetype):
    """A function that uses `SerializeManager` to serialize an object."""
    with SerializeManager(filename, filetype) as manager:
        manager.serialize(obj)

# === üîπ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ===
user_dict = { 'name': 'Roman', 'id': 8 }

# –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ –±–∞–π—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
serialize(user_dict, "2", FileType.BYTE)

# –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ JSON
serialize("String", "string.json", FileType.JSON)

### **üìå –ß—Ç–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ?**
# ‚úÖ **–ö–ª–∞—Å—Å `FileType`** (Enum) –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤: `JSON` –∏ `BYTE`.  
# ‚úÖ **–ö–ª–∞—Å—Å `SerializeManager`**:
#    - –ê—Ç—Ä–∏–±—É—Ç—ã `filename` –∏ `filetype` –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏ —Ç–∏–ø–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
#    - –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä (`__enter__`, `__exit__`) –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è `with ...`.
#    - –ú–µ—Ç–æ–¥ `serialize(obj)`, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±–∏—Ä–∞–µ—Ç –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
#    - –û—Ç–¥–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã `_serialize_json()` –∏ `_serialize_byte()` –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤.
# ‚úÖ **–§—É–Ω–∫—Ü–∏—è `serialize(obj, filename, filetype)`**:
#    - –°–æ–∑–¥–∞—ë—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä `SerializeManager` –∏ –≤—ã–∑—ã–≤–∞–µ—Ç `serialize(obj)`, —Å–æ–∫—Ä–∞—â–∞—è –∫–æ–¥.

### **üöÄ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?**
# üìå –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –æ–±—ä–µ–∫—Ç `user_dict = { 'name': 'Roman', 'id': 8 }`, –≤—ã–∑–æ–≤:
# ```python
# serialize(user_dict, "2", FileType.BYTE)
# ```
# ‚úî –°–æ–∑–¥–∞—Å—Ç —Ñ–∞–π–ª `"2"`, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –æ–±—ä–µ–∫—Ç –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å `pickle.load(f)`).

# üìå –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è `"String"`, –≤—ã–∑–æ–≤:
# ```python
# serialize("String", "string.json", FileType.JSON)
# ```
# ‚úî –°–æ–∑–¥–∞—Å—Ç —Ñ–∞–π–ª `"string.json"`, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π `"String"` –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º JSON.

### **üí° –í—ã–≤–æ–¥**
# üöÄ –ö–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º **–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞** –∏ **–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–π Enum**.  
# –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ª–µ–≥–∫–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –æ–±—ä–µ–∫—Ç—ã –≤ **JSON** –∏–ª–∏ **–±–∞–π—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç**, –∏—Å–ø–æ–ª—å–∑—É—è –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é `serialize()`.  