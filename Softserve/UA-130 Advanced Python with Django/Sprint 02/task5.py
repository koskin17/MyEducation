# As input data you have list of strings with information about some location:

# "id,name,poppulation,is_capital",
# "3024,eu_kyiv,24834,y",
# "3025,eu_volynia,20231,n",
# "3026,eu_galych,23745,n",
# "4892,me_medina,18038,n",
# "4401,af_cairo,18946,y",
# "4700,me_tabriz,13421,n",
# "4899,me_bagdad,22723,y",
# "6600,af_zulu,09720,n"

# Using regular expression write method max_populationulation() for parsing strings and get info about location with highest population 

# For example:

# –¢–µ—Å—Ç	Result
# data = ["id,name,poppulation,is_capital",
# "3024,eu_kyiv,24834,y",
# "3025,eu_volynia,20231,n",
# "3026,eu_galych,23745,n",
# "4892,me_medina,18038,n",
# "4401,af_cairo,18946,y",
# "4700,me_tabriz,13421,n",
# "4899,me_bagdad,22723,y",
# "6600,af_zulu,09720,n"]

# print(max_populationulation(data))
# ('eu_kyiv', 24834)

# –í–æ—Ç —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º **—Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è** –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º:

import re

def max_population(data):
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è id, name, population, is_capital
    pattern = r"(\d+),([\w_]+),(\d+),([yn])"

    city = None
    max_population = 0

    # –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–ø—É—Å–∫–∞—è –∑–∞–≥–æ–ª–æ–≤–æ–∫ (data[0])
    for entry in data[1:]:
        match = re.match(pattern, entry)
        if match:
            _, city_name, population, _ = match.groups()
            population = int(population)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ —Å–∞–º—ã–º –±–æ–ª—å—à–∏–º
            if population > max_population:
                max_population = population
                city = city_name

    return (city, max_population) if city else None

# –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã:
data = [
    "id,name,poppulation,is_capital",
    "3024,eu_kyiv,24834,y",
    "3025,eu_volynia,20231,n",
    "3026,eu_galych,23745,n",
    "4892,me_medina,18038,n",
    "4401,af_cairo,18946,y",
    "4700,me_tabriz,13421,n",
    "4899,me_bagdad,22723,y",
    "6600,af_zulu,09720,n"
]

print(max_populationulation(data))  # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ('eu_kyiv', 24834)

# ### üîé **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–¥?**
# 1. **–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ `r"(\d+),([\w_]+),(\d+),([yn])"`**
#    - `(\d+)` ‚Üí –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (`id`).
#    - `([\w_]+)` ‚Üí –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (`name`), –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å `_` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `eu_kyiv`).
#    - `(\d+)` ‚Üí –Ω–∞—Å–µ–ª–µ–Ω–∏–µ (`population`), —á–∏—Å–ª–æ.
#    - `([yn])` ‚Üí –ø—Ä–∏–∑–Ω–∞–∫ —Å—Ç–æ–ª–∏—Ü—ã (`y` –∏–ª–∏ `n`).

# 2. **–ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞)** –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é `re.match()`.

# 3. **–û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ä–æ–¥ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º**, —Å—Ä–∞–≤–Ω–∏–≤–∞—è —Ç–µ–∫—É—â–∏–π `population` —Å `max_population`.

# 4. **–í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä—Ç–µ–∂ (`–≥–æ—Ä–æ–¥`, `–Ω–∞—Å–µ–ª–µ–Ω–∏–µ`)**, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –º–∞–∫—Å–∏–º—É–º.

# ---

# ### ‚úÖ **–ü–æ—á–µ–º—É —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω?**
# ‚úî **–ò—Å–ø–æ–ª—å–∑—É–µ—Ç `re.match()`**, —á—Ç–æ –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–æ–∫–∏.  
# ‚úî **–†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤**, —Å–æ–∫—Ä–∞—â–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏.  
# ‚úî **–ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ —Å–ø–∏—Å–∫—É –≤—Å–µ–≥–æ –æ–¥–∏–Ω —Ä–∞–∑** (`O(N)`, –≥–¥–µ `N` ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫).