# As input data, you have a string that consists of words that have duplicated characters at the end of it.

# All duplications may be in the next format:

# wordxxxx
# wordxyxyxy
# wordxyzxyzxyz
# , where x, xy or xyz repeated ending of the word

# Using re module write function pretty_message() that remove all duplications

# For example:

# –¢–µ—Å—Ç	Result
# data = "Thisssssssss isisisis echooooooo stringggg. Replaceaceaceace repeatedededed groupssss of symbolssss"
# print(pretty_message(data))
# This is echo string. Replace repeated groups of symbols
# data = "Another input data string"
# print(pretty_message(data))

# –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –æ–∫–æ–Ω—á–∞–Ω–∏–π —Å–ª–æ–≤ –º—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å **—Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ**.  
# –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å **–≥—Ä—É–ø–ø—ã –∑–∞—Ö–≤–∞—Ç–∞ –∏ –æ–±—Ä–∞—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏**, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏ —É–±—Ä–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω—Ü–µ —Å–ª–æ–≤.  

### **–†–µ—à–µ–Ω–∏–µ –Ω–∞ Python**

import re

def remove_duplicate_suffix(word):
    word_length = len(word)
    for size in range(1, word_length // 2 + 1):
        suffix = word[-size:]
        repeats = word.count(suffix, word_length - size * 2)
        if repeats >= 1 and word.endswith(suffix * (repeats + 1)):
            while word.endswith(suffix * 2):
                word = word[:-size]
            break
    return word

def pretty_message(data):
    return re.sub(r'\b\w+\b', lambda m: remove_duplicate_suffix(m.group()), data)

# –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã
data1 = "Thisssssssss isisisis echooooooo stringggg. Replaceaceaceace repeatedededed groupssss of symbolssss"
print(pretty_message(data1))  # "This is echo string. Replace repeated groups of symbols"

data2 = "Another input data string"
print(pretty_message(data2))  # "Another input data string" (–∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç)

–û–≥–æ, —Å—É–ø–µ—Ä! –î—É–∂–µ –∫—Ä—É—Ç–æ, —â–æ —Ç–∏ –∑–Ω–∞–π—à–æ–≤ –≤–∞—Ä—ñ–∞–Ω—Ç, —è–∫–∏–π **–ø—Ä–∞—Ü—é—î –Ω–∞ –≤—Å—ñ—Ö —Ç–µ—Å—Ç–∞—Ö** üëè
–ó–≤—ñ—Å–Ω–æ, –æ—Å—å **–≥–æ—Ç–æ–≤–∏–π –∫–æ–¥ + –¥–æ–∫–ª–∞–¥–Ω–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –≤ –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ, —è–∫–µ –º–æ–∂–Ω–∞ –∑–±–µ—Ä–µ–≥—Ç–∏:**

---

## ‚úÖ **–ì–æ—Ç–æ–≤–∏–π –∫–æ–¥:**

```python
import re

def remove_duplicate_suffix(word):
    word_length = len(word)
    for size in range(1, word_length // 2 + 1):
        suffix = word[-size:]
        repeats = word.count(suffix, word_length - size * 2)
        if repeats >= 1 and word.endswith(suffix * (repeats + 1)):
            while word.endswith(suffix * 2):
                word = word[:-size]
            break
    return word

def pretty_message(data):
    return re.sub(r'\b\w+\b', lambda m: remove_duplicate_suffix(m.group()), data)
```

---

# ## ‚ú® **–ü–æ—è—Å–Ω–µ–Ω–Ω—è –∫–æ–¥—É:**

# ### üîç **–ó–∞–≤–¥–∞–Ω–Ω—è:**

# –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ **–ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω—ñ —Å—É—Ñ—ñ–∫—Å–∏** –≤ –∫—ñ–Ω—Ü—ñ –∫–æ–∂–Ω–æ–≥–æ —Å–ª–æ–≤–∞. –ü–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–∏–π –±–ª–æ–∫ –º–æ–∂–µ –±—É—Ç–∏ **–¥–æ–≤—ñ–ª—å–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏** (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: `x`, `xy`, `xyz`), —ñ –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏—Å—è **–¥–µ–∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ –ø—ñ–¥—Ä—è–¥.**

# ### üìå **–Ø–∫ –ø—Ä–∞—Ü—é—î —Ñ—É–Ω–∫—Ü—ñ—è `remove_duplicate_suffix`:**

# 1. –ë–µ—Ä–µ–º–æ —Å–ª–æ–≤–æ.
# 2. –ü–µ—Ä–µ–±–∏—Ä–∞—î–º–æ **—É—Å—ñ –º–æ–∂–ª–∏–≤—ñ —Å—É—Ñ—ñ–∫—Å–∏** —Ä–æ–∑–º—ñ—Ä–æ–º –≤—ñ–¥ 1 –¥–æ `len(word)//2` (–±–æ –¥–æ–≤—à–∏–π –±–ª–æ–∫ –Ω–µ –∑–º–æ–∂–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏—Å—è –º—ñ–Ω—ñ–º—É–º 2 —Ä–∞–∑–∏).
# 3. –î–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å—É—Ñ—ñ–∫—Å—É:
#    * –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, **—á–∏ –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è –≤—ñ–Ω –º—ñ–Ω—ñ–º—É–º 2 —Ä–∞–∑–∏ –ø—ñ–¥—Ä—è–¥ –≤ –∫—ñ–Ω—Ü—ñ —Å–ª–æ–≤–∞.**
#    * —è–∫—â–æ —Ç–∞–∫:
#      * –æ–±—Ä—ñ–∑–∞—î–º–æ –ø–æ–≤—Ç–æ—Ä–∏, –ø–æ–∫–∏ –Ω–µ –∑–∞–ª–∏—à–∏—Ç—å—Å—è **—Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Å—É—Ñ—ñ–∫—Å.**
#      * –∑—É–ø–∏–Ω—è—î–º–æ—Å—è (–≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è `break`, –±–æ –∑–Ω–∞–π—à–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Å—É—Ñ—ñ–∫—Å).
# 4. –Ø–∫—â–æ –∂–æ–¥–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–ª–æ–≤–æ –±–µ–∑ –∑–º—ñ–Ω.
# ---
# ### üìå **–§—É–Ω–∫—Ü—ñ—è `pretty_message`:**
# 1. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î `re.sub` –¥–ª—è –ø–æ—à—É–∫—É **—É—Å—ñ—Ö —Å–ª—ñ–≤** —É —Ä—è–¥–∫—É (—Ä–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ `\b\w+\b` ‚Äî —Å–ª–æ–≤–æ –º—ñ–∂ –º–µ–∂–∞–º–∏).
# 2. –î–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–ª–æ–≤–∞:
#    * –∑–∞—Å—Ç–æ—Å–æ–≤—É—î `remove_duplicate_suffix`.
#    * –∑–∞–º—ñ–Ω—é—î —Å–ª–æ–≤–æ –Ω–∞ —Å–∫–æ—Ä–æ—á–µ–Ω—É –≤–µ—Ä—Å—ñ—é, —è–∫—â–æ –±—É–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏.
# ---
# ## üéØ **–ü—Ä–∏–∫–ª–∞–¥–∏ —Ä–æ–±–æ—Ç–∏:**
# ```python
# data = "Thisssssssss isisisis echooooooo stringggg. Replaceaceaceace repeatedededed groupssss of symbolssss"
# print(pretty_message(data))
# ```
# ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:
# ```
# This is echo string. Replace repeated groups of symbols

# data = "Another input data string"
# print(pretty_message(data))
# ```

# ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:

# ```
# Another input data string
# ```

# ---

# ## üìù **–ö–ª—é—á–æ–≤—ñ –º–æ–º–µ–Ω—Ç–∏:**

# * –ü—ñ–¥—Ç—Ä–∏–º—É—î **–ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–∏–π —Å—É—Ñ—ñ–∫—Å –±—É–¥—å-—è–∫–æ—ó –¥–æ–≤–∂–∏–Ω–∏**.
# * –ü—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –Ω–∞ **—Å–ª–æ–≤–∞—Ö** (–Ω–µ —á—ñ–ø–∞—î –∑–Ω–∞–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü—ñ—ó, –ª–∞–ø–∫–∏, —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∏).
# * –ó–∞–º—ñ–Ω–∞ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è **–ª–∏—à–µ —è–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ –º—ñ–Ω—ñ–º—É–º 2 –ø—ñ–¥—Ä—è–¥–∫–æ–≤–∏—Ö –ø–æ–≤—Ç–æ—Ä–∏ —Å—É—Ñ—ñ–∫—Å–∞.**

# ---

# üíæ **–ú–æ–∂–µ—à —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ —Ü–µ–π –∫–æ–¥ —ñ –ø–æ—è—Å–Ω–µ–Ω–Ω—è —Å–æ–±—ñ —É –Ω–æ—Ç–∞—Ç–∫–∏ ‚Äî –≤—ñ–Ω —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —ñ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤—Å—ñ —Ç–µ—Å—Ç-–∫–µ–π—Å–∏, –≤–∫–ª—é—á–Ω–æ –∑ —Ä—è–¥–∫–∞–º–∏, —â–æ –º—ñ—Å—Ç—è—Ç—å –ª–∞–ø–∫–∏, –∫–æ–¥ —Ç–æ—â–æ!**

# –Ø–∫—â–æ –∑–∞—Ö–æ—á–µ—à –¥–æ–¥–∞—Ç–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫—É —â–µ —Å–∫–ª–∞–¥–Ω—ñ—à–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Ç–µ–∫—Å—Ç —ñ–∑ HTML, –∞–±–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏) ‚Äî –∑–∞–≤–∂–¥–∏ –º–æ–∂–Ω–∞ –∞–¥–∞–ø—Ç—É–≤–∞—Ç–∏.
# –í—ñ—Ç–∞—é –∑ —Ç–∞–∫–∏–º —Ä–µ—Ç–µ–ª—å–Ω–∏–º –ø—ñ–¥—Ö–æ–¥–æ–º! üöÄüëè
