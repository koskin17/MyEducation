# You have to create a main course and a dessert at an Italian and a French restaurant, but you won't mix one cuisine with the other. 

# Your task is:

# 1) define a class Product with an abstract method cook(). This class would be base class for the next classes:
# - class FettuccineAlfredo with field name ("Fettuccine Alfredo"), method cook() provides an output of the formatted string "Italian main course prepared: " and name of the dish;
#  - class Tiramisu, with field name ("Tiramisu"), method cook() provides an output of the formatted string "Italian dessert prepared:" and name of the dish;
# - class DuckALOrange, with field name ("Duck √Ä L'Orange"), method cook() provides an output of the formatted string "French main course prepared: " and name of the dish;
# - class CremeBrulee,  with field name ("Cr√®me br√ªl√©e"), method cook() provides an output of the formatted string "French dessert prepared: " and name of the dish.
# 2) define a class Factory with an abstract method get_dish() that takes  type_of_meal as a parameter. This class would be base class for the classes ItalianDishesFactory and FrenchDishesFactory. The method get_dish() according to type_of_meal ("main" or "dessert") invokes the dish of appropriate cousine;
# 3) define a class FactoryProducer with the method get_factory(). The method takes the parameter type_of_factory and invokes the appropriate dishes factory (classes ItalianDishesFactory or FrenchDishesFactory).

## üî∑ –ß—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ —Å—É—Ç–∏ –∑–∞–¥–∞—á–∏?
# –¢—ã —Å–æ–∑–¥–∞—ë—à—å —Å–∏—Å—Ç–µ–º—É, –≤ –∫–æ—Ç–æ—Ä–æ–π:
# * –º–æ–∂–Ω–æ **–ø–æ–ª—É—á–∏—Ç—å –±–ª—é–¥–∞ (main / dessert)** –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∫—É—Ö–æ–Ω—å (–ò—Ç–∞–ª—å—è–Ω—Å–∫–æ–π, –§—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–π),
# * –ø—Ä–∏ —ç—Ç–æ–º **–Ω–µ —Å–º–µ—à–∏–≤–∞—Ç—å –∫—É—Ö–Ω–∏** ‚Äî —ç—Ç–æ –∫–ª—é—á–µ–≤–∞—è –∏–¥–µ—è **–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–π —Ñ–∞–±—Ä–∏–∫–∏**.

## üîß –ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Ä–µ—à–µ–Ω–∏—è
### 1. **Product** (–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å):
# * –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –±–ª—é–¥ —Å –º–µ—Ç–æ–¥–æ–º `cook()`
### 2. **Concrete Products**:
# * `FettuccineAlfredo`, `Tiramisu` ‚Äî –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–µ –±–ª—é–¥–∞
# * `DuckALOrange`, `CremeBrulee` ‚Äî —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ –±–ª—é–¥–∞
### 3. **Factory** (–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å):
# * –ú–µ—Ç–æ–¥ `get_dish(type_of_meal)`, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –±–ª—é–¥–æ (main/dessert)
### 4. **Concrete Factories**:
# * `ItalianDishesFactory`
# * `FrenchDishesFactory`
### 5. **FactoryProducer**:
# * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω—É–∂–Ω—É—é —Ñ–∞–±—Ä–∏–∫—É –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é `type_of_factory`

## üîÑ –ü–∞—Ç—Ç–µ—Ä–Ω Abstract Factory ‚Äî –∑–∞—á–µ–º?
# –¢—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å **—Ä–∞–∑–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –æ–¥–Ω–æ–π ‚Äú—Å–µ–º—å–∏‚Äù**, –Ω–æ –Ω–µ —Å–º–µ—à–∏–≤–∞—Ç—å —Å–µ–º–µ–π—Å—Ç–≤–∞ (–≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ ‚Äî –∫—É—Ö–Ω–∏).
# ‚Üí Abstract Factory –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —ç—Ç–æ–≥–æ!

## ‚úÖ –ü–æ–ª–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:
from abc import ABC, abstractmethod

# Abstract class for dishes
class Product(ABC):
    @abstractmethod
    def cook(self):
        pass

# Class for italian dishes
class FettuccineAlfredo(Product):
    def __init__(self):
        self.name = "Fettuccine Alfredo"

    def cook(self):
        print(f"Italian main course prepared: {self.name}")

class Tiramisu(Product):
    def __init__(self):
        self.name = "Tiramisu"

    def cook(self):
        print(f"Italian dessert prepared: {self.name}")

# Class for french dishes
class DuckALOrange(Product):
    def __init__(self):
        self.name = "Duck √Ä L'Orange"

    def cook(self):
        print(f"French main course prepared: {self.name}")

class CremeBrulee(Product):
    def __init__(self):
        self.name = "Cr√®me br√ªl√©e"

    def cook(self):
        print(f"French dessert prepared: {self.name}")

# Abstract factory class
class Factory(ABC):
    @abstractmethod
    def get_dish(self, type_of_meal):
        pass

# Factory class for italian dishes
class ItalianDishesFactory(Factory):
    def get_dish(self, type_of_meal):
        if type_of_meal == "main":
            return FettuccineAlfredo()
        elif type_of_meal == "dessert":
            return Tiramisu()
        else:
            raise ValueError("Invalid type of meal. Choose 'main' or 'dessert'.")

# Factory class for french dishes
class FrenchDishesFactory(Factory):
    def get_dish(self, type_of_meal):
        if type_of_meal == "main":
            return DuckALOrange()
        elif type_of_meal == "dessert":
            return CremeBrulee()
        else:
            raise ValueError("Invalid type of meal. Choose 'main' or 'dessert'.")

# === Step 5: Factory of Factories ===
class FactoryProducer:
    def get_factory(self, type_of_factory):
        if type_of_factory == "italian":
            return ItalianDishesFactory()
        elif type_of_factory == "french":
            return FrenchDishesFactory()
        else:
            raise ValueError("Invalid factory type. Choose 'italian' or 'french'.")

## üìå –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
if __name__ == "__main__":
    producer = FactoryProducer()

    # –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π –¥–µ—Å–µ—Ä—Ç
    italian_factory = producer.get_factory("italian")
    italian_dessert = italian_factory.get_dish("dessert")
    italian_dessert.cook()  # ‚Üí Italian dessert prepared: Tiramisu

    # –§—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ
    french_factory = producer.get_factory("french")
    french_main = french_factory.get_dish("main")
    french_main.cook()  # ‚Üí French main course prepared: Duck √Ä L'Orange

## ‚úÖ –ò—Ç–æ–≥–æ:
# * ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–∞—Ç—Ç–µ—Ä–Ω **Abstract Factory**
# * ‚úÖ –ö–ª–∞—Å—Å—ã —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø–æ –∏–µ—Ä–∞—Ä—Ö–∏–∏
# * ‚úÖ –ú–µ—Ç–æ–¥ `cook()` —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω —É –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
# * ‚úÖ –û–±—ä–µ–∫—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è —Ñ–∞–±—Ä–∏–∫–∞–º–∏, –±–µ–∑ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∫–ª–∞—Å—Å–æ–≤-–ø—Ä–æ–¥—É–∫—Ç–æ–≤
# * ‚úÖ –†–µ—à–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Å–µ–º —É—Å–ª–æ–≤–∏—è–º –∑–∞–¥–∞—á–∏

# ## üîß **–ß—Ç–æ –º—ã –≤–æ–æ–±—â–µ –¥–µ–ª–∞–µ–º?**

# –ú—ã —Ö–æ—Ç–∏–º:

# * –≥–æ—Ç–æ–≤–∏—Ç—å **–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–µ** –∏ **—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ** –±–ª—é–¥–∞;
# * —É –∫–∞–∂–¥–æ–π –∫—É—Ö–Ω–∏ –µ—Å—Ç—å **–æ—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ (main)** –∏ **–¥–µ—Å–µ—Ä—Ç (dessert)**;
# * –≥–ª–∞–≤–Ω–æ–µ ‚Äî **–Ω–µ –º–µ—à–∞—Ç—å –∫—É—Ö–Ω–∏** –º–µ–∂–¥—É —Å–æ–±–æ–π;
# * –∏ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ **–≥–∏–±–∫–æ**: —á—Ç–æ–±—ã –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –∫—É—Ö–Ω–∏ –∏ –±–ª—é–¥–∞ –≤ –±—É–¥—É—â–µ–º.

# ---

# ## üî∂ –≠–¢–ê–ü 1: –ë–ê–ó–û–í–´–ô –ö–õ–ê–°–° –î–õ–Ø –í–°–ï–• –ë–õ–Æ–î

# ```python
# class Product(ABC):
#     @abstractmethod
#     def cook(self):
#         pass

# ### –ß—Ç–æ –∑–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:
# * `Product` ‚Äî —ç—Ç–æ **—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π (–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π) –∫–ª–∞—Å—Å**. –í—Å–µ –±–ª—é–¥–∞ (–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–µ –∏ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ) –±—É–¥—É—Ç –µ–≥–æ "–¥–µ—Ç—å–º–∏".
# * –ú–µ—Ç–æ–¥ `cook()` ‚Äî —ç—Ç–æ –∫–∞–∫ –±—ã **—à–∞–±–ª–æ–Ω**, –∫–æ—Ç–æ—Ä—ã–π **–∫–∞–∂–¥–æ–µ –±–ª—é–¥–æ –æ–±—è–∑–∞–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å**.
#   –¢–æ –µ—Å—Ç—å, –ª—é–±–æ–π –∫–ª–∞—Å—Å-–±–ª—é–¥–æ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –º–µ—Ç–æ–¥ `cook()`.

# ## üçù –≠–¢–ê–ü 2: –ö–û–ù–ö–†–ï–¢–ù–´–ï –ë–õ–Æ–î–ê
# ### –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–µ:
# class FettuccineAlfredo(Product):
#     def __init__(self):
#         self.name = "Fettuccine Alfredo"

#     def cook(self):
#         print(f"Italian main course prepared: {self.name}")
# * –≠—Ç–æ –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ.
# * –ö–æ–≥–¥–∞ –≤—ã–∑–æ–≤–µ—à—å `cook()`, –Ω–∞–ø–µ—á–∞—Ç–∞–µ—Ç: `Italian main course prepared: Fettuccine Alfredo`

# class Tiramisu(Product):
#     def __init__(self):
#         self.name = "Tiramisu"

#     def cook(self):
#         print(f"Italian dessert prepared: {self.name}")
# * –≠—Ç–æ –¥–µ—Å–µ—Ä—Ç.

# ### –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ:
# class DuckALOrange(Product):
#     def __init__(self):
#         self.name = "Duck √Ä L'Orange"

#     def cook(self):
#         print(f"French main course prepared: {self.name}")

# class CremeBrulee(Product):
#     def __init__(self):
#         self.name = "Cr√®me br√ªl√©e"

#     def cook(self):
#         print(f"French dessert prepared: {self.name}")

# ## üè≠ –≠–¢–ê–ü 3: –ê–ë–°–¢–†–ê–ö–¢–ù–ê–Ø –§–ê–ë–†–ò–ö–ê
# class Factory(ABC):
#     @abstractmethod
#     def get_dish(self, type_of_meal):
#         pass
# * –≠—Ç–æ **—Ñ–∞–±—Ä–∏–∫–∞-—à–∞–±–ª–æ–Ω**.
# * –û–Ω–∞ –≥–æ–≤–æ—Ä–∏—Ç: "–õ—é–±–∞—è –∫—É—Ö–Ω—è (—Ñ–∞–±—Ä–∏–∫–∞) –¥–æ–ª–∂–Ω–∞ —É–º–µ—Ç—å –¥–∞–≤–∞—Ç—å –±–ª—é–¥–æ, –µ—Å–ª–∏ —è —Å–∫–∞–∂—É `main` –∏–ª–∏ `dessert`".

# ## üçï –≠–¢–ê–ü 4: –ò–¢–ê–õ–¨–Ø–ù–°–ö–ê–Ø –§–ê–ë–†–ò–ö–ê
# class ItalianDishesFactory(Factory):
#     def get_dish(self, type_of_meal):
#         if type_of_meal == "main":
#             return FettuccineAlfredo()
#         elif type_of_meal == "dessert":
#             return Tiramisu()
# * –ï—Å–ª–∏ –º—ã –ø—Ä–æ—Å–∏–º –∏—Ç–∞–ª—å—è–Ω—Å–∫—É—é —Ñ–∞–±—Ä–∏–∫—É `get_dish("main")`, –æ–Ω–∞ –¥–∞—Å—Ç `FettuccineAlfredo`.
# * –ï—Å–ª–∏ –ø—Ä–æ—Å–∏–º `"dessert"` ‚Äî –¥–∞—Å—Ç `Tiramisu`.

# ## ü•ñ –≠–¢–ê–ü 5: –§–†–ê–ù–¶–£–ó–°–ö–ê–Ø –§–ê–ë–†–ò–ö–ê
# class FrenchDishesFactory(Factory):
#     def get_dish(self, type_of_meal):
#         if type_of_meal == "main":
#             return DuckALOrange()
#         elif type_of_meal == "dessert":
#             return CremeBrulee()

# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–π —Ñ–∞–±—Ä–∏–∫–µ, –Ω–æ –¥–ª—è —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏—Ö –±–ª—é–¥.

# ## üß† –≠–¢–ê–ü 6: –§–ê–ë–†–ò–ö–ê –§–ê–ë–†–ò–ö
# class FactoryProducer:
#     def get_factory(self, type_of_factory):
#         if type_of_factory == "italian":
#             return ItalianDishesFactory()
#         elif type_of_factory == "french":
#             return FrenchDishesFactory()
# * –≠—Ç–æ **–º–µ–Ω–µ–¥–∂–µ—Ä**, –∫–æ—Ç–æ—Ä—ã–π –≥–æ–≤–æ—Ä–∏—Ç:
#   ‚Äî "–û–∫–µ–π, —Ç—ã —Ö–æ—á–µ—à—å –∏—Ç–∞–ª—å—è–Ω—Å–∫—É—é –∫—É—Ö–Ω—é? –í–æ—Ç —Ç–µ–±–µ —Ñ–∞–±—Ä–∏–∫–∞".
#   ‚Äî "–§—Ä–∞–Ω—Ü—É–∑—Å–∫—É—é? –õ–µ–≥–∫–æ!"

# ## üé¨ –ö–ê–ö –í–°–Å –†–ê–ë–û–¢–ê–ï–¢ –í–ú–ï–°–¢–ï
# ### –ü—Ä–∏–º–µ—Ä:
# producer = FactoryProducer()  # —Å–æ–∑–¥–∞—ë–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ñ–∞–±—Ä–∏–∫

# italian_factory = producer.get_factory("italian")  # –ø–æ–ª—É—á–∞–µ–º –∏—Ç–∞–ª—å—è–Ω—Å–∫—É—é —Ñ–∞–±—Ä–∏–∫—É
# dish = italian_factory.get_dish("dessert")         # –ø—Ä–æ—Å–∏–º –¥–µ—Å–µ—Ä—Ç
# dish.cook()  # ‚Üí Italian dessert prepared: Tiramisu

# ## üí° –í —á—ë–º –ø–æ–ª—å–∑–∞?
# * –õ–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å **–Ω–æ–≤—ã–µ –∫—É—Ö–Ω–∏** (–ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞—ë—à—å –Ω–æ–≤—É—é —Ñ–∞–±—Ä–∏–∫—É);
# * –í—Å—ë **—á—ë—Ç–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–æ**: –∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è —Ñ–∞–±—Ä–∏–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –¥–∞—Ç—å —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–µ –±–ª—é–¥–æ;
# * –ö–æ–¥ **–≥–∏–±–∫–∏–π –∏ —Ä–∞—Å—à–∏—Ä—è–µ–º—ã–π** ‚Äî –Ω–µ –Ω–∞–¥–æ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å –∫—É—á—É `if` –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ.

# ## ‚úÖ –ß—Ç–æ —Ç–∞–∫–æ–µ `ABC` –∏ `abstractmethod`?
# ### üîπ `ABC` = **Abstract Base Class**
# –≠—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –≥–æ–≤–æ—Ä–∏—Ç:
# > "–Ø ‚Äî **–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π**, –º–µ–Ω—è –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é. –Ø ‚Äî —à–∞–±–ª–æ–Ω."

# –í Python —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è —Ç–∞–∫:

# from abc import ABC, abstractmethod
# * `ABC` ‚Äî –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è **–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã—Ö** –∫–ª–∞—Å—Å–æ–≤;
# * `@abstractmethod` ‚Äî –≥–æ–≤–æ—Ä–∏—Ç: "—ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö".

# ### üìå –ó–∞—á–µ–º –Ω—É–∂–µ–Ω `ABC`?
# –ß—Ç–æ–±—ã **–∑–∞—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Ç–æ–º–∫–æ–≤ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥**, –∏–Ω–∞—á–µ –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞:
# class Product(ABC):
#     @abstractmethod
#     def cook(self):
#         pass

# –ï—Å–ª–∏ —Ç—ã –∑–∞–±—É–¥–µ—à—å `cook()` –≤ –∫–∞–∫–æ–º-—Ç–æ –±–ª—é–¥–µ ‚Äî Python –≤—ã–±—Ä–æ—Å–∏—Ç –æ—à–∏–±–∫—É.
# üìå –≠—Ç–æ –∑–∞—â–∏—Ç–∞ –æ—Ç –æ—à–∏–±–æ–∫: —Ç—ã —á—ë—Ç–∫–æ –∑–∞–¥–∞—ë—à—å –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ—Ç–æ–º–∫–æ–≤.

# ## üß© –ü–æ—á–µ–º—É –Ω–µ–ª—å–∑—è –ø—Ä–æ—Å—Ç–æ –±–µ–∑ `Product(ABC)`?
# –¢—ã –º–æ–∂–µ—à—å –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `ABC`, –Ω–æ —Ç–æ–≥–¥–∞:
# * –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞—Å—Ç–∞–≤–∏—Ç —Ç–µ–±—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å `cook()` –≤ –ø–æ—Ç–æ–º–∫–∞—Ö;
# * —ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ **–±–∞–≥–∞–º** ‚Äî –≤—ã–∑–æ–≤–µ—à—å `cook()`, –∞ –µ–≥–æ –Ω–µ—Ç.

# –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å ‚Äî —ç—Ç–æ **–∫–æ–Ω—Ç—Ä–∞–∫—Ç**: "–ª—é–±–æ–π, –∫—Ç–æ –æ—Ç –º–µ–Ω—è –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è ‚Äî –æ–±—è–∑–∞–Ω —É–º–µ—Ç—å –≥–æ—Ç–æ–≤–∏—Ç—å (`cook()`)".
# ## üçΩ –ó–∞—á–µ–º `Factory` –∫–∞–∫ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å?
# –¢–æ—á–Ω–æ —Ç–∞–∫ –∂–µ! –í–æ—Ç –æ–Ω:
# class Factory(ABC):
#     @abstractmethod
#     def get_dish(self, type_of_meal):
#         pass

# –û–Ω –≥–æ–≤–æ—Ä–∏—Ç:
# > "–õ—é–±–∞—è –∫—É—Ö–Ω—è –æ–±—è–∑–∞–Ω–∞ —É–º–µ—Ç—å –≤—ã–¥–∞–≤–∞—Ç—å –±–ª—é–¥–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É ‚Äî main –∏–ª–∏ dessert".

# ## üîß –ê –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ—Å—Ç–æ –±–µ–∑ `Factory(ABC)`?
# –ú–æ–∂–Ω–æ. –ù–æ —Ç—ã —Ç–æ–≥–¥–∞ –ø–æ—Ç–µ—Ä—è–µ—à—å:
# * –ø–æ–Ω—è—Ç–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É;
# * **—Ä–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å**;
# * –∑–∞—â–∏—Ç—É –æ—Ç –æ—à–∏–±–æ–∫.

# **–ü–∞—Ç—Ç–µ—Ä–Ω –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è** (Abstract Factory) —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Å–æ–∑–¥–∞—ë—Ç –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å ‚Äî –∫–∞–∫ **–µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å** –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–±—Ä–∏–∫.

# ## üçù –ü–æ—á–µ–º—É –±–ª—é–¥–∞ –Ω–∞—Å–ª–µ–¥—É—é—Ç `Product`?
# –ß—Ç–æ–±—ã –æ–Ω–∏:
# * **–≤—Å–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∏–º–µ–ª–∏ –º–µ—Ç–æ–¥ `cook()`**
# * –±—ã–ª–∏ **–≤–∑–∞–∏–º–æ–∑–∞–º–µ–Ω—è–µ–º—ã–º–∏** ‚Äî —Ç—ã –Ω–µ –¥—É–º–∞–µ—à—å: —ç—Ç–æ `Tiramisu` –∏–ª–∏ `CremeBrulee`, —Ç—ã –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ—à—å `.cook()`.

# –≠—Ç–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è **–ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º** ‚Äî —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ (`Product`), –Ω–µ –∑–Ω–∞—è, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ —É —Ç–µ–±—è –æ–±—ä–µ–∫—Ç.

# ## üß† –û–±–æ–±—â–∏–º:
# | –≠–ª–µ–º–µ–Ω—Ç                   | –ó–∞—á–µ–º –Ω—É–∂–µ–Ω                                              |
# | ------------------------- | -------------------------------------------------------- |
# | `ABC`                     | –î–µ–ª–∞–µ—Ç –∫–ª–∞—Å—Å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–º, –Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é        |
# | `@abstractmethod`         | –û–±—è–∑—ã–≤–∞–µ—Ç –ø–æ—Ç–æ–º–∫–æ–≤ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥                     |
# | `Product(ABC)`            | –®–∞–±–ª–æ–Ω –¥–ª—è –≤—Å–µ—Ö –±–ª—é–¥: –æ–Ω–∏ –æ–±—è–∑–∞–Ω—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å `cook()`   |
# | `Factory(ABC)`            | –®–∞–±–ª–æ–Ω –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–±—Ä–∏–∫: –æ–Ω–∏ –æ–±—è–∑–∞–Ω—ã —É–º–µ—Ç—å –≤—ã–¥–∞–≤–∞—Ç—å –±–ª—é–¥–æ |
# | –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç `Product` | –í—Å–µ –±–ª—é–¥–∞ —Ä–µ–∞–ª–∏–∑—É—é—Ç `cook()`, —Ä–∞–±–æ—Ç–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ         |
# | –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç `Factory` | –í—Å–µ –∫—É—Ö–Ω–∏ —Ä–µ–∞–ª–∏–∑—É—é—Ç `get_dish()`, –µ–¥–∏–Ω—ã–π –ø–æ–¥—Ö–æ–¥          |

# –ü—Ä–∏–º–µ—Ä, **–ø–æ—á–µ–º—É `ABC` –∏ `@abstractmethod` –∑–∞—â–∏—â–∞—é—Ç –Ω–∞—Å –æ—Ç –æ—à–∏–±–æ–∫**, –∏ **—á—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç, –µ—Å–ª–∏ –∏—Ö –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å**.

# ## ‚ùå –ü—Ä–∏–º–µ—Ä –±–µ–∑ `ABC` –∏ –±–µ–∑ `@abstractmethod`
# class Product:
#     def cook(self):
#         pass  # –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞

# –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞—ë–º –±–ª—é–¥–æ, –Ω–æ‚Ä¶ **–∑–∞–±—ã–≤–∞–µ–º** —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å `cook()`:
# class Tiramisu(Product):
#     def __init__(self):
#         self.name = "Tiramisu"
#     # cook –∑–∞–±—ã–ª–∏!

# ### –ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç, –µ—Å–ª–∏ –≤—ã–∑–≤–∞—Ç—å `cook()`?
# dessert = Tiramisu()
# dessert.cook()  # —Ä–∞–±–æ—Ç–∞–µ—Ç! ... –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç üò±

# ### ‚ùó –≠—Ç–æ –ü–õ–û–•–û:
# * –û—à–∏–±–∫–∞ –Ω–µ –≤–æ–∑–Ω–∏–∫–Ω–µ—Ç.
# * –¢—ã –¥—É–º–∞–µ—à—å, —á—Ç–æ –±–ª—é–¥–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ‚Äî –Ω–æ `cook()` –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç.
# * –¢–∞–∫–æ–π –±–∞–≥ –º–æ–∂–µ—Ç –±—ã—Ç—å **–æ—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ –∑–∞–º–µ—Ç–∏—Ç—å**, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –±–æ–ª—å—à–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö.

# ## ‚úÖ –¢–µ–ø–µ—Ä—å –ø—Ä–∏–º–µ—Ä —Å `ABC` –∏ `@abstractmethod`
# ```python
# from abc import ABC, abstractmethod

# class Product(ABC):
#     @abstractmethod
#     def cook(self):
#         pass

# –¢–µ–ø–µ—Ä—å –µ—Å–ª–∏ —Ç—ã —Å–Ω–æ–≤–∞ –∑–∞–±—É–¥–µ—à—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å `cook()` –≤ Tiramisu:
# class Tiramisu(Product):
#     def __init__(self):
#         self.name = "Tiramisu"
#     # cook —Å–Ω–æ–≤–∞ –∑–∞–±—ã–ª–∏!

# ### –ß—Ç–æ —Ç–µ–ø–µ—Ä—å?
# dessert = Tiramisu()  # üí• –í–û–¢ –¢–ï–ü–ï–†–¨ –ë–£–î–ï–¢ –û–®–ò–ë–ö–ê!

# ‚ùå **–û—à–∏–±–∫–∞:**
# ```txt
# TypeError: Can't instantiate abstract class Tiramisu with abstract method cook
# ```

# ## üí° –ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç?
# Python –≥–æ–≤–æ—Ä–∏—Ç:
# > ‚Äú–¢—ã –æ–±–µ—â–∞–ª, —á—Ç–æ –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –±—É–¥—É—Ç —É–º–µ—Ç—å –≥–æ—Ç–æ–≤–∏—Ç—å (`cook()`),
# > –∞ —Å–∞–º –Ω–µ —Å–¥–µ–ª–∞–ª. –¢–∞–∫ –Ω–µ –ø–æ–π–¥—ë—Ç. –û—à–∏–±–∫–∞.‚Äù

# –≠—Ç–æ ‚Äî **–∑–∞—â–∏—Ç–∞ –æ—Ç –±—É–¥—É—â–∏—Ö –±–∞–≥–æ–≤.**

# ## üß† –í—ã–≤–æ–¥:
# | –ë–µ–∑ `ABC`                                             | –° `ABC`                                          |
# | ----------------------------------------------------- | ------------------------------------------------ |
# | –ö–æ–¥ –º–æ–ª—á–∞ ¬´—Ä–∞–±–æ—Ç–∞–µ—Ç¬ª, –¥–∞–∂–µ –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω   | –ö–æ–¥ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω |
# | –û—à–∏–±–∫–∞ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–Ω—Ç–∞–π–º–µ (–∏ —Ç–æ –Ω–µ –≤—Å–µ–≥–¥–∞) | –û—à–∏–±–∫–∞ –≤–∏–¥–Ω–∞ —Å—Ä–∞–∑—É                               |
# | –°–ª–æ–∂–Ω–µ–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–æ–¥                              | –ö–æ–¥ –Ω–∞–¥—ë–∂–Ω—ã–π –∏ —Å–∞–º–æ–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π             |

# –•–æ—á–µ—à—å ‚Äî –ø–æ–∫–∞–∂—É –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–∏–º–µ—Ä –∏ —Å **–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–π —Ñ–∞–±—Ä–∏–∫–æ–π (`Factory`)** –∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é —Ç–∞–º.


