# Imagine we are studying an organizational structure which consists of General Managers, Managers, and Developers. A General Manager may have many Managers working under him and a Manager may have many developers under him. Suppose, you have to determine the total salary of all the employees. 

# One of the best solutions to the above-described problem is using Composite Method by working with a common interface that declares a method for calculating the total salary.

# Note. 

# We attempt to make an organizational hierarchy with sub-organization,
# which may have subsequent sub-organizations, such as:
# GeneralManager                                   [Composite]
#       Manager1                                   [Composite]
#               Developer11                        [Leaf]
#               Developer12                        [Leaf]
#       Manager2                                   [Composite]
#               Developer21                        [Leaf]
#               Developer22                        [Leaf]

# class LeafElement: 
  
#     def __init__(self, *args): 
  
#         ''''Takes the first positional argument and assigns to member variable "position".'''
         
  
#     def showDetails(self): 
  
#         '''Prints the position of the child element.'''
        
  
  
# class CompositeElement: 
  
#     def __init__(self, *args): 
  
#         '''Takes the first positional argument and assigns to member 
#          variable "position". Initializes a list of children elements.'''
        
  
#     def add(self, child): 
  
#         '''Adds the supplied child element to the list of children 
#          elements "children".'''
        
  
#     def remove(self, child): 
  
#         '''Removes the supplied child element from the list of 
#         children elements "children".'''
        
  
#     def showDetails(self): 
  
#         '''Prints the details of the component element first. Then, 
#         iterates over each of its children, prints their details by 
#         calling their showDetails() method.'''

## üîµ –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–¥–∞—á–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π

# > –ü—Ä–µ–¥—Å—Ç–∞–≤–∏–º, —á—Ç–æ –º—ã –∏–∑—É—á–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Å—Ç–æ–∏—Ç –∏–∑:
# * **–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤** (*General Managers*),
# * **–ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤** (*Managers*),
# * **–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤** (*Developers*).

# üî∏ –û–¥–∏–Ω **–≥–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä** –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –ø–æ–¥ —Å–æ–±–æ–π **–Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤**.
# üî∏ –ö–∞–∂–¥—ã–π **–º–µ–Ω–µ–¥–∂–µ—Ä** –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –ø–æ–¥ —Å–æ–±–æ–π **–Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤**.

# **–¶–µ–ª—å**: —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—â—É—é –∑–∞—Ä–ø–ª–∞—Ç—É –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ —ç—Ç–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏.

# üí° –î–ª—è —ç—Ç–æ–≥–æ **–Ω–∞–∏–ª—É—á—à–∏–º —Ä–µ—à–µ–Ω–∏–µ–º –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Composite**, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –æ–¥–∏–Ω–æ—á–Ω—ã–º –æ–±—ä–µ–∫—Ç–∞–º –∏ –≥—Ä—É–ø–ø–∞–º –æ–¥–∏–Ω–∞–∫–æ–≤–æ, —á–µ—Ä–µ–∑ **–æ–±—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å**.

## üß© –ó–∞—á–µ–º –Ω—É–∂–µ–Ω Composite-–ø–∞—Ç—Ç–µ—Ä–Ω –∑–¥–µ—Å—å?
# * –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ (Developer) ‚Äî **–ª–∏—Å—Ç–æ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç** (–Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥—Ä—É–≥–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤);
# * –ú–µ–Ω–µ–¥–∂–µ—Ä –∏ –ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä ‚Äî **—Å–æ—Å—Ç–∞–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã** (–º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥—Ä—É–≥–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤).

# **Composite** –ø–æ–∑–≤–æ–ª—è–µ—Ç:
# * –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —ç–ª–µ–º–µ–Ω—Ç—É –∏–ª–∏ –≥—Ä—É–ø–ø–µ –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ;
# * —Å—Ç—Ä–æ–∏—Ç—å –∏–µ—Ä–∞—Ä—Ö–∏—é –∫–∞–∫ –¥–µ—Ä–µ–≤–æ;
# * **–Ω–µ –¥—É–º–∞—Ç—å, –∫—Ç–æ –∏–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π ‚Äî "–æ–¥–∏–Ω" –∏–ª–∏ "–≥—Ä—É–ø–ø–∞"**.

## üèó –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ—à–µ–Ω–∏—è
# –ú—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 2 –∫–ª–∞—Å—Å–∞:
# * `LeafElement` ‚Äî –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤;
# * `CompositeElement` ‚Äî –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞.

# –í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –±—É–¥—É—Ç –∏–º–µ—Ç—å:
# * `position` ‚Äî –¥–æ–ª–∂–Ω–æ—Å—Ç—å;
# * `salary` ‚Äî –∑–∞—Ä–ø–ª–∞—Ç—É;
# * `showDetails()` ‚Äî –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏;
# * `get_salary()` ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–µ–π/–≥—Ä—É–ø–ø–æ–≤–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã.

## ‚úÖ –ü–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏

### üîπ 1. –ö–ª–∞—Å—Å `LeafElement`
# –≠—Ç–æ **–∫–æ–Ω–µ—á–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫**, —É –∫–æ—Ç–æ—Ä–æ–≥–æ:
# * –Ω–µ—Ç –ø–æ–¥—á–∏–Ω—ë–Ω–Ω—ã—Ö;
# * –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –∏–º—è, –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏ –∑–∞—Ä–ø–ª–∞—Ç–∞;
# * –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å —Å–µ–±—è (`showDetails`) –∏ –æ—Ç–¥–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É (`get_salary`).

### üîπ 2. –ö–ª–∞—Å—Å `CompositeElement`
# –≠—Ç–æ **—Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å –ø–æ–¥—á–∏–Ω—ë–Ω–Ω—ã–º–∏**:
# * —Ç–æ–∂–µ –∏–º–µ–µ—Ç –∏–º—è, –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏ –∑–∞—Ä–ø–ª–∞—Ç—É;
# * –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å/—É–¥–∞–ª—è—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤;
# * –≤—ã–≤–æ–¥–∏—Ç —Å–µ–±—è –∏ –≤—Å–µ—Ö —Å–≤–æ–∏—Ö –ø–æ–¥—á–∏–Ω—ë–Ω–Ω—ã—Ö;
# * —Å—á–∏—Ç–∞–µ—Ç —Å–≤–æ—é –∑–∞—Ä–ø–ª–∞—Ç—É + –∑–∞—Ä–ø–ª–∞—Ç—É –≤—Å–µ—Ö –ø–æ–¥—á–∏–Ω—ë–Ω–Ω—ã—Ö.

## ‚úÖ –ü–æ–ª–Ω—ã–π –∫–æ–¥ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
# class LeafElement:
#     # def __init__(self, name, position, salary):
#     def __init__(self, *args):
#         """
#         Creating an employee without subordinates:
#             :param name: Employee name;
#             :param position: Position;
#             :param salary: Salary.
#         """
#         # self.name = name
#         self.position = position
#         # self.salary = salary

#     def showDetails(self):
#         """ Information about employee """
#         print(f"{self.position}: {self.name}, Salary: {self.salary}")

#     def get_salary(self):
#         """ Salary of employee """
#         return self.salary


# class CompositeElement:
#     def __init__(self, name, position, salary):
#         """
#         Cretaing employee with subordinates:
#             :param name: Name of employee;
#             :param position: Position.
#             :param salary: Salary.
#         """
#         self.name = name
#         self.position = position
#         self.salary = salary
#         self.children = []  # List of subordinates

#     def add(self, child):
#         """ Add a subordinate """
#         self.children.append(child)

#     def remove(self, child):
#         """ Remove a subordinate """
#         self.children.remove(child)

#     def showDetails(self):
#         """ Display all information + information about all subordinates """
#         print(f"{self.position}: {self.name}, Salary: {self.salary}")
#         for child in self.children:
#             child.showDetails()

#     def get_salary(self):
#         """ Salary of employee + salary of all subordinates """
#         total = self.salary
#         for child in self.children:
#             total += child.get_salary()
#         return total

# ## üß™ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
# if __name__ == "__main__":
#     # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
#     dev1 = LeafElement("Alice", "Developer11", 5000)
#     dev2 = LeafElement("Bob", "Developer12", 4800)
#     dev3 = LeafElement("Charlie", "Developer", 4700)
#     dev4 = LeafElement("Diana", "Developer", 4900)

#     # –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
#     manager1 = CompositeElement("Eva", "Manager1", 8000)
#     manager2 = CompositeElement("Frank", "Manager2", 8200)
#     # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
#     manager1.add(dev1)
#     manager1.add(dev2)
#     manager2.add(dev3)
#     manager2.add(dev4)
    
#     # –ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä
#     general_manager = CompositeElement("Grace", "General Manager", 15000)

#     # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É
#     general_manager.add(manager1)
#     general_manager.add(manager2)

#     # –ü–æ–∫–∞–∂–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
#     print("=== Organization Structure ===")
#     general_manager.showDetails()

#     # –û–±—â–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞
#     print("\nTotal Salary of all employees:", general_manager.get_salary())

# –ö–û–î –î–õ–Ø –ó–ê–î–ê–ù–ò–Ø
class LeafElement:
    def __init__(self, *args):
        """
        Creating an employee without subordinates:
            :param name: Employee name;
            :param position: Position;
            :param salary: Salary.
        """
        self.position = args[0]

    def showDetails(self, indent = 0):
        """ Information about employee """
        print("\t" * indent + f"{self.position}")

    def get_salary(self):
        """ Salary of employee """
        return self.salary

class CompositeElement:
    def __init__(self, *args):
        """
        Cretaing employee with subordinates:
            :param name: Name of employee;
            :param position: Position.
            :param salary: Salary.
        """
        self.position = args[0]
        self.children = []  # List of subordinates

    def add(self, child):
        """ Add a subordinate """
        self.children.append(child)

    def remove(self, child):
        """ Remove a subordinate """
        self.children.remove(child)

    def showDetails(self, indent = 0):
        """ Display all information + information about all subordinates """
        print("\t" * indent + f"{self.position}")
        for child in self.children:
            child.showDetails(indent + 1)

    def get_salary(self):
        """ Salary of employee + salary of all subordinates """
        total = self.salary
        for child in self.children:
            total += child.get_salary()
        return total
    
if __name__ == "__main__":
    # –¢–µ—Å—Ç—ã –∏–∑ –∑–∞–¥–∞–Ω–∏—è
    print()
    print('Tests from task:')
    topLevelMenu = CompositeElement("GeneralManager")
    subMenuItem1 = CompositeElement("Manager1")
    subMenuItem2 = CompositeElement("Manager2")
    subMenuItem11 = LeafElement("Developer11")
    subMenuItem12 = LeafElement("Developer12")
    subMenuItem21 = LeafElement("Developer21")
    subMenuItem22 = LeafElement("Developer22")
    subMenuItem1.add(subMenuItem11)
    subMenuItem1.add(subMenuItem12)
    subMenuItem2.add(subMenuItem22)
    subMenuItem2.add(subMenuItem22)
    topLevelMenu.add(subMenuItem1)
    topLevelMenu.add(subMenuItem2)
    topLevelMenu.showDetails()

## üí° –ü–æ—á–µ–º—É —Ç–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω–æ?
# | –ß—Ç–æ                                                   | –ü–æ—á–µ–º—É                                                         |
# | ------------------------------------------------------| -------------------------------------------------------------- |
# | `LeafElement` –∏ `CompositeElement` –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ   | –ß—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∏–º–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ, –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω Composite |
# | –º–µ—Ç–æ–¥—ã                                                |  |
# | –£ `CompositeElement` –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ `children`           | –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥—á–∏–Ω—ë–Ω–Ω—ã—Ö                                       |
# | –ú–µ—Ç–æ–¥ `get_salary()` –≤—ã–∑—ã–≤–∞–µ—Ç —Å–∞–º —Å–µ–±—è –Ω–∞ –ø–æ–¥—á–∏–Ω—ë–Ω–Ω—ã—Ö | –≠—Ç–æ **—Ä–µ–∫—É—Ä—Å–∏—è** –ø–æ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤                       |

# –•–æ—á–µ—à—å ‚Äî –º–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–≤–æ–¥ –¥–µ—Ä–µ–≤–∞ –≤ –≤–∏–¥–µ –æ—Ç—Å—Ç—É–ø–æ–≤ (`General Manager ‚Üí Manager ‚Üí Developer`) –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ JSON/XML.

# –ß—Ç–æ–±—ã **–≤—ã–≤–µ—Å—Ç–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ –≤–∏–¥–µ –¥–µ—Ä–µ–≤–∞ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏**, –º—ã –¥–æ–±–∞–≤–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä `indent` –≤ –º–µ—Ç–æ–¥ `showDetails()` ‚Äî –æ–Ω –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å **–≥–ª—É–±–∏–Ω—É —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏**.

## üîß –û–±–Ω–æ–≤–∏–º –º–µ—Ç–æ–¥—ã `showDetails()`:

### ‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π `LeafElement.showDetails()`:
# def showDetails(self, indent=0):
#     print("    " * indent + f"{self.position}: {self.name}, Salary: {self.salary}")

# ### ‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π `CompositeElement.showDetails()`:
# def showDetails(self, indent=0):
#     print("    " * indent + f"{self.position}: {self.name}, Salary: {self.salary}")
#     for child in self.children:
#         child.showDetails(indent + 1)

# ## ‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
# if __name__ == "__main__":
#     dev1 = LeafElement("Alice", "Developer", 5000)
#     dev2 = LeafElement("Bob", "Developer", 4800)
#     dev3 = LeafElement("Charlie", "Developer", 4700)
#     dev4 = LeafElement("Diana", "Developer", 4900)

#     manager1 = CompositeElement("Eva", "Manager", 8000)
#     manager2 = CompositeElement("Frank", "Manager", 8200)

#     manager1.add(dev1)
#     manager1.add(dev2)
#     manager2.add(dev3)
#     manager2.add(dev4)

#     general_manager = CompositeElement("Grace", "General Manager", 15000)
#     general_manager.add(manager1)
#     general_manager.add(manager2)

#     print("=== Organization Structure ===")
#     general_manager.showDetails()

#     print("\nTotal Salary of all employees:", general_manager.get_salary())

# ## ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–≤–æ–¥–∞
# === Organization Structure ===
# General Manager: Grace, Salary: 15000
#     Manager: Eva, Salary: 8000
#         Developer: Alice, Salary: 5000
#         Developer: Bob, Salary: 4800
#     Manager: Frank, Salary: 8200
#         Developer: Charlie, Salary: 4700
#         Developer: Diana, Salary: 4900

# Total Salary of all employees: 50400

# ## üìå –ü–æ—è—Å–Ω–µ–Ω–∏–µ

# * `"    " * indent` –¥–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç—Å—Ç—É–ø—ã: `0` ‚Üí –Ω–µ—Ç –æ—Ç—Å—Ç—É–ø–∞, `1` ‚Üí 4 –ø—Ä–æ–±–µ–ª–∞, `2` ‚Üí 8 –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç.–¥.
# * –ú—ã –ø–µ—Ä–µ–¥–∞—ë–º `indent + 1` –∫–∞–∂–¥–æ–º—É –ø–æ–¥—á–∏–Ω—ë–Ω–Ω–æ–º—É, —á—Ç–æ–±—ã –æ–Ω –≤—ã–≤–æ–¥–∏–ª—Å—è **–≥–ª—É–±–∂–µ**.
# * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ–ø–µ—Ä—å —á–∏—Ç–∞–µ—Ç—Å—è –∫–∞–∫ **–∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–µ –¥–µ—Ä–µ–≤–æ** ‚Äî –æ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –¥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.

# –•–æ—á–µ—à—å ‚Äî –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ü–≤–µ—Ç, –Ω–æ–º–µ—Ä–∞ —É—Ä–æ–≤–Ω–µ–π –∏–ª–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (`‚îú‚îÄ‚îÄ`, `‚îî‚îÄ‚îÄ`).

# –û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å ‚Äî –∏ –Ω–µ—Ç, —Ç–µ–±–µ **–Ω–µ –Ω—É–∂–Ω–æ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –º–µ–Ω—è—Ç—å –≤–µ—Å—å –∫–æ–¥**, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É **—Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞**.

# –¢—ã —É–∂–µ –º–æ–∂–µ—à—å —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –ø–æ—Ç–æ–º—É —á—Ç–æ –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç (—Å–æ—Ç—Ä—É–¥–Ω–∏–∫) ‚Äî —ç—Ç–æ **–æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞**, –∏ —É –∫–∞–∂–¥–æ–≥–æ –µ—Å—Ç—å —Å–≤–æ—ë –ø–æ–ª–µ `salary`.

## ‚úÖ –ü—Ä–∏–º–µ—Ä: –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
# dev1 = LeafElement("Alice", "Developer", 5000)
# print("–ó–∞—Ä–ø–ª–∞—Ç–∞ Alice:", dev1.salary)  # üëâ –Ω–∞–ø—Ä—è–º—É—é

# manager1 = CompositeElement("Bob", "Manager", 8000)
# print("–ó–∞—Ä–ø–ª–∞—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ Bob:", manager1.salary)  # üëâ –Ω–∞–ø—Ä—è–º—É—é

# –ò–ª–∏, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ `get_salary()` –∏ **–Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å –ø–æ–¥—á–∏–Ω—ë–Ω–Ω—ã—Ö**, —Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å **–≤–æ—Ç —Ç–∞–∫–æ–π –º–µ—Ç–æ–¥** –≤ –æ–±–∞ –∫–ª–∞—Å—Å–∞:

## üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: —Å–¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ `get_own_salary()`

### –í `LeafElement`:
# def get_own_salary(self):
#     return self.salary

### –í `CompositeElement`:
# def get_own_salary(self):
    # return self.salary

# üìå –¢–æ–≥–¥–∞ —Ç—ã —Å–º–æ–∂–µ—à—å –≤—ã–∑—ã–≤–∞—Ç—å:
# print("–¢–æ–ª—å–∫–æ –∑–∞—Ä–ø–ª–∞—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ Bob:", manager1.get_own_salary())
# print("–¢–æ–ª—å–∫–æ –∑–∞—Ä–ø–ª–∞—Ç–∞ Alice:", dev1.get_own_salary())

## üîÅ –ê –µ—Å–ª–∏ —Ö–æ—á–µ—à—å **–∏ –æ–±—â–µ–µ, –∏ –ª–∏—á–Ω–æ–µ** ‚Äî —Ç—ã —É–∂–µ –≤—Å—ë —ç—Ç–æ —É–º–µ–µ—à—å
# * `get_salary()` ‚Äî –∑–∞—Ä–ø–ª–∞—Ç–∞ —Å —É—á—ë—Ç–æ–º –≤—Å–µ—Ö –ø–æ–¥—á–∏–Ω—ë–Ω–Ω—ã—Ö
# * `salary` –∏–ª–∏ `get_own_salary()` ‚Äî —Ç–æ–ª—å–∫–æ –µ–≥–æ –ª–∏—á–Ω–∞—è

## üß† –ü–æ—á–µ–º—É —ç—Ç–æ –≥–∏–±–∫–æ

# –≠—Ç–æ –∏ –µ—Å—Ç—å —Å–∏–ª–∞ –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞:
# * –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç ‚Äî –∫–∞–∫ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è "—è—á–µ–π–∫–∞"
# * —Ç—ã –º–æ–∂–µ—à—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–µ–º—É –Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ –≤ —Å–æ—Å—Ç–∞–≤–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏
# * –Ω–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É

# –¢—ã –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤–µ—Ä–Ω–æ –∑–∞–º–µ—Ç–∏–ª: –≤ –∑–∞–¥–∞–Ω–∏–∏ `__init__` –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç `*args`, –∞ —è –≤ —Ä–µ—à–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –±–æ–ª–µ–µ **—è–≤–Ω—ã–π –∏ —á–∏—Ç–∞–µ–º—ã–π —Å–ø–æ—Å–æ–±** ‚Äî —Å `name`, `position`, `salary`. –ù–æ –¥–∞–≤–∞–π —Ç–µ–ø–µ—Ä—å —Ä–∞–∑–±–µ—Ä—ë–º—Å—è, **—á—Ç–æ –¥–µ–ª–∞–µ—Ç `*args`**, **–º–æ–∂–Ω–æ –ª–∏ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å** –∏ **–≤ —á—ë–º –ø–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã**.

## ‚úÖ –ß—Ç–æ —Ç–∞–∫–æ–µ `*args`?
# –ö–æ–≥–¥–∞ —Ç—ã –ø–∏—à–µ—à—å:
# def __init__(self, *args):
# –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç: **–º–µ—Ç–æ–¥ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤**, –∏ –≤—Å–µ –æ–Ω–∏ –±—É–¥—É—Ç **—Å–æ–±—Ä–∞–Ω—ã –≤ –∫–æ—Ä—Ç–µ–∂ `args`**.
# –ü—Ä–∏–º–µ—Ä:
# obj = LeafElement("Alice", "Developer", 5000)
# –í–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–∞ `__init__` —Ç—ã –ø–æ–ª—É—á–∏—à—å:
# args = ("Alice", "Developer", 5000)
## ‚úÖ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å `*args` –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞?
# –¢—ã –º–æ–∂–µ—à—å **—Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –∏—Ö –≤—Ä—É—á–Ω—É—é**, –Ω–∞–ø—Ä–∏–º–µ—Ä:
# def __init__(self, *args):
#     self.name = args[0]
#     self.position = args[1]
#     self.salary = args[2]
# –ò –≤—Å—ë –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–∞–∫ –∂–µ, –∫–∞–∫ –≤ "–∫—Ä–∞—Å–∏–≤–æ–º" –≤–∞—Ä–∏–∞–Ω—Ç–µ `__init__(self, name, position, salary)`.
## üîç –¢–∞–∫ –≤ —á—ë–º —Ä–∞–∑–Ω–∏—Ü–∞?

# | –í–∞—Ä–∏–∞–Ω—Ç                        | –ü–ª—é—Å—ã                                                             | –ú–∏–Ω—É—Å—ã                                             |
# | -------------------------------| ------------------------------------------------------------------| -------------------------------------------------- |
# | `__init__(self, *args)`        | ‚úÖ –ì–∏–±–∫–æ—Å—Ç—å ‚Äî –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤       | ‚ùå –ù–µ–ª—å–∑—è –ø–æ–Ω—è—Ç—å –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –æ–∂–∏–¥–∞–µ—Ç—Å—è |
# | `__init__(self, name,
#               position, salary)` | ‚úÖ –Ø—Å–Ω–æ—Å—Ç—å ‚Äî –∫–æ–¥ —á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–æ—â–µ, IDE –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ | ‚ùå –ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å—Ç—Ä–æ–≥–æ –ø–æ –∏–º–µ–Ω–∞–º      |

## üîß –ö–æ–≥–¥–∞ —Å—Ç–æ–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `*args`?
# * –ö–æ–≥–¥–∞ —Ç—ã **–Ω–µ –∑–Ω–∞–µ—à—å –∑–∞—Ä–∞–Ω–µ–µ**, —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
# * –ò–ª–∏ –∫–æ–≥–¥–∞ —Ç—ã **–¥–µ–ª–∞–µ—à—å –±–∞–∑—É –ø–æ–¥ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω** (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–∞—Ä—Å–∏–Ω–≥ –∏–∑ —Ñ–∞–π–ª–∞).
# * –ò–ª–∏ –∫–æ–≥–¥–∞ —ç—Ç–æ **—è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ –≤ –∑–∞–¥–∞–Ω–∏–∏**, –∫–∞–∫ –≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –∫–∞–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç—ã —Å `*args`.

## ‚úÖ –ö–∞–∫ –≤—ã–≥–ª—è–¥–µ–ª –±—ã `LeafElement` —Å `*args`?
# class LeafElement:
#     def __init__(self, *args):
#         self.name = args[0]
#         self.position = args[1]
#         self.salary = args[2]

#     def get_salary(self):
#         return self.salary

#     def showDetails(self, indent=0):
#         print("    " * indent + f"{self.position}: {self.name}, Salary: {self.salary}")
# –ò —Ç—ã –≤—Å—ë —Ä–∞–≤–Ω–æ —Å–º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã —Ç–∞–∫:
# dev = LeafElement("Alice", "Developer", 5000)

## üìå –í—ã–≤–æ–¥
# * ‚úÖ –î–∞, —Ç—ã **–º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `*args`** ‚Äî –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ —Ç–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –∑–∞–¥–∞–Ω–∏–∏.
# * üîß –ù–æ –¥–ª—è **—Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –≤ –∫–æ–º–∞–Ω–¥–µ** –æ–±—ã—á–Ω–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç —è–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ‚Äî —ç—Ç–æ —á–∏—Ç–∞–µ–º–æ, –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ —É–¥–æ–±–Ω–æ –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ IDE.
