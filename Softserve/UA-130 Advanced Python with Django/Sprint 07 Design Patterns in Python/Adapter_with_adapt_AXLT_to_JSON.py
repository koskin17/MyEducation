# C–¥–µ–ª–∞–µ–º –∞–¥–∞–ø—Ç–∞—Ü–∏—é **XML ‚Üí JSON**, –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ, –∫–æ–≥–¥–∞:
# * –£ –Ω–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ **XML**;
# * –ù–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∏—Ö –≤ **–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏–ª–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ**, –≥–¥–µ –Ω—É–∂–µ–Ω **JSON**;
# * –ü—Ä–∏ —ç—Ç–æ–º **ML-–º–æ–¥–µ–ª—å –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–∞ –∑–Ω–∞—Ç—å –ø—Ä–æ XML**.

## ‚úÖ –ß—Ç–æ —Å–¥–µ–ª–∞–µ–º
# 1. –ö–ª–∞—Å—Å `XMLData`: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ XML.
# 2. –ö–ª–∞—Å—Å `JSONAdapter`: –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç XML ‚Üí JSON.
# 3. –ö–ª–∏–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, ML-—Å–∏—Å—Ç–µ–º–∞) –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ JSON.

## ‚úÖ üì¶ –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –∫–æ–¥ —Å –∞–¥–∞–ø—Ç–µ—Ä–æ–º XML ‚Üí JSON
import json
import xml.etree.ElementTree as ET

# –≠–º—É–ª—è—Ü–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ XML-–∏—Å—Ç–æ—á–Ω–∏–∫–∞
class XMLData:
    def get_xml_string(self):
        return """
        <vehicle>
            <type>Car</type>
            <brand>Ford</brand>
            <model>Focus</model>
            <year>2020</year>
        </vehicle>
        """

# –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è XML ‚Üí JSON
class JSONAdapter:
    def __init__(self, xml_source):
        self.xml_source = xml_source

    def get_data(self):
        xml_string = self.xml_source.get_xml_string()
        root = ET.fromstring(xml_string)  # –†–∞–∑–±–∏—Ä–∞–µ–º XML
        result = {}

        for child in root:
            result[child.tag] = child.text  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º XML-—ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä—å

        return json.dumps(result, indent=4)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON-—Å—Ç—Ä–æ–∫—É


# –ö–ª–∏–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π "—Ö–æ—á–µ—Ç —Ç–æ–ª—å–∫–æ JSON"
def client_code(data_provider):
    print("ML-–º–æ–¥—É–ª—å –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ:")
    print(data_provider.get_data())


# –¢–µ—Å—Ç
if __name__ == "__main__":
    xml_data = XMLData()
    adapter = JSONAdapter(xml_data)

    client_code(adapter)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä –≤–º–µ—Å—Ç–æ XML –Ω–∞–ø—Ä—è–º—É—é

## üîç –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ —à–∞–≥–∞–º

### 1. `XMLData.get_data()`
# –≠—Ç–æ –≤–Ω–µ—à–Ω–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ (–∫–∞–∫ API), –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–¥–∞—ë—Ç **—Å—Ç—Ä–æ–∫—É XML**:
# <vehicle>
#     <type>Car</type>
#     <brand>Ford</brand>
#     <model>Focus</model>
#     <year>2020</year>
# </vehicle>

### 2. `JSONAdapter`
# –≠—Ç–æ –∏ –µ—Å—Ç—å **–Ω–∞—à –∞–¥–∞–ø—Ç–µ—Ä**.
# root = ET.fromstring(xml_string)
# * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º XML-—Å—Ç—Ä–æ–∫—É –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É XML-—ç–ª–µ–º–µ–Ω—Ç–æ–≤ (`ElementTree`).
# for child in root:
#     result[child.tag] = child.text

# * –ü—Ä–æ–±–µ–≥–∞–µ–º –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–µ–≥—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, `<type>`, `<brand>`) –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –∫–∞–∫ –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ –≤ `dict`.
# return json.dumps(result, indent=4)
# * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ –∫—Ä–∞—Å–∏–≤—É—é **JSON-—Å—Ç—Ä–æ–∫—É**.

### 3. `client_code(adapter)`
# –≠—Ç–æ—Ç –∫–æ–¥ –Ω–µ –∑–Ω–∞–µ—Ç, —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ –±—ã–ª XML. –û–Ω –≤—ã–∑—ã–≤–∞–µ—Ç `get_data()` –∏ –ø–æ–ª—É—á–∞–µ—Ç —á–∏—Å—Ç—ã–π JSON:
# {
#     "type": "Car",
#     "brand": "Ford",
#     "model": "Focus",
#     "year": "2020"
# }

## üß† –ß—Ç–æ –º—ã –¥–æ–∫–∞–∑–∞–ª–∏
# | –ß—Ç–æ –±—ã–ª–æ                   | –ß—Ç–æ —Å—Ç–∞–ª–æ                       |
# | -------------------------- | ------------------------------- |
# | –î–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ XML      | ML-—Å–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç JSON         |
# | –ü—Ä–æ–±–ª–µ–º–∞ ‚Äî –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å | –†–µ—à–µ–Ω–∏–µ ‚Äî `Adapter`             |
# | –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å               | ML-–∫–ª–∏–µ–Ω—Ç –¥–∞–∂–µ –Ω–µ –∑–Ω–∞–µ—Ç –ø—Ä–æ XML |

# –î–∞–≤–∞–π —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ **–ø–æ–¥—Ä–æ–±–Ω–æ, –Ω–æ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏**, —á—Ç–æ —Ç–∞–∫–æ–µ `xml.etree.ElementTree` –≤ Python, **–∑–∞—á–µ–º –æ–Ω –Ω—É–∂–µ–Ω**, –∏ **–∫–∞–∫ –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ**.

# ---

# ## üß© –ß—Ç–æ —Ç–∞–∫–æ–µ `xml.etree.ElementTree`?

# `xml.etree.ElementTree` ‚Äî —ç—Ç–æ **–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å Python**, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç **—Ä–∞–±–æ—Ç–∞—Ç—å —Å XML-—Ñ–∞–π–ª–∞–º–∏ –∏ —Å—Ç—Ä–æ–∫–∞–º–∏**.

# ### XML ‚Äî —ç—Ç–æ:

# –§–æ—Ä–º–∞—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –ø–æ—Ö–æ–∂–∏–π –Ω–∞ HTML, –Ω–∞–ø—Ä–∏–º–µ—Ä:

# ```xml
# <vehicle>
#     <type>Car</type>
#     <brand>Ford</brand>
#     <year>2020</year>
# </vehicle>
# ```

# ---

# ## ‚úÖ –ó–∞—á–µ–º –Ω—É–∂–µ–Ω `ElementTree`?

# –û–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç:

# * üìñ —á–∏—Ç–∞—Ç—å XML (–∏–∑ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Ñ–∞–π–ª–∞);
# * üîç –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω—É–∂–Ω—ã–µ —Ç–µ–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `<brand>`);
# * ‚úèÔ∏è –∏–∑–º–µ–Ω—è—Ç—å XML-—Å—Ç—Ä—É–∫—Ç—É—Ä—É;
# * üìù —Å–æ–∑–¥–∞–≤–∞—Ç—å XML ¬´—Å –Ω—É–ª—è¬ª;
# * üíæ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ —Ñ–∞–π–ª.

# ---

# ## üîß –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å—ã

# | –ù–∞–∑–≤–∞–Ω–∏–µ                     | –ß—Ç–æ –¥–µ–ª–∞–µ—Ç                                  |
# | ---------------------------- | ------------------------------------------- |
# | `ET.fromstring(xml_str)`     | –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç XML-—Å—Ç—Ä–æ–∫—É –≤ –¥–µ—Ä–µ–≤–æ (`Element`) |
# | `ET.parse(filename)`         | –ó–∞–≥—Ä—É–∂–∞–µ—Ç XML –∏–∑ —Ñ–∞–π–ª–∞                      |
# | `ET.Element(tag)`            | –°–æ–∑–¥–∞—ë—Ç —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–µ–≥–æ–º                     |
# | `ET.SubElement(parent, tag)` | –î–æ–±–∞–≤–ª—è–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Ç–µ–≥                     |
# | `ET.tostring(element)`       | –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ XML-—Å—Ç—Ä–æ–∫—É            |
# | `element.find(tag)`          | –ù–∞—Ö–æ–¥–∏—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç                   |
# | `element.findall(tag)`       | –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º          |

# ---

# ## üîç –ü—Ä–∏–º–µ—Ä —Ä–∞–∑–±–æ—Ä–∞ XML

# ```python
# import xml.etree.ElementTree as ET

# xml_data = """
# <person>
#     <name>John</name>
#     <age>30</age>
# </person>
# """

# # –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É
# root = ET.fromstring(xml_data)

# print(root.tag)  # person
# print(root.find("name").text)  # John
# print(root.find("age").text)   # 30
# ```

# ---

# ## üèó –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è XML

# ```python
# import xml.etree.ElementTree as ET

# # –°–æ–∑–¥–∞—ë–º –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç
# person = ET.Element("person")

# # –í–ª–æ–∂–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
# name = ET.SubElement(person, "name")
# name.text = "Alice"

# age = ET.SubElement(person, "age")
# age.text = "28"

# # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
# xml_str = ET.tostring(person, encoding='unicode')
# print(xml_str)
# ```

# üì§ –í—ã–≤–æ–¥:

# ```xml
# <person><name>Alice</name><age>28</age></person>
# ```

# ---

# ## üíæ –ü—Ä–∏–º–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ XML –∏–∑ —Ñ–∞–π–ª–∞

# ```python
# tree = ET.parse("data.xml")  # –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç XML-—Ñ–∞–π–ª
# root = tree.getroot()

# for child in root:
#     print(child.tag, child.text)
# ```

# ---

# ## üß† –í —á—ë–º —Å–∏–ª–∞ `ElementTree`?

# * –í—Å—Ç—Ä–æ–µ–Ω –≤ Python ‚Äî –Ω–∏—á–µ–≥–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.
# * –û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π ‚Äî –ª–µ–≥–∫–æ –æ—Å–≤–æ–∏—Ç—å –Ω–æ–≤–∏—á–∫—É.
# * –£–º–µ–µ—Ç –∏ —á–∏—Ç–∞—Ç—å, –∏ –ø–∏—Å–∞—Ç—å, –∏ –∏–∑–º–µ–Ω—è—Ç—å XML.

# ---

# –•–æ—á–µ—à—å ‚Äî –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å, –∫–∞–∫ —Å –ø–æ–º–æ—â—å—é `ElementTree`:

# * —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥–∏,
# * –¥–æ–±–∞–≤–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç—ã,
# * —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å XML –≤ —Ñ–∞–π–ª –∫—Ä–∞—Å–∏–≤–æ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏.
