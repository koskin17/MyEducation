# Nicky and Dev work in a company where each member is given his income in the form of points. On Nicky's birthday, Dev decided to give some of his points as a gift. The number of points Dev is gifting is the total number of visible zeros visible in the string representation of the N points he received this month.

# Let's say that Nicky got M points from Dev. By the company law, if M is even and greater than 0, Nicky must give one point to the company. If M is odd, the company gives Nicky one additional point.

# Given the number of points N Dev received this month, calculate the number of points Nicky will receive as a gift and return this number in its binary form.

# Note: visible zeros are calculated as follows:

# 0, 6 and 9 contain 1 visible zero each;
# 8 contains 2 visible zeros;
# other digits do not contain visible zeros.
# Example

# For N = "565", the output should be
# Cipher_Zeroes(N) = 10.

# There's one visible zero in "565". Since one is odd, the company will give an additional point, so Nicky will receive 2 points.
# 210 = 102, so the output should be 10.

# Input/Output

# [input] string N

# The number of points Dev received this month.

# Constraints:
# 1 ‚â§ N ‚â§ 101000.

# [output] integer

# The number of points Nicky will receive in the binary representation.

# –ù–∏–∫–∏ –∏ –î–µ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –∫–æ–º–ø–∞–Ω–∏–∏, –≥–¥–µ –∫–∞–∂–¥—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–π –¥–æ—Ö–æ–¥ –≤ –≤–∏–¥–µ –±–∞–ª–ª–æ–≤. –í –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ù–∏–∫–∏ –î–µ–≤ —Ä–µ—à–∏–ª –ø–æ–¥–∞—Ä–∏—Ç—å —á–∞—Å—Ç—å —Å–≤–æ–∏—Ö –±–∞–ª–ª–æ–≤. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –î–µ–≤ –¥–∞—Ä–∏—Ç, - —ç—Ç–æ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö –Ω—É–ª–µ–π –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ N –±–∞–ª–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –ø–æ–ª—É—á–∏–ª –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.

# –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –ù–∏–∫–∏ –ø–æ–ª—É—á–∏–ª –æ—Ç –î—ç–≤–∞ M –±–∞–ª–ª–æ–≤. –ü–æ –∑–∞–∫–æ–Ω—É –∫–æ–º–ø–∞–Ω–∏–∏, –µ—Å–ª–∏ M —á–µ—Ç–Ω–æ–µ –∏ –±–æ–ª—å—à–µ 0, –ù–∏–∫–∏ –¥–æ–ª–∂–µ–Ω –æ—Ç–¥–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏ –æ–¥–Ω–æ –æ—á–∫–æ. –ï—Å–ª–∏ M –Ω–µ—á–µ—Ç–Ω–æ–µ, –∫–æ–º–ø–∞–Ω–∏—è –¥–∞—Ä–∏—Ç –ù–∏–∫–∏ –µ—â–µ –æ–¥–Ω–æ –æ—á–∫–æ.

# –£—á–∏—Ç—ã–≤–∞—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ N Dev, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ, –≤—ã—á–∏—Å–ª–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ù–∏–∫–∏ –ø–æ–ª—É—á–∏—Ç –≤ –ø–æ–¥–∞—Ä–æ–∫, –∏ –≤–µ—Ä–Ω–∏—Ç–µ —ç—Ç–æ —á–∏—Å–ª–æ –≤ –¥–≤–æ–∏—á–Ω–æ–º –≤–∏–¥–µ.

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≤–∏–¥–∏–º—ã–µ –Ω—É–ª–∏ –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:

# 0, 6 –∏ 9 —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ 1 –≤–∏–¥–∏–º–æ–º—É –Ω—É–ª—é; 8 —Å–æ–¥–µ—Ä–∂–∏—Ç 2 –≤–∏–¥–∏–º—ã—Ö –Ω—É–ª—è; –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –≤–∏–¥–∏–º—ã—Ö –Ω—É–ª–µ–π.
# –ü—Ä–∏–º–µ—Ä –î–ª—è N = "565" –≤—ã–≤–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Cipher_Zeroes(N) = 10.

# –í —á–∏—Å–ª–µ "565" –µ—Å—Ç—å –æ–¥–∏–Ω –≤–∏–¥–∏–º—ã–π –Ω–æ–ª—å. –ü–æ—Å–∫–æ–ª—å–∫—É –µ–¥–∏–Ω–∏—Ü–∞ –Ω–µ—á–µ—Ç–Ω–∞—è, –∫–æ–º–ø–∞–Ω–∏—è –¥–∞—Å—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ—á–∫–æ, –ø–æ—ç—Ç–æ–º—É –ù–∏–∫–∏ –ø–æ–ª—É—á–∏—Ç 2 –æ—á–∫–∞.
# 210 = 102, –ø–æ—ç—Ç–æ–º—É –Ω–∞ –≤—ã—Ö–æ–¥–µ –¥–æ–ª–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å—Å—è 10.

# –í–≤–æ–¥/–≤—ã–≤–æ–¥ [input] string N –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö Dev –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
# 1 ‚â§ N ‚â§ 101000.

# [output] —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∏—Ç –ù–∏–∫–∏ –≤ –¥–≤–æ–∏—á–Ω–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏.

def Cipher_Zeroes(N):
    zero_count = sum({'0': 1, '6': 1, '9': 1, '8': 2}.get(digit, 0) for digit in str(N)) # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø–µ—Ä–µ–≤–æ–¥ –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—É—é —Å—Ç—Ä–æ–∫—É –≤ str –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ —á–∏—Å–ª–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ int

    # –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
    if zero_count > 0 and zero_count % 2 == 0:
        zero_count -= 1
    elif zero_count % 2 == 1:
        zero_count += 1
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    return bin(zero_count)[2:]

# –ü—Ä–∏–º–µ—Ä—ã:
print(Cipher_Zeroes("565"))  # –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: "10"
print(Cipher_Zeroes("8096")) # –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: "100"
print(Cipher_Zeroes("888"))  # –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: "110"

# ‚ú® –†–∞–∑–±–æ—Ä –∫–æ–¥–∞:
# 1Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å (dict), —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö –Ω—É–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞.
# 2Ô∏è‚É£ –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É –ø–æ –≤—Å–µ–º —Ü–∏—Ñ—Ä–∞–º –≤ N.
# 3Ô∏è‚É£ –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Å–ª–æ–≤–∏—è –∫–æ–º–ø–∞–Ω–∏–∏.
# 4Ô∏è‚É£ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∏–Ω–∞—Ä–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å –ø–æ–º–æ—â—å—é bin(M)[2:].
# –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –¥–∞–∂–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π N, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏–Ω–µ–π–Ω—ã–π –ø—Ä–æ—Ö–æ–¥ –ø–æ —Å—Ç—Ä–æ–∫–µ! üöÄ

