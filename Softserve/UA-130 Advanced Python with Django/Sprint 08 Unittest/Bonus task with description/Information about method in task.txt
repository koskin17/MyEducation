## ‚úÖ 1. `field` –∑ –º–æ–¥—É–ª—è `dataclasses`

### –©–æ —Ç–∞–∫–µ `dataclasses`?
–¶–µ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –º–æ–¥—É–ª—å —É Python, —è–∫–∏–π –¥–æ–∑–≤–æ–ª—è—î —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∫–ª–∞—Å–∏ –∑ –º—ñ–Ω—ñ–º—É–º–æ–º –∫–æ–¥—É ‚Äî —ñ–¥–µ–∞–ª—å–Ω–æ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö. –¢–∞–∫–∏–π –∫–ª–∞—Å –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è **data class**.

### –ù–∞–≤—ñ—â–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω `field`?
–§—É–Ω–∫—Ü—ñ—è `field()` –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ `@dataclass`, —â–æ–± –¥–µ—Ç–∞–ª—å–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ **–ø–æ–≤–µ–¥—ñ–Ω–∫—É –æ–∫—Ä–µ–º–∏—Ö –ø–æ–ª—ñ–≤** (–∑–º—ñ–Ω–Ω–∏—Ö) ‚Äî –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:
* –∑–∞–¥–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º,
* –∞–±–æ –∑—Ä–æ–±–∏—Ç–∏ –ø–æ–ª–µ ‚Äú–≤–∏–∫–ª—é—á–µ–Ω–∏–º‚Äù —ñ–∑ `__repr__`,
* –∞–±–æ –∑–∞–±–æ—Ä–æ–Ω–∏—Ç–∏ –π–æ–≥–æ –ø–µ—Ä–µ–¥–∞—á—É –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±‚Äô—î–∫—Ç–∞,
* –∞–±–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –π–æ–≥–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `id`).

### –ü—Ä–∏–∫–ª–∞–¥:
from dataclasses import dataclass, field
from typing import List
import uuid

@dataclass
class Product:
    name: str
    price: float
    tags: List[str] = field(default_factory=list)  # –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π —Å–ø–∏—Å–æ–∫
    id: str = field(default_factory=lambda: str(uuid.uuid4()), init=False)  # —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID, –Ω–µ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è

# –°—Ç–≤–æ—Ä–∏–º–æ –æ–±'—î–∫—Ç
p = Product(name="–ù–æ—É—Ç–±—É–∫", price=1500.0)
print(p)

### –©–æ –±—É–¥–µ –≤–∏–≤–µ–¥–µ–Ω–æ?
Product(name='–ù–æ—É—Ç–±—É–∫', price=1500.0, tags=[], id='1b2b3c4d-...')

> üîç `default_factory` —á–∞—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å –∞–±–æ —Å–∫–ª–∞–¥–Ω–∏—Ö –æ–±‚Äô—î–∫—Ç—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Å–ø–∏—Å–æ–∫, UUID —Ç–æ—â–æ). –ë–µ–∑ –Ω—å–æ–≥–æ –≤—Å—ñ –æ–±'—î–∫—Ç–∏ –º–∞–ª–∏ –± **–æ–¥–∏–Ω —ñ —Ç–æ–π —Å–∞–º–∏–π** —Å–ø–∏—Å–æ–∫!

–î—É–∂–µ —Ö–æ—Ä–æ—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è! –†–æ–∑–±–µ—Ä–µ–º–æ —ó—Ö –ø–æ —á–µ—Ä–∑—ñ, –ø—Ä–æ—Å—Ç–æ —ñ –≥–ª–∏–±–æ–∫–æ, —â–æ–± —Ç–∏ –¥—ñ–π—Å–Ω–æ **–∑—Ä–æ–∑—É–º—ñ–≤, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∞–º‚Äô—è—Ç–∞–≤**. –ü–æ–≥–Ω–∞–ª–∏ üí™

---

## ‚úÖ **1. –©–æ —Ç–∞–∫–µ `default_factory` –≤ `field()`?**

### üìå –°—É—Ç—å:

`default_factory` ‚Äî —Ü–µ **–ø–∞—Ä–∞–º–µ—Ç—Ä —Ñ—É–Ω–∫—Ü—ñ—ó `field()` –∑ –º–æ–¥—É–ª—è `dataclasses`**, —è–∫–∏–π –¥–æ–∑–≤–æ–ª—è—î –≤–∫–∞–∑–∞—Ç–∏ **—Ñ—É–Ω–∫—Ü—ñ—é, —â–æ –±—É–¥–µ –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º** –¥–ª—è –ø–æ–ª—è.

### üß† –í–∞–∂–ª–∏–≤–æ:

* –¶–µ **–Ω–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞** ‚Äî —Ü–µ **–æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç** –≤ `field()`.
* –í—ñ–Ω –ø–æ—Ç—Ä—ñ–±–µ–Ω —Ç–æ–¥—ñ, –∫–æ–ª–∏ **–∑–≤–∏—á–∞–π–Ω–µ `default=...` –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å**, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–ª—è –∑–º—ñ–Ω–Ω–∏—Ö —Ç–∏–ø—É `list`, `dict`, `set`, –∞–±–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —á–æ–≥–æ—Å—å –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ (—Ç–∏–ø—É `uuid4()`).

---

### üîç –ß–æ–º—É –Ω–µ –º–æ–∂–Ω–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç–∏ `default=[]`?

```python
@dataclass
class BadExample:
    items: List[int] = field(default=[])  # ‚ùå –ü–æ–≥–∞–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞!
```

–¢—É—Ç **—É—Å—ñ –æ–±'—î–∫—Ç–∏** –∫–ª–∞—Å—É –±—É–¥—É—Ç—å –º–∞—Ç–∏ **–æ–¥–∏–Ω —ñ —Ç–æ–π —Å–∞–º–∏–π —Å–ø–∏—Å–æ–∫**! –¶–µ –º–æ–∂–µ –ø—Ä–∏–∑–≤–µ—Å—Ç–∏ –¥–æ –¥—É–∂–µ –¥–∏–≤–Ω–∏—Ö –±–∞–≥—ñ–≤ üêû

---

### ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å–ø–æ—Å—ñ–±:

```python
from dataclasses import dataclass, field
from typing import List

@dataclass
class GoodExample:
    items: List[int] = field(default_factory=list)  # ‚úÖ –ö–æ–∂–Ω–æ–º—É –æ–±'—î–∫—Ç—É ‚Äî –Ω–æ–≤–∏–π —Å–ø–∏—Å–æ–∫
```

> üîß `default_factory=list` ‚Äî —Ü–µ —è–∫ –Ω–∞–ø–∏—Å–∞—Ç–∏: *"–ö–æ–ª–∏ —Å—Ç–≤–æ—Ä—é—î—à –Ω–æ–≤–∏–π –æ–±'—î–∫—Ç ‚Äî –≤–∏–∫–ª–∏—á `list()` —ñ –ø–æ–∫–ª–∞–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É –ø–æ–ª–µ."*

---

### üß™ –Ü–Ω—à—ñ –ø—Ä–∏–∫–ª–∞–¥–∏ `default_factory`:

```python
from dataclasses import dataclass, field
import uuid

@dataclass
class Product:
    id: str = field(default_factory=lambda: str(uuid.uuid4()))
```

> –¢—É—Ç `lambda: str(uuid.uuid4())` ‚Äî —Ü–µ –∞–Ω–æ–Ω—ñ–º–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫—É –±—É–¥–µ –≤–∏–∫–ª–∏–∫–∞–Ω–æ, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ **—É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID** –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ –æ–±‚Äô—î–∫—Ç–∞.

## ‚úÖ 2. –ú–æ–¥—É–ª—å `uuid`
### –©–æ —Ü–µ —Ç–∞–∫–µ?
`uuid` ‚Äî —Ü–µ –º–æ–¥—É–ª—å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è **—É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä—ñ–≤** (UUID ‚Äî Universally Unique Identifier). –ß–∞—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑–∞–º—ñ—Å—Ç—å –∞–≤—Ç–æ—ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω–∏—Ö —á–∏—Å–µ–ª, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ —â–æ—Å—å —É–Ω—ñ–∫–∞–ª—å–Ω–µ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: `id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞`, `id —Ç–æ–≤–∞—Ä—É`, `—Ç–æ–∫–µ–Ω`.

### –ü—Ä–æ—Å—Ç–∏–π –ø—Ä–∏–∫–ª–∞–¥:
import uuid

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞
unique_id = uuid.uuid4()

print(unique_id)
print(str(unique_id))  # –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤ —Ä—è–¥–æ–∫

### –©–æ —Ç–∞–∫–µ `uuid4()`?
–¶–µ –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó UUID, —è–∫–∏–π –±–∞–∑—É—î—Ç—å—Å—è **–Ω–∞ –≤–∏–ø–∞–¥–∫–æ–≤–æ—Å—Ç—ñ**. –í—ñ–Ω –Ω–∞–π–±—ñ–ª—å—à –ø–æ–ø—É–ª—è—Ä–Ω–∏–π.

### üîç –©–æ —Ç–∞–∫–µ `uuid`?
–¶–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –º–æ–¥—É–ª—å Python –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è **—É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä—ñ–≤** ‚Äî UUID (Universally Unique IDentifier).

### üì¶ –Ø–∫—ñ —î –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó UUID?
import uuid

uuid1()  # –∑–∞—Å–Ω–æ–≤–∞–Ω–∏–π –Ω–∞ —á–∞—Å—É + MAC-–∞–¥—Ä–µ—Å—ñ –∫–æ–º–ø'—é—Ç–µ—Ä–∞
uuid3()  # —Ö–µ—à—É–≤–∞–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ–º–µ–Ω—ñ (MD5)
uuid4()  # –≤–∏–ø–∞–¥–∫–æ–≤–∏–π UUID ‚úÖ
uuid5()  # —Ö–µ—à—É–≤–∞–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ–º–µ–Ω—ñ (SHA-1)

### ‚úÖ `uuid4()` ‚Äî –Ω–∞–π—á–∞—Å—Ç—ñ—à–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è, –±–æ –≤—ñ–Ω:
* –≥–µ–Ω–µ—Ä—É—î **–≤–∏–ø–∞–¥–∫–æ–≤–∏–π UUID**;
* –º–∞–π–∂–µ –Ω–µ–º–æ–∂–ª–∏–≤–æ, —â–æ–± 2 UUID –∑–±—ñ–≥–ª–∏—Å—å (—ñ–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å ‚âà 0);
* –Ω–µ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –∫–æ–º–ø'—é—Ç–µ—Ä–∞ —á–∏ —ñ–º–µ–Ω—ñ.

### ‚ùì –ß–∏ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤ `uuid4()`?

‚ùå **–ù—ñ, `uuid4()` –Ω–µ –ø—Ä–∏–π–º–∞—î –ø–∞—Ä–∞–º–µ—Ç—Ä–∏.**
–¶–µ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ **–≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —á–∏—Å–µ–ª** —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —É–Ω—ñ–∫–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è. –¢–∏ –Ω–µ –º–æ–∂–µ—à –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —ó—ó –Ω–∞ "–¥—ñ–∞–ø–∞–∑–æ–Ω" —á–∏ "–ø—Ä–µ—Ñ—ñ–∫—Å".

–ê–ª–µ —Ç–∏ –º–æ–∂–µ—à **—Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–≤–æ—é —Ñ—É–Ω–∫—Ü—ñ—é** –Ω–∞ –±–∞–∑—ñ `uuid4()`, —è–∫–∞, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–æ–¥–∞—Å—Ç—å –ø—Ä–µ—Ñ—ñ–∫—Å –∞–±–æ –º–æ–¥–∏—Ñ—ñ–∫—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
def custom_uuid(prefix: str = "user") -> str:
    return f"{prefix}_{uuid.uuid4()}"

print(custom_uuid())           # user_5123a94b-...
print(custom_uuid("order"))    # order_d0cf823e-...

## üß† –ü—ñ–¥—Å—É–º–æ–∫

| –¢–µ–º–∞                  | –ü–æ—è—Å–Ω–µ–Ω–Ω—è                                      | –ü—Ä–∏–∫–ª–∞–¥                        |
| --------------------- | ---------------------------------------------- | ------------------------------ |
| `default_factory`     | –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –≥–µ–Ω–µ—Ä—É—î –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º | `field(default_factory=list)`  |
| –ß–æ–º—É –Ω–µ `default=[]`? | –ë–æ –≤—Å—ñ –æ–±'—î–∫—Ç–∏ –±—É–¥—É—Ç—å –¥—ñ–ª–∏—Ç–∏ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫       | –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π `default_factory` |
| `uuid4()`             | –ì–µ–Ω–µ—Ä—É—î –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π UUID             | `uuid.uuid4()`                 |
| –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤ `uuid4()` | ‚ùå –ù–µ–º–∞—î                                        | –°—Ç–≤–æ—Ä–∏ —Å–≤–æ—é –æ–±–≥–æ—Ä—Ç–∫—É-—Ñ—É–Ω–∫—Ü—ñ—é  |

## ‚úÖ 3. `List` —ñ `Optional` –∑ –º–æ–¥—É–ª—è `typing`
### –ú–æ–¥—É–ª—å `typing`
–¶–µ –º–æ–¥—É–ª—å –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è **—Ç–∏–ø—ñ–≤ –∑–º—ñ–Ω–Ω–∏—Ö** —É Python (—Ç–∏–ø—ñ–∑–∞—Ü—ñ—è). Python ‚Äî –¥–∏–Ω–∞–º—ñ—á–Ω–∞ –º–æ–≤–∞, –∞–ª–µ –∑ `typing` —Ç–∏ –º–æ–∂–µ—à –ø—ñ–¥–∫–∞–∑—É–≤–∞—Ç–∏, —è–∫—ñ —Ç–∏–ø–∏ –æ—á—ñ–∫—É—é—Ç—å—Å—è. –¶–µ –ø–æ–∫—Ä–∞—â—É—î —á–∏—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å —ñ –¥–æ–ø–æ–º–∞–≥–∞—î –≤–∏—è–≤–ª—è—Ç–∏ –ø–æ–º–∏–ª–∫–∏ —â–µ –¥–æ –∑–∞–ø—É—Å–∫—É –ø—Ä–æ–≥—Ä–∞–º–∏.

### üîπ `List`
–ü–æ–∑–Ω–∞—á–∞—î, —â–æ –∑–º—ñ–Ω–Ω–∞ ‚Äî —Ü–µ —Å–ø–∏—Å–æ–∫ –ø–µ–≤–Ω–æ–≥–æ —Ç–∏–ø—É.
from typing import List

def print_names(names: List[str]) -> None:
    for name in names:
        print(name)

print_names(["–ê–Ω—è", "–ë–æ–≥–¥–∞–Ω", "–Æ—Ä–∞"])

–¢—É—Ç `List[str]` –æ–∑–Ω–∞—á–∞—î "—Å–ø–∏—Å–æ–∫ —Ä—è–¥–∫—ñ–≤".

### üîπ `Optional`
–ü–æ–∑–Ω–∞—á–∞—î, —â–æ **–∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–∂–µ –±—É—Ç–∏ –∞–±–æ –ø–µ–≤–Ω–æ–≥–æ —Ç–∏–ø—É, –∞–±–æ `None`**.
from typing import Optional

def greet(name: Optional[str]) -> None:
    if name:
        print(f"–ü—Ä–∏–≤—ñ—Ç, {name}!")
    else:
        print("–ü—Ä–∏–≤—ñ—Ç, –Ω–µ–∑–Ω–∞–π–æ–º—Ü—é!")

greet("–û–ª—è")
greet(None)

> `Optional[str]` == `Union[str, None]` ‚Äî —Ç–æ–±—Ç–æ, –∞–±–æ —Ä—è–¥–æ–∫, –∞–±–æ –Ω—ñ—á–æ–≥–æ.

## ‚úÖ –ü—ñ–¥—Å—É–º–æ–∫
| –ö–æ–Ω—Ü–µ–ø—Ç    | –î–ª—è —á–æ–≥–æ?                              | –ü—Ä–∏–∫–ª–∞–¥                       |
| ---------- | -------------------------------------- | ----------------------------- |
| `field()`  | –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–ª—ñ–≤ —É `@dataclass`      | `field(default_factory=list)` |
| `uuid`     | –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö ID                | `uuid.uuid4()`                |
| `List`     | –¢–∏–ø—ñ–∑–∞—Ü—ñ—è —Å–ø–∏—Å–∫—ñ–≤                      | `List[int]`, `List[str]`      |
| `Optional` | –ó–Ω–∞—á–µ–Ω–Ω—è –º–æ–∂–µ –±—É—Ç–∏ –∞–±–æ —Ç–∏–ø–æ–º, –∞–±–æ None | `Optional[str]`               |
