# 1. Create users and subjects data from files
# get_subjects_from_json(subjects_json) -> List[Subject]
# get_users_with_grades(users_json, subjects_json, grades_json) -> List[User]

# 2. Simulate working with the application
# method User.create_user(username, password, role) creates user
# method user.add_score_for_subject(subject:Subject, score: Score) adds score for subject
# function add_user(user, users) adds user to users (in case of uniqueness username)
# function add_subject(subject, subjects) adds subject to subjects (in case of uniqueness title)
# function get_grades_for_user(username:str, user:User, users:list) returns all grades for the user with username (only own grades or for mentor)

# 3. Rewrite the old json-files with new ones
# users_to_json(users, json_file)
# subjects_to_json(subjects, json_file)
# grades_to_json(users, subjects, json_file)

## üß© –ó–∞–≤–¥–∞–Ω–Ω—è –∫–æ—Ä–æ—Ç–∫–æ:
# 1. –ü—Ä–æ—á–∏—Ç–∞—Ç–∏ –∑ `JSON` —Ñ–∞–π–ª—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, –ø—Ä–µ–¥–º–µ—Ç–∏, –æ—Ü—ñ–Ω–∫–∏.
# 2. –ú–∞—Ç–∏ –ª–æ–≥—ñ–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç—É, –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –æ—Ü—ñ–Ω–∫–∏.
# 3. –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ—Ü—ñ–Ω–∫–∏ —É—á–Ω—è.
# 4. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç–∏ JSON-—Ñ–∞–π–ª–∏ –Ω–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏.

## ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–¥—É

### üî∏ Enum –¥–ª—è —Ä–æ–ª–µ–π
# class Role(Enum):
#     TRAINEE = 0
#     MENTOR = 1

# –©–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –º–∞–≥—ñ—á–Ω–∏—Ö —á–∏—Å–µ–ª. `Role.TRAINEE` –∫—Ä–∞—â–µ, –Ω—ñ–∂ –ø—Ä–æ—Å—Ç–æ `0`.

### üî∏ –ú–æ–¥–µ–ª—å –ø—Ä–µ–¥–º–µ—Ç—É, –æ—Ü—ñ–Ω–∫–∏ —Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
# @dataclass
# class Subject:
#     title: str
#     id: str = field(default_factory=lambda: uuid4().hex)

# @dataclass
# class Score:
#     value: str

# * `Score` ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±–≥–æ—Ä—Ç–∫–∞ –Ω–∞–¥ –æ—Ü—ñ–Ω–∫–æ—é (`A`, `B`, `C`, ...).
# * `Subject` –º–∞—î `title` —Ç–∞ `id`.

# @dataclass
# class User:
#     username: str
#     password: str
#     role: Role
#     id: str = field(default_factory=lambda: uuid4().hex)
#     grades: dict = field(default_factory=dict)  # subject_id ‚Üí Score

# –£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —î –º–µ—Ç–æ–¥:
# def add_score_for_subject(self, subject: Subject, score: Score):
#     self.grades[subject.id] = score

### üî∏ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
# @classmethod
# def create_user(cls, username, password, role):
#     return cls(username=username, password=password, role=Role(role))

# `classmethod` –∑—Ä—É—á–Ω–∏–π –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∑ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è–º —Ç–∏–ø—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, role ‚Üí Enum).

### üî∏ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ JSON
# def get_subjects_from_json(json_file: str) -> List[Subject]:
#     ...
# def get_users_with_grades(users_json, subjects_json, grades_json) -> List[User]:
#     ...
# 1. –°—Ç–≤–æ—Ä—é—î–º–æ `map` –∑ `subjects` —ñ `users` –∑–∞ `id`.
# 2. –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É –≤ `grades.json` –∑–Ω–∞—Ö–æ–¥–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –¥–æ–¥–∞—î–º–æ –π–æ–º—É –æ—Ü—ñ–Ω–∫—É.

### üî∏ –î–æ–¥–∞–≤–∞–Ω–Ω—è —É —Å–ø–∏—Å–æ–∫ (—É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å):
# def add_user(new_user: User, users: List[User]):
#     if any(u.username == new_user.username for u in users):
#         raise ValueError("Username already exists")
#     users.append(new_user)

# –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç—ñ–≤.

### üî∏ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Ü—ñ–Ω–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
# def get_grades_for_user(username: str, current_user: User, users: List[User]) -> dict:
#     if current_user.role == Role.MENTOR:
#         ...
#     else:
#         if current_user.username != username:
#             raise PermissionError("Access denied")

# * –£—á–µ–Ω—å –º–æ–∂–µ –±–∞—á–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Å–≤–æ—ó –æ—Ü—ñ–Ω–∫–∏.
# * –ú–µ–Ω—Ç–æ—Ä ‚Äî –±—É–¥—å-—è–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

### üî∏ –ó–∞–ø–∏—Å —É JSON
# def users_to_json(users: List[User], json_file: str): ...
# def subjects_to_json(subjects: List[Subject], json_file: str): ...
# def grades_to_json(users: List[User], subjects: List[Subject], json_file: str): ...

## ‚ùó –í–∞–∂–ª–∏–≤–æ
# * `users.json` –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –æ—Ü—ñ–Ω–æ–∫, —Ç–æ–º—É —ó—Ö –±–µ—Ä—É—Ç—å –∑ `grades.json`.
# * `grades.json` –∑–±–µ—Ä—ñ–≥–∞—î –∑–≤‚Äô—è–∑–æ–∫ `user_id` ‚Üí `subject_id` ‚Üí `score`.

## üß™ –Ø–∫ –ø—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏?
# 1. –°—Ç–≤–æ—Ä–∏ 3 JSON-—Ñ–∞–π–ª–∏ (`users.json`, `subjects.json`, `grades.json`) —è–∫ —É –ø—Ä–∏–∫–ª–∞–¥—ñ.
# 2. –í–∏–∫–ª–∏—á:
# subjects = get_subjects_from_json("subjects.json")
# users = get_users_with_grades("users.json", "subjects.json", "grades.json")

# 3. –î–æ–¥–∞–π –Ω–æ–≤—É –æ—Ü—ñ–Ω–∫—É:
# u = users[0]
# s = subjects[0]
# u.add_score_for_subject(s, Score("A"))

# 4. –ó–±–µ—Ä–µ–∂–∏ –Ω–∞–∑–∞–¥:
# users_to_json(users, "new_users.json")
# grades_to_json(users, subjects, "new_grades.json")

# –û—Å—å –ø–æ–≤–Ω–∏–π –∫–æ–¥ —Ä—ñ—à–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ, —è–∫—É —Ç–∏ –æ–ø–∏—Å–∞–≤. –í—ñ–Ω –≤–∫–ª—é—á–∞—î:
# * –ö–ª–∞—Å–∏ `User`, `Subject`, `Score` –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º `@dataclass`.
# * –ü–µ—Ä–µ—Ä–∞—Ö—É–≤–∞–Ω–Ω—è `Role` –¥–ª—è —Ä–æ–ª–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.
# * –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑/—É JSON.
# * –ú–µ—Ç–æ–¥–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, –¥–æ–¥–∞–≤–∞–Ω–Ω—è –æ—Ü—ñ–Ω–æ–∫ —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Ü—ñ–Ω–æ–∫.
# * –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ.
# * –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Ü—ñ–Ω–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ä–æ–ª—ñ.

# ## üî∑ –ì–æ–ª–æ–≤–Ω–∞ –º–µ—Ç–∞ –∫–æ–¥—É
# –ú–∏ –ø—Ä–∞—Ü—é—î–º–æ –∑—ñ —à–∫—ñ–ª—å–Ω–æ—é —Å–∏—Å—Ç–µ–º–æ—é:
# * –Ñ **–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ (Users)** ‚Äî –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —É—á–µ–Ω—å –∞–±–æ –º–µ–Ω—Ç–æ—Ä.
# * –Ñ **–ø—Ä–µ–¥–º–µ—Ç–∏ (Subjects)**.
# * –Ñ **–æ—Ü—ñ–Ω–∫–∏ (Grades)** ‚Äî —è–∫—ñ –ø–æ–≤'—è–∑—É—é—Ç—å —É—á–Ω—è –∑ –ø–µ–≤–Ω–∏–º –ø—Ä–µ–¥–º–µ—Ç–æ–º.
# * –í—Å—ñ —Ü—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —É **JSON-—Ñ–∞–π–ª–∞—Ö**, —è–∫—ñ —Ç—Ä–µ–±–∞:
#   * –∑—á–∏—Ç—É–≤–∞—Ç–∏;
#   * –æ–±—Ä–æ–±–ª—è—Ç–∏ –≤ Python;
#   * –∑–Ω–æ–≤—É –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —É —Ñ–∞–π–ª.

# ## ‚ùì–ß–æ–º—É 3 –∫–ª–∞—Å–∏ –∑ `@dataclass`, –∞ `Role` ‚Äî –Ω—ñ?

# * `Role` ‚Äî —Ü–µ Enum. –í—ñ–Ω –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ data-–∫–ª–∞—Å–æ–º, –±–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –ª–∏—à–µ –¥–ª—è —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å.
# * –Ü–Ω—à—ñ (`User`, `Subject`, `Score`) ‚Äî –ø—Ä–æ—Å—Ç–æ **—Å—Ö–æ–≤–∏—â–∞ –¥–∞–Ω–∏—Ö**, —Ç–æ–º—É `@dataclass` –¥–æ–ø–æ–º–∞–≥–∞—î –∑–º–µ–Ω—à–∏—Ç–∏ –∫–æ–¥.

# ---

import json
import uuid
from dataclasses import dataclass, field
from enum import Enum
from typing import List, Optional
import os

class Role(Enum):
    TRAINEE = 0
    MENTOR = 1
    # üî∏ –¶–µ **–ø–µ—Ä–µ—Ä–∞—Ö—É–≤–∞–Ω–Ω—è (Enum)** ‚Äî –æ—Å–æ–±–ª–∏–≤–∏–π –∫–ª–∞—Å –¥–ª—è —Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É –∑–Ω–∞—á–µ–Ω—å:
    # * `TRAINEE = 0` ‚Äî —É—á–µ–Ω—å.
    # * `MENTOR = 1` ‚Äî –º–µ–Ω—Ç–æ—Ä.
    # ‚û°Ô∏è –ú–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Enum, —â–æ–± —É–Ω–∏–∫–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –ø–æ–º–∏–ª–æ–∫. –ó–∞–º—ñ—Å—Ç—å —Ç–æ–≥–æ —â–æ–± –ø–∏—Å–∞—Ç–∏ `"mentor"` —á–∏ `"trainee"`, –º–∏ —Ç–æ—á–Ω–æ –∑–Ω–∞—î–º–æ, —â–æ –º–æ–∂–Ω–∞ —Ç—ñ–ª—å–∫–∏ `Role.TRAINEE` –∞–±–æ `Role.MENTOR`.

@dataclass
class Subject:
    title: str
    id: str = field(default_factory=lambda: uuid.uuid4().hex)
    # üî∏ –¶–µ **–ø—Ä–µ–¥–º–µ—Ç**. –ú–∞—î:
    # * `title`: –Ω–∞–∑–≤—É –ø—Ä–µ–¥–º–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "Math").
    # * `id`: —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (–≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —á–µ—Ä–µ–∑ `uuid`).

    # > ‚úÖ –ú–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ **@dataclass**, —Ç–æ–º—É —â–æ —Ü–µ –ø—Ä–æ—Å—Ç–∏–π –∫–ª–∞—Å –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö. –í—ñ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î:
    # * `__init__`
    # * `__repr__`
    # * `__eq__`
    #   —Ç–∞ —ñ–Ω—à—ñ –º–µ—Ç–æ–¥–∏ –±–µ–∑ –ø–æ—Ç—Ä–µ–±–∏ –ø–∏—Å–∞—Ç–∏ —ó—Ö –≤—Ä—É—á–Ω—É.

@dataclass
class Score:
    subject_id: str
    score: str  # Example, 'A', 'B', 'C'
    # üî∏ –¶–µ **–æ—Ü—ñ–Ω–∫–∞**, —è–∫–∞ –ø–æ–≤‚Äô—è–∑—É—î —É—á–Ω—è –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º –ø—Ä–µ–¥–º–µ—Ç–æ–º:
    # * `subject_id` ‚Äî id –ø—Ä–µ–¥–º–µ—Ç–∞.
    # * `score` ‚Äî –æ—Ü—ñ–Ω–∫–∞, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `'A'`, `'B'`.

@dataclass
class User:
    username: str
    password: str
    role: Role
    id: str = field(default_factory=lambda: uuid.uuid4().hex)
    scores: List[Score] = field(default_factory=list)
    # üî∏ –¶–µ **–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á**:
    # * `username`, `password`, `role`
    # * `id` ‚Äî —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä
    # * `scores` ‚Äî —Å–ø–∏—Å–æ–∫ –æ–±'—î–∫—Ç—ñ–≤ `Score`, —è–∫—ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å –æ—Ü—ñ–Ω–∫–∏

    @staticmethod
    def create_user(username: str, password: str, role: Role) -> 'User':
        return User(username=username, password=password, role=role)
    # ‚úÖ –¶–µ **—Å—Ç–∞—Ç–∏—á–Ω–∏–π –º–µ—Ç–æ–¥** ‚Äî —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ú–∏ –≤–∏–Ω–µ—Å–ª–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—é–¥–∏, —â–æ–± –ª–æ–≥—ñ–∫–∞ –±—É–ª–∞ –∑—ñ–±—Ä–∞–Ω–∞ –≤ –∫–ª–∞—Å—ñ `User`.

    def add_score_for_subject(self, subject: Subject, score: Score):
        self.scores.append(score)
    # ‚úÖ –î–æ–¥–∞—î –æ—Ü—ñ–Ω–∫—É –¥–æ —Å–ø–∏—Å–∫—É –æ—Ü—ñ–Ω–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

def get_subjects_from_json(subjects_json_path: str) -> List[Subject]:
    # ## ‚úÖ **–©–æ –∑–Ω–∞—á–∏—Ç—å `get_subjects_from_json(path: str) -> List[Subject]:`?**
    # | –ß–∞—Å—Ç–∏–Ω–∞            | –©–æ —Ü–µ –∑–Ω–∞—á–∏—Ç—å                                  |
    # | ------------------ | ---------------------------------------------- |
    # | `path: str`        | –ø–∞—Ä–∞–º–µ—Ç—Ä `path` –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —Ç–∏–ø—É `str`        |
    # | `-> List[Subject]` | —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î **—Å–ø–∏—Å–æ–∫ –æ–±‚Äô—î–∫—Ç—ñ–≤ `Subject`** |
    # –¶–µ —Ç–µ–∂ **–∞–Ω–Ω–æ—Ç–∞—Ü—ñ—ó —Ç–∏–ø—ñ–≤** (type hints).
    # –ù–µ –≤–ø–ª–∏–≤–∞—î –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, –∞–ª–µ –ø–æ–∫—Ä–∞—â—É—î —á–∏—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å, –ø–µ—Ä–µ–≤—ñ—Ä–∫—É, –∞–≤—Ç–æ–¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è.
    with open(subjects_json_path, 'r', encoding='utf-8') as f:
        subjects_data = json.load(f)
    return [Subject(**subject) for subject in subjects_data]
    # üìå –ó—á–∏—Ç—É—î —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –∑ JSON —ñ —Å—Ç–≤–æ—Ä—é—î —Å–ø–∏—Å–æ–∫ –æ–±‚Äô—î–∫—Ç—ñ–≤ `Subject`.
    # üü¢ JSON-—Ñ–∞–π–ª–∏ –∫—Ä–∞—â–µ —á–∏—Ç–∞—Ç–∏ –π –ø–∏—Å–∞—Ç–∏ —á–µ—Ä–µ–∑ `with open(...)` ‚Äî —Ü–µ –±–µ–∑–ø–µ—á–Ω—ñ—à–µ.

def get_users_with_grades(users_json_path: str, subjects_json_path: str, grades_json_path: str) -> List[User]:
    # def get_users_with_grades(users_json_path, subjects_json_path, grades_json_path):
    # üìå –ó—á–∏—Ç—É—î:
    # * —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ `users.json`
    # * —Å–ø–∏—Å–æ–∫ –æ—Ü—ñ–Ω–æ–∫ –∑ `grades.json`
    #   –ü–æ—Ç—ñ–º:
    # * —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç–∏ `User`
    # * –¥–æ–¥–∞—î –¥–æ –∫–æ–∂–Ω–æ–≥–æ –π–æ–≥–æ –æ—Ü—ñ–Ω–∫–∏

    with open(users_json_path, 'r', encoding='utf-8') as f:
        users_data = json.load(f)
    #with open(users_json_path, 'r', encoding='utf-8') as f:
    #   users_data = json.load(f)
    # * –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ JSON-—Ñ–∞–π–ª —ñ–∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏.
    # * `json.load(f)` —á–∏—Ç–∞—î –≤–º—ñ—Å—Ç —Ñ–∞–π–ª—É —ñ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î –π–æ–≥–æ –≤ **Python-–æ–±‚Äô—î–∫—Ç–∏** (–∑–∞–∑–≤–∏—á–∞–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤).
    # üü¢ JSON-—Ñ–∞–π–ª–∏ –∫—Ä–∞—â–µ —á–∏—Ç–∞—Ç–∏ –π –ø–∏—Å–∞—Ç–∏ —á–µ—Ä–µ–∑ `with open(...)` ‚Äî —Ü–µ –±–µ–∑–ø–µ—á–Ω—ñ—à–µ.

    with open(grades_json_path, 'r', encoding='utf-8') as f:
        grades_data = json.load(f)
    # with open(grades_json_path, 'r', encoding='utf-8') as f:
    #     grades_data = json.load(f)
    # - –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–æ —á–∏—Ç–∞—î–º–æ JSON-—Ñ–∞–π–ª –∑ –æ—Ü—ñ–Ω–∫–∞–º–∏.
    # üü¢ JSON-—Ñ–∞–π–ª–∏ –∫—Ä–∞—â–µ —á–∏—Ç–∞—Ç–∏ –π –ø–∏—Å–∞—Ç–∏ —á–µ—Ä–µ–∑ `with open(...)` ‚Äî —Ü–µ –±–µ–∑–ø–µ—á–Ω—ñ—à–µ.

    # > üß† –¢–µ–ø–µ—Ä —É —Ç–µ–±–µ –¥–≤–∞ —Å–ø–∏—Å–∫–∏:
    # > - `users_data`: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ —ñ–∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤;
    # > - `grades_data`: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –∑ –æ—Ü—ñ–Ω–∫–∞–º–∏ (–¥–µ —î `user_id`, `subject_id`, `score`).

    users = []
    #     users = []
    # * –°—Ç–≤–æ—Ä—é—î–º–æ **–ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫**, –∫—É–¥–∏ –±—É–¥–µ–º–æ –¥–æ–¥–∞–≤–∞—Ç–∏ –æ–±'—î–∫—Ç–∏ `User`.

    for user_data in users_data:
        role = Role(user_data['role'])
        user = User(
            username=user_data['username'],
            password=user_data['password'],
            role=role,
            id=user_data['id']
        )
        user_grades = [grade for grade in grades_data if grade['user_id'] == user.id]
        for grade in user_grades:
            score = Score(subject_id=grade['subject_id'], score=grade['score'])
            user.scores.append(score)
        users.append(user)
    return users

def get_users_with_grades(users_json_path: str, subjects_json_path: str, grades_json_path: str) -> List[User]:
    # - –í–æ–Ω–∞ –ø—Ä–∏–π–º–∞—î **—Ç—Ä–∏ —à–ª—è—Ö–∏ –¥–æ —Ñ–∞–π–ª—ñ–≤ JSON**:
    #   - `users_json_path` ‚Äî –¥–µ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ;
    #   - `subjects_json_path` ‚Äî (–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —É —Ç—ñ–ª—ñ —Ñ—É–Ω–∫—Ü—ñ—ó üòÖ ‚Äî –º–æ–∂–ª–∏–≤–æ, –¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ);
    #   - `grades_json_path` ‚Äî –¥–µ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –æ—Ü—ñ–Ω–∫–∏;
    # - `-> List[User]` –æ–∑–Ω–∞—á–∞—î: —Ñ—É–Ω–∫—Ü—ñ—è **–ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –æ–±'—î–∫—Ç—ñ–≤ –∫–ª–∞—Å—É `User`**.

    with open(users_json_path, 'r', encoding='utf-8') as f:
        users_data = json.load(f)
    # * –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ JSON-—Ñ–∞–π–ª —ñ–∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏.
    # * `json.load(f)` —á–∏—Ç–∞—î –≤–º—ñ—Å—Ç —Ñ–∞–π–ª—É —ñ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î –π–æ–≥–æ –≤ **Python-–æ–±‚Äô—î–∫—Ç–∏** (–∑–∞–∑–≤–∏—á–∞–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤).
    # ## ‚úÖ **–Ø–∫ –ø—Ä–∞—Ü—é—î `json.load(f)`?**
    # –¶–µ —Ñ—É–Ω–∫—Ü—ñ—è –∑ –º–æ–¥—É–ª—è `json`.
    # üîπ –í–æ–Ω–∞ **–∑—á–∏—Ç—É—î –í–ï–°–¨ –≤–º—ñ—Å—Ç JSON-—Ñ–∞–π–ª—É** –æ–¥—Ä–∞–∑—É –π –ø–æ–≤–µ—Ä—Ç–∞—î **–æ–±‚Äô—î–∫—Ç Python**:
    # * —Å–ø–∏—Å–æ–∫ ‚Üí list
    # * —Å–ª–æ–≤–Ω–∏–∫ ‚Üí dict
    # * —Ä—è–¥–∫–∏ ‚Üí str
    # ‚û°Ô∏è –¢–æ–±—Ç–æ `json.load()` –ø—Ä–∞—Ü—é—î –Ω–µ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ, –∞ **–≤–µ—Å—å —Ñ–∞–π–ª –∑–∞ —Ä–∞–∑**.
    # üü¢ JSON-—Ñ–∞–π–ª–∏ –∫—Ä–∞—â–µ —á–∏—Ç–∞—Ç–∏ –π –ø–∏—Å–∞—Ç–∏ —á–µ—Ä–µ–∑ `with open(...)` ‚Äî —Ü–µ –±–µ–∑–ø–µ—á–Ω—ñ—à–µ.

    with open(grades_json_path, 'r', encoding='utf-8') as f:
        grades_data = json.load(f)
    # - –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–æ —á–∏—Ç–∞—î–º–æ JSON-—Ñ–∞–π–ª –∑ –æ—Ü—ñ–Ω–∫–∞–º–∏.
    # üü¢ JSON-—Ñ–∞–π–ª–∏ –∫—Ä–∞—â–µ —á–∏—Ç–∞—Ç–∏ –π –ø–∏—Å–∞—Ç–∏ —á–µ—Ä–µ–∑ `with open(...)` ‚Äî —Ü–µ –±–µ–∑–ø–µ—á–Ω—ñ—à–µ.

    users = []
    for user_data in users_data:
        # - –Ü—Ç–µ—Ä—É—î–º–æ—Å—è –ø–æ –∫–æ–∂–Ω–æ–º—É —Å–ª–æ–≤–Ω–∏–∫—É (–ø–æ –æ–¥–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É).

        role = Role(user_data['role'])
        # * –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: `"admin"` –∞–±–æ `"student"`).
        # * –Ü —Å—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –∫–ª–∞—Å—É `Role`.

        user = User(
            username=user_data['username'],
            password=user_data['password'],
            role=role,
            id=user_data['id']
        )
        # - –°—Ç–≤–æ—Ä—é—î–º–æ **–æ–±‚Äô—î–∫—Ç –∫–ª–∞—Å—É `User`**, –ø–µ—Ä–µ–¥–∞—é—á–∏:
        #   - —ñ–º‚Äô—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (`username`);
        #   - –ø–∞—Ä–æ–ª—å (`password`);
        #   - —Ä–æ–ª—å (–æ–±‚Äô—î–∫—Ç `Role`);
        #   - id (—Ä—è–¥–æ–∫ –∞–±–æ —á–∏—Å–ª–æ).

        user_grades = [grade for grade in grades_data if grade['user_id'] == user.id]
        # * –ó–Ω–∞—Ö–æ–¥–∏–º–æ **–≤—Å—ñ –æ—Ü—ñ–Ω–∫–∏ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞**, —Ñ—ñ–ª—å—Ç—Ä—É—é—á–∏ —Å–ø–∏—Å–æ–∫ `grades_data`.
        # * –í—ñ–¥–±–∏—Ä–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—ñ, –¥–µ `grade['user_id'] == user.id`.

        for grade in user_grades:
            # - –Ü—Ç–µ—Ä—É—î–º–æ—Å—è –ø–æ –æ—Ü—ñ–Ω–∫–∞—Ö **–æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞**.
            score = Score(subject_id=grade['subject_id'], score=grade['score'])
            # * –°—Ç–≤–æ—Ä—é—î–º–æ **–æ–±‚Äô—î–∫—Ç `Score`** ‚Äî —Ü–µ, –æ—á–µ–≤–∏–¥–Ω–æ, –∫–ª–∞—Å, —è–∫–∏–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –æ—Ü—ñ–Ω–∫—É –∑ –ø–µ–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç—É:
            #   * `subject_id` ‚Äî id –ø—Ä–µ–¥–º–µ—Ç–∞;
            #   * `score` ‚Äî —Å–∞–º–∞ –æ—Ü—ñ–Ω–∫–∞.
            user.scores.append(score)
            # - –î–æ–¥–∞—î–º–æ –æ—Ü—ñ–Ω–∫—É –¥–æ —Å–ø–∏—Å–∫—É `scores` —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
            # –ü–µ—Ä–µ–¥ —Ü–∏–º —É –∫–ª–∞—Å—ñ `User` –º–∞—î –±—É—Ç–∏ —â–æ—Å—å —Ç–∏–ø—É `self.scores = []`.
        users.append(user)
        # * –î–æ–¥–∞—î–º–æ –ø–æ–≤–Ω—ñ—Å—Ç—é —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Ä–∞–∑–æ–º —ñ–∑ –æ—Ü—ñ–Ω–∫–∞–º–∏) —É —Å–ø–∏—Å–æ–∫ `users`.
    return users
    # - –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≥–æ—Ç–æ–≤–∏–π —Å–ø–∏—Å–æ–∫ –æ–±'—î–∫—Ç—ñ–≤ `User` —ñ–∑ —ó—Ö –æ—Ü—ñ–Ω–∫–∞–º–∏.

# ## üß† –°—Ö–µ–º–∞ –≤ –≥–æ–ª–æ–≤—ñ:
# users.json ‚ûú \[{'id': 1, 'username': 'Ivan', ...}]
# grades.json ‚ûú \[{'user\_id': 1, 'subject\_id': 5, 'score': 90}, ...]

# üîÅ –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
# * —Å—Ç–≤–æ—Ä—é—î–º–æ User(...)
# * —à—É–∫–∞—î–º–æ –π–æ–≥–æ –æ—Ü—ñ–Ω–∫–∏
# * —Å—Ç–≤–æ—Ä—é—î–º–æ Score(...) –¥–ª—è –∫–æ–∂–Ω–æ—ó –æ—Ü—ñ–Ω–∫–∏
# * –¥–æ–¥–∞—î–º–æ Score —É user.scores
# * –¥–æ–¥–∞—î–º–æ user –¥–æ —Å–ø–∏—Å–∫—É

def add_user(user: User, users: List[User]) -> bool:
    # ## ‚úÖ **6. –©–æ –∑–Ω–∞—á–∏—Ç—å `-> bool`?**
    # üìå –¶–µ –∑–Ω–∞—á–∏—Ç—å, —â–æ —Ñ—É–Ω–∫—Ü—ñ—è **–ø–æ–≤–µ—Ä—Ç–∞—î –±—É–ª–µ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è** ‚Äî `True` –∞–±–æ `False`.
    # üìå –î–æ–¥–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Å–ø–∏—Å–æ–∫, —è–∫—â–æ —â–µ –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º —ñ–º–µ–Ω–µ–º. –ü–æ–≤–µ—Ä—Ç–∞—î `True` –∞–±–æ `False`.
    if any(u.username == user.username for u in users):
        return False
    users.append(user)
    return True

def add_subject(subject: Subject, subjects: List[Subject]) -> bool:
    # –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–∞ –¥–æ `add_user`, —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç—ñ–≤.
    if any(s.title == subject.title for s in subjects):
        return False
    subjects.append(subject)
    return True

def get_grades_for_user(username: str, current_user: User, users: List[User]) -> Optional[List[Score]]:
    # ## ‚úÖ **7. –ü–æ—è—Å–Ω–µ–Ω–Ω—è –¥–æ `Optional[List[Score]]`**
    # | –ï–ª–µ–º–µ–Ω—Ç                    | –©–æ —Ü–µ –æ–∑–Ω–∞—á–∞—î                                  |
    # | -------------------------- | ---------------------------------------------- |
    # | `username: str`            | –ø–∞—Ä–∞–º–µ—Ç—Ä `username` ‚Äî —Ä—è–¥–æ–∫                    |
    # | `current_user: User`       | –æ–±‚Äô—î–∫—Ç –∫–ª–∞—Å—É `User`                            |
    # | `users: List[User]`        | —Å–ø–∏—Å–æ–∫ –æ–±‚Äô—î–∫—Ç—ñ–≤ `User`                         |
    # | `-> Optional[List[Score]]` | —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î –∞–±–æ —Å–ø–∏—Å–æ–∫ –æ—Ü—ñ–Ω–æ–∫, –∞–±–æ `None` |
    # üì¶ `Optional[X]` ‚Äî —Ü–µ –æ–∑–Ω–∞—á–∞—î: **–º–æ–∂–µ –±—É—Ç–∏ `X`, –∞ –º–æ–∂–µ –±—É—Ç–∏ `None`**.
    # üìå –ü–æ–≤–µ—Ä—Ç–∞—î –æ—Ü—ñ–Ω–∫–∏:
    # * –∞–±–æ **—Ç—ñ–ª—å–∫–∏ —Å–≤–æ—ó**, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á ‚Äî Trainee
    # * –∞–±–æ **–±—É–¥—å-—è–∫–æ–≥–æ**, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á ‚Äî Mentor
    if current_user.role == Role.MENTOR:
        for user in users:
            if user.username == username:
                return user.scores
    elif current_user.username == username:
        return current_user.scores
    return None

def users_to_json(users: List[User], json_file: str):
    # –∑–∞–ø–∏—Å—É—é—Ç—å –Ω–∞–∑–∞–¥ —É JSON:
    # * —Ç—ñ–ª—å–∫–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø–æ–ª—è
    # * –±–µ–∑ –∑–∞–π–≤–∏—Ö –∞—Ç—Ä–∏–±—É—Ç—ñ–≤ (`scores`, `Role` –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –≤—Ä—É—á–Ω—É —è–∫ `.value`)

    users_data = []
    for user in users:
        users_data.append({
            'username': user.username,
            'password': user.password,
            'role': user.role.value,
            'id': user.id
        })
    with open(json_file, 'w', encoding='utf-8') as f:
        json.dump(users_data, f, indent=4)
        # ## ‚úÖ **–Ø–∫ –ø—Ä–∞—Ü—é—î `json.dump(...)`**
        # json.dump(users_data, f, indent=4)
        # üîπ `dump()` ‚Äî —Ü–µ **–∑–∞–ø–∏—Å —É —Ñ–∞–π–ª**.
        # | –ü–∞—Ä–∞–º–µ—Ç—Ä     | –ü–æ—è—Å–Ω–µ–Ω–Ω—è                                           |
        # | ------------ | --------------------------------------------------- |
        # | `users_data` | —â–æ —Å–∞–º–µ –º–∏ –∑–∞–ø–∏—Å—É—î–º–æ                                |
        # | `f`          | –≤—ñ–¥–∫—Ä–∏—Ç–∏–π —Ñ–∞–π–ª                                      |
        # | `indent=4`   | —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è: –≤—ñ–¥—Å—Ç—É–ø–∏ 4 –ø—Ä–æ–±—ñ–ª–∏ (—â–æ–± –±—É–ª–æ –∫—Ä–∞—Å–∏–≤–æ) |
        # ‚û°Ô∏è –£—Å—ñ –¥–∞–Ω—ñ –∑ `users_data` –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—é—Ç—å—Å—è –≤ JSON —ñ –∑–∞–ø–∏—Å—É—é—Ç—å—Å—è —É —Ñ–∞–π–ª **–æ–¥–Ω–∏–º –±–ª–æ–∫–æ–º**, –Ω–µ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ.
        # üü¢ JSON-—Ñ–∞–π–ª–∏ –∫—Ä–∞—â–µ —á–∏—Ç–∞—Ç–∏ –π –ø–∏—Å–∞—Ç–∏ —á–µ—Ä–µ–∑ `with open(...)` ‚Äî —Ü–µ –±–µ–∑–ø–µ—á–Ω—ñ—à–µ.

def subjects_to_json(subjects: List[Subject], json_file: str):
    # –∑–∞–ø–∏—Å—É—é—Ç—å –Ω–∞–∑–∞–¥ —É JSON:
    # * —Ç—ñ–ª—å–∫–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø–æ–ª—è
    # * –±–µ–∑ –∑–∞–π–≤–∏—Ö –∞—Ç—Ä–∏–±—É—Ç—ñ–≤ (`scores`, `Role` –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –≤—Ä—É—á–Ω—É —è–∫ `.value`)

    subjects_data = []
    for subject in subjects:
        subjects_data.append({
            'title': subject.title,
            'id': subject.id
        })
    with open(json_file, 'w', encoding='utf-8') as f:
        json.dump(subjects_data, f, indent=4)
        # ## ‚úÖ **–Ø–∫ –ø—Ä–∞—Ü—é—î `json.dump(...)`**
        # json.dump(users_data, f, indent=4)
        # üîπ `dump()` ‚Äî —Ü–µ **–∑–∞–ø–∏—Å —É —Ñ–∞–π–ª**.
        # | –ü–∞—Ä–∞–º–µ—Ç—Ä     | –ü–æ—è—Å–Ω–µ–Ω–Ω—è                                           |
        # | ------------ | --------------------------------------------------- |
        # | `users_data` | —â–æ —Å–∞–º–µ –º–∏ –∑–∞–ø–∏—Å—É—î–º–æ                                |
        # | `f`          | –≤—ñ–¥–∫—Ä–∏—Ç–∏–π —Ñ–∞–π–ª                                      |
        # | `indent=4`   | —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è: –≤—ñ–¥—Å—Ç—É–ø–∏ 4 –ø—Ä–æ–±—ñ–ª–∏ (—â–æ–± –±—É–ª–æ –∫—Ä–∞—Å–∏–≤–æ) |
        # ‚û°Ô∏è –£—Å—ñ –¥–∞–Ω—ñ –∑ `users_data` –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—é—Ç—å—Å—è –≤ JSON —ñ –∑–∞–ø–∏—Å—É—é—Ç—å—Å—è —É —Ñ–∞–π–ª **–æ–¥–Ω–∏–º –±–ª–æ–∫–æ–º**, –Ω–µ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ.
        # üü¢ JSON-—Ñ–∞–π–ª–∏ –∫—Ä–∞—â–µ —á–∏—Ç–∞—Ç–∏ –π –ø–∏—Å–∞—Ç–∏ —á–µ—Ä–µ–∑ `with open(...)` ‚Äî —Ü–µ –±–µ–∑–ø–µ—á–Ω—ñ—à–µ.

def grades_to_json(users: List[User], subjects: List[Subject], json_file: str):
    # –∑–∞–ø–∏—Å—É—é—Ç—å –Ω–∞–∑–∞–¥ —É JSON:
    # * —Ç—ñ–ª—å–∫–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø–æ–ª—è
    # * –±–µ–∑ –∑–∞–π–≤–∏—Ö –∞—Ç—Ä–∏–±—É—Ç—ñ–≤ (`scores`, `Role` –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –≤—Ä—É—á–Ω—É —è–∫ `.value`)

    grades_data = []
    for user in users:
        for score in user.scores:
            grades_data.append({
                'user_id': user.id,
                'subject_id': score.subject_id,
                'score': score.score
            })
    with open(json_file, 'w', encoding='utf-8') as f:
        json.dump(grades_data, f, indent=4)
        # ## ‚úÖ **–Ø–∫ –ø—Ä–∞—Ü—é—î `json.dump(...)`**
        # json.dump(users_data, f, indent=4)
        # üîπ `dump()` ‚Äî —Ü–µ **–∑–∞–ø–∏—Å —É —Ñ–∞–π–ª**.
        # | –ü–∞—Ä–∞–º–µ—Ç—Ä     | –ü–æ—è—Å–Ω–µ–Ω–Ω—è                                           |
        # | ------------ | --------------------------------------------------- |
        # | `users_data` | —â–æ —Å–∞–º–µ –º–∏ –∑–∞–ø–∏—Å—É—î–º–æ                                |
        # | `f`          | –≤—ñ–¥–∫—Ä–∏—Ç–∏–π —Ñ–∞–π–ª                                      |
        # | `indent=4`   | —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è: –≤—ñ–¥—Å—Ç—É–ø–∏ 4 –ø—Ä–æ–±—ñ–ª–∏ (—â–æ–± –±—É–ª–æ –∫—Ä–∞—Å–∏–≤–æ) |
        # ‚û°Ô∏è –£—Å—ñ –¥–∞–Ω—ñ –∑ `users_data` –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—é—Ç—å—Å—è –≤ JSON —ñ –∑–∞–ø–∏—Å—É—é—Ç—å—Å—è —É —Ñ–∞–π–ª **–æ–¥–Ω–∏–º –±–ª–æ–∫–æ–º**, –Ω–µ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ.
        # üü¢ JSON-—Ñ–∞–π–ª–∏ –∫—Ä–∞—â–µ —á–∏—Ç–∞—Ç–∏ –π –ø–∏—Å–∞—Ç–∏ —á–µ—Ä–µ–∑ `with open(...)` ‚Äî —Ü–µ –±–µ–∑–ø–µ—á–Ω—ñ—à–µ.

# ## ‚ùì –ß–æ–º—É —á–∞—Å—Ç–∏–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ–π –Ω–µ –≤ –∫–ª–∞—Å—ñ?
# ‚û°Ô∏è –ë–æ –≤–æ–Ω–∏ –ø—Ä–∞—Ü—é—é—Ç—å –∑ **—É—Å—ñ–º–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ –∞–±–æ –≤—Å—ñ–º–∞ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏**, –∞ –Ω–µ –∑ –æ–¥–Ω–∏–º –æ–±'—î–∫—Ç–æ–º.
# –¢–æ–º—É –∫—Ä–∞—â–µ –∑—Ä–æ–±–∏—Ç–∏ —ó—Ö –æ–∫—Ä–µ–º–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏, —â–æ–± –Ω–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ –∫–ª–∞—Å –∑–∞–π–≤–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—é.

# Example of use
if __name__ == "__main__":
    current_dir = os.getcwd() # Get the current directory of the py-script run
    folder = "Softserve/UA-130 Advanced Python with Django/Sprint 08 Unittest/Bonus task with description" # We indicate where exactly the files are located that the script will work with
    base_path = os.path.join(current_dir, folder) # Connecting the path to files

    # Fixing full paths to paths
    # * üü¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π `os.path.join(...)` –∑–∞–º—ñ—Å—Ç—å —Ä—É—á–Ω–æ–≥–æ –∑—à–∏–≤–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ ‚Üí —Ü–µ –∫—Ä–æ—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ.
    users_json = os.path.join(base_path, "users.json")
    subjects_json = os.path.join(base_path, "subjects.json")
    grades_json = os.path.join(base_path, "grades.json")

    users = get_users_with_grades(users_json, subjects_json, grades_json)
    subjects = get_subjects_from_json(subjects_json)

    # Example: show the current ratings
    current_user = users[0]
    grades = get_grades_for_user(current_user.username, current_user, users)
    if grades is not None:
        for score in grades:
            print(f"Subject ID: {score.subject_id}, Score: {score.score}")
    else:
        print("No grades available.")

    # Saving data to JSON
    users_to_json(users, f"{base_path}/new_users.json")
    subjects_to_json(subjects, f"{base_path}/new_subjects.json")
    grades_to_json(users, subjects, f"{base_path}/new_grades.json")

# ## üîö –ü—ñ–¥—Å—É–º–æ–∫
# | –ö–æ–º–ø–æ–Ω–µ–Ω—Ç                 | –ù–∞–≤—ñ—â–æ                                                      |
# | ------------------------- | ----------------------------------------------------------- |
# | `@dataclass`              | –ö–æ—Ä–æ—Ç–∫–∏–π, –∑—Ä—É—á–Ω–∏–π —Å–ø–æ—Å—ñ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞—Å –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö |
# | `Enum Role`               | –ë–µ–∑–ø–µ—á–Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —Ä–æ–ª–µ–π                                |
# | `create_user`             | –ó—Ä—É—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —é–∑–µ—Ä–∞                                      |
# | `get_users_with_grades()` | –ó–±—ñ—Ä–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ + —ó—Ö –æ—Ü—ñ–Ω–æ–∫ –∑ —Ñ–∞–π–ª—ñ–≤                    |
# | `get_grades_for_user()`   | –î–æ—Å—Ç—É–ø –¥–æ –æ—Ü—ñ–Ω–æ–∫ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é —Ä–æ–ª—ñ                          |
# | `add_user`, `add_subject` | –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ                                      |
# | `..._to_json()`           | –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω –Ω–∞–∑–∞–¥                                       |


# ## ‚úÖ **–©–æ –æ–∑–Ω–∞—á–∞—î `title: str`?**
# –¶–µ **–∞–Ω–Ω–æ—Ç–∞—Ü—ñ—è —Ç–∏–ø—É**.
# üîπ –¶–µ **–Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ**, –∞–ª–µ –¥—É–∂–µ –∫–æ—Ä–∏—Å–Ω–æ. Python —Å–∞–º –ø–æ —Å–æ–±—ñ –Ω–µ –≤–∏–º–∞–≥–∞—î –≤–∫–∞–∑—É–≤–∞—Ç–∏ —Ç–∏–ø –∑–º—ñ–Ω–Ω–æ—ó. –ê–ª–µ –º–∏ **–ø—ñ–¥–∫–∞–∑—É—î–º–æ —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä—É —Ç–∞ IDE**, —â–æ `title` ‚Äî —Ü–µ —Ä—è–¥–æ–∫ (`str`).
# > –¢–∞–∫—ñ –ø—ñ–¥–∫–∞–∑–∫–∏:
# * –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –¥–ª—è **–ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∏–ø—ñ–≤** (—Ç–∏–ø—É mypy –∞–±–æ IDE)
# * –Ω–µ –≤–ø–ª–∏–≤–∞—é—Ç—å –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏
# üëÄ –ü—Ä–∏–∫–ª–∞–¥:
# name: str = "Olga"   # –æ–∑–Ω–∞—á–∞—î, —â–æ name –º–∞—î –±—É—Ç–∏ —Ä—è–¥–∫–æ–º
# age: int = 20        # –º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–µ —á–∏—Å–ª–æ

# ## ‚úÖ **–©–æ –æ–∑–Ω–∞—á–∞—î `id: str = field(default_factory=...)`?**
# id: str = field(default_factory=lambda: uuid.uuid4().hex)
# üìå –ü–æ—è—Å–Ω–µ–Ω–Ω—è –ø–æ —á–∞—Å—Ç–∏–Ω–∞—Ö:
# | –ß–∞—Å—Ç–∏–Ω–∞                    | –©–æ —Ü–µ —Ç–∞–∫–µ                                                               |
# | -------------------------- | ------------------------------------------------------------------------ |
# | `id: str`                  | –∞–Ω–Ω–æ—Ç–∞—Ü—ñ—è —Ç–∏–ø—É ‚Äî id –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —Ä—è–¥–∫–æ–º                                  |
# | `field(...)`               | —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑ `dataclasses`, —è–∫–∞ –¥–æ–∑–≤–æ–ª—è—î –≤–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –¥–ª—è –ø–æ–ª—è |
# | `default_factory=...`      | –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–Ω–∞—á–µ–Ω–Ω—è **–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º**                                  |
# | `lambda: uuid.uuid4().hex` | **–ª—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü—ñ—è**, —è–∫–∞ –≥–µ–Ω–µ—Ä—É—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π hex-—ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä             |
# üì¶ –¢–æ–±—Ç–æ, —è–∫—â–æ –º–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏ `id`, —Ç–æ –≤–æ–Ω–æ **–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç—å—Å—è** —á–µ—Ä–µ–∑ `uuid`.

# ## ‚úÖ **–ß–æ–º—É `password: str`, –∞ –¥–∞–ª—ñ `scores: List[Score] = field(...)`?**
# –ë–æ:
# * `password: str` ‚Äî —Ü–µ –ø—Ä–æ—Å—Ç–∏–π —Ç–∏–ø. –î–æ—Å—Ç–∞—Ç–Ω—å–æ –∞–Ω–Ω–æ—Ç–∞—Ü—ñ—ó.
# * `scores: List[Score] = field(default_factory=list)` ‚Äî —Ü–µ **–∑–º—ñ–Ω–Ω–∞ –∑ –º—É—Ç–∞–±–µ–ª—å–Ω–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º (—Å–ø–∏—Å–æ–∫)**.
# üß† –Ø–∫—â–æ –ø–∏—Å–∞—Ç–∏ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫:
# scores: List[Score] = []
# —Ç–æ —Ü–µ–π —Å–ø–∏—Å–æ–∫ –±—É–¥–µ **–æ–¥–∏–Ω –Ω–∞ –≤—Å—ñ—Ö –æ–±'—î–∫—Ç–∞—Ö**, —â–æ –¥—É–∂–µ –ø–æ–≥–∞–Ω–æ ‚ùó
# ‚úÖ –¢–æ–º—É –º–∏ –ø–∏—à–µ–º–æ:
# scores: List[Score] = field(default_factory=list)
# –¶–µ –æ–∑–Ω–∞—á–∞—î: –∫–æ–∂–Ω–æ–º—É –Ω–æ–≤–æ–º—É `User` –±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ **–Ω–æ–≤–∏–π, —Å–≤—ñ–π —Å–ø–∏—Å–æ–∫ –æ—Ü—ñ–Ω–æ–∫**.

# | –°–∏–Ω—Ç–∞–∫—Å–∏—Å        | –©–æ –æ–∑–Ω–∞—á–∞—î                             |
# | ---------------- | -------------------------------------- |
# | `var: str`       | –∞–Ω–Ω–æ—Ç–∞—Ü—ñ—è —Ç–∏–ø—É                         |
# | `= field(...)`   | –∑–∞–¥–∞—î –ø–æ–≤–µ–¥—ñ–Ω–∫—É –ø–æ–ª—è —É dataclass       |
# | `Optional[X]`    | –∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–∂–µ –±—É—Ç–∏ –∞–±–æ `X`, –∞–±–æ `None` |
# | `-> int`         | —Ç–∏–ø –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó                 |
# | `json.load(f)`   | —á–∏—Ç–∞—î –≤–µ—Å—å JSON-—Ñ–∞–π–ª —É Python –æ–±‚Äô—î–∫—Ç   |
# | `json.dump(...)` | –∑–∞–ø–∏—Å—É—î –æ–±‚Äô—î–∫—Ç —É —Ñ–∞–π–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON   |


# ## ‚úÖ **–î–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É (type hints, field)**
# `name: str` - `name: str = "Bob"` - `name` –º–∞—î –±—É—Ç–∏ —Ä—è–¥–∫–æ–º (`str`)
# `scores: List[int]` - `scores: List[int] = [5, 4, 3]` - —Å–ø–∏—Å–æ–∫ —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª
# `-> int` - `def get_age() -> int:` - —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î `int`
# `-> Optional[str]` - `def get_name() -> Optional[str]:` - –º–æ–∂–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ `str` –∞–±–æ `None`
# `List[Score]` - `scores: List[Score] = [...]` - —Å–ø–∏—Å–æ–∫ –æ–±'—î–∫—Ç—ñ–≤ —Ç–∏–ø—É `Score` - –∫–æ–∂–Ω–æ–º—É –æ–±‚Äô—î–∫—Ç—É ‚Äî —Å–≤—ñ–π —Å–ø–∏—Å–æ–∫, –∞ –Ω–µ –∑–∞–≥–∞–ª—å–Ω–∏–π
# `field(default_factory=lambda: uuid...)` - `id: str = field(default_factory=lambda: uuid...)`
# `field(default_factory=...)` - `scores: List[Score] = field(default_factory=list)` - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä—É—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID 

# ## ‚úÖ **–©–æ —Ç–∞–∫–µ `field()` —ñ–∑ `dataclasses`?**
# from dataclasses import field
# üìå `field()` ‚Äî —Ü–µ **—Ñ—É–Ω–∫—Ü—ñ—è –∑ –º–æ–¥—É–ª—è `dataclasses`**, —è–∫–∞ –¥–æ–∑–≤–æ–ª—è—î:
# | –ú–µ—Ç–∞                                    | –ü—Ä–∏–∫–ª–∞–¥                                           |
# | --------------------------------------- | ------------------------------------------------- |
# | –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º    | `field(default=0)`                                |
# | –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ        | `field(default_factory=lambda: uuid.uuid4().hex)` |
# | –£–Ω–∏–∫–Ω—É—Ç–∏ —Å–ø—ñ–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É –º—ñ–∂ –æ–±'—î–∫—Ç–∞–º–∏ | `field(default_factory=list)`                     |

# **–ß–æ–º—É –Ω–µ –º–æ–∂–Ω–∞ –ø—Ä–æ—Å—Ç–æ `scores = []`?**
# –¢–æ–º—É —â–æ –≤—Å—ñ –æ–±‚Äô—î–∫—Ç–∏ –±—É–¥—É—Ç—å **—Ä–æ–∑–¥—ñ–ª—è—Ç–∏ –æ–¥–∏–Ω —ñ —Ç–æ–π —Å–∞–º–∏–π —Å–ø–∏—Å–æ–∫**, –∞ `field()` –¥–∞—î **—Å–≤—ñ–π —Å–ø–∏—Å–æ–∫ –∫–æ–∂–Ω–æ–º—É –æ–±‚Äô—î–∫—Ç—É**.

# ## ‚úÖ **3. –°—Ö–µ–º–∞ ‚Äî —Å–ø—Ä–æ—â–µ–Ω–∞ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è**
# –û—Å—å —è–∫ –≤–∏–≥–ª—è–¥–∞—î –ª–æ–≥—ñ–∫–∞ —É –∫–æ–¥—ñ –∑ –∫–ª–∞—Å–∞–º–∏:
# –ö–ª–∞—Å User:
#     - username: str
#     - password: str
#     - role: Role (Enum)
#     - id: str = uuid
#     - scores: List[Score] = []

# –ö–ª–∞—Å Score:
#     - subject_id: str
#     - score: str

# –ö–ª–∞—Å Subject:
#     - title: str
#     - id: str

# –ö–ª–∞—Å Role (Enum):
#     - TRAINEE = 0
#     - MENTOR = 1

# @dataclass
# class User:
#     username: str
#     password: str
#     role: Role
#     id: str = field(default_factory=lambda: uuid.uuid4().hex)
#     scores: List[Score] = field(default_factory=list)

# ## ‚úÖ **4. –ü—Ä–∏–∫–ª–∞–¥–∏ –∑ –∫–æ–¥–æ–º**
# ### ‚û§ –ü—Ä–æ—Å—Ç–∏–π –∫–ª–∞—Å –±–µ–∑ `dataclass`:
# class Person:
#     def __init__(self, name: str, age: int):
#         self.name = name
#         self.age = age

# ### ‚û§ –¢–µ —Å–∞–º–µ –∑ `dataclass`:
# from dataclasses import dataclass
# @dataclass
# class Person:
#     name: str
#     age: int

# `dataclass` —Å–∞–º —Å—Ç–≤–æ—Ä–∏—Ç—å `__init__`, `__repr__`, `__eq__` —Ç–æ—â–æ. –ú–µ–Ω—à–µ –ø–∏—Å–∞—Ç–∏ —Ä—É–∫–∞–º–∏ ‚úÖ

# ## ‚úÖ **5. Optional / Union ‚Äî –ø–æ—è—Å–Ω–µ–Ω–Ω—è**
# from typing import Optional
# def get_email() -> Optional[str]:
#     return "example@email.com"

# üîπ `Optional[str]` == `Union[str, None]`
# –¢–æ–±—Ç–æ —Ñ—É–Ω–∫—Ü—ñ—è –º–æ–∂–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —Ä—è–¥–æ–∫ –∞–±–æ `None`.


# ## ‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —Ç–≤–æ—ó –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:
# `title: str` ‚Äî —Ü–µ –∞–Ω–Ω–æ—Ç–∞—Ü—ñ—è —Ç–∏–ø—É? - –¢–∞–∫ ‚úÖ. –¶–µ *type hint*, –ø—ñ–¥–∫–∞–∑–∫–∞ Python (—ñ IDE), —â–æ `title` –º–∞—î –±—É—Ç–∏ `str`.
# `id: str = field(default_factory=lambda: uuid.uuid4().hex)` -  `id` ‚Äî –ø–æ–ª–µ —Ç–∏–ø—É `str`, —è–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ—Ç—Ä–∏–º–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è, —Å—Ç–≤–æ—Ä–µ–Ω–µ `lambda`. `field()` –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑ `dataclass` —ñ –¥–æ–∑–≤–æ–ª—è—î –≤—Å—Ç–∞–Ω–æ–≤–ª—é–≤–∞—Ç–∏ **—Ñ–∞–±—Ä–∏–∫—É –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º**.
# `username: str` vs `scores: List[Score] = field(...)` - –£ –ø–µ—Ä—à–æ–º—É –≤–∏–ø–∞–¥–∫—É –ø—Ä–æ—Å—Ç–æ –∞–Ω–Ω–æ—Ç–∞—Ü—ñ—è –±–µ–∑ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è. –£ –¥—Ä—É–≥–æ–º—É ‚Äî –∑–∞–¥–∞—î—Ç—å—Å—è –ø–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ `field(...)` (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —Å–ø—ñ–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É).
# `json.load(f)` ‚Äî —è–∫ –ø—Ä–∞—Ü—é—î? - –í—ñ–Ω –æ–¥—Ä–∞–∑—É —á–∏—Ç–∞—î –≤–µ—Å—å —Ñ–∞–π–ª, –ø–∞—Ä—Å–∏—Ç—å –π–æ–≥–æ —è–∫ JSON —ñ –ø–æ–≤–µ—Ä—Ç–∞—î **—Å—Ç—Ä—É–∫—Ç—É—Ä—É Python**: —Å–ø–∏—Å–æ–∫, —Å–ª–æ–≤–Ω–∏–∫ —Ç–æ—â–æ. –ù–µ —á–∏—Ç–∞—î "–ø–æ—Å—Ç—Ä–æ—á–Ω–æ" ‚Äî –æ–¥—Ä–∞–∑—É –≤–µ—Å—å —Ñ–∞–π–ª.
# `def get_subjects_from_json(path: str) -> List[Subject]` - `: str` ‚Äî –∞–Ω–Ω–æ—Ç–∞—Ü—ñ—è —Ç–∏–ø—É –∞—Ä–≥—É–º–µ–Ω—Ç—É. `-> List[Subject]` ‚Äî —Ç–∏–ø –ø–æ–≤–µ—Ä—Ç–∞–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è. 
# `-> bool` - –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î `True` –∞–±–æ `False`.
# `Optional[List[Score]]` - **`Optional`** = –∞–±–æ `List[Score]`, –∞–±–æ `None`. –¶–µ –ø—ñ–¥–∫–∞–∑–∫–∞, —â–æ —Ñ—É–Ω–∫—Ü—ñ—è –º–æ–∂–µ –Ω–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è. `List[Score]` = —Å–ø–∏—Å–æ–∫ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —Ç–∏–ø—É `Score`.
# `json.dump(data, f, indent=4)` - –ü–∏—à–µ —É —Ñ–∞–π–ª `f` **–≤–µ—Å—å** –æ–±'—î–∫—Ç `data` —É –≤–∏–≥–ª—è–¥—ñ —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–æ–≥–æ JSON. `indent=4` ‚Äî –≤—ñ–¥—Å—Ç—É–ø 4 –ø—Ä–æ–±—ñ–ª–∏, –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ —á–∏—Ç–∞–Ω–Ω—è.

# ## ‚úÖ –¢–∞–±–ª–∏—Ü—è –ø–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É
# | –°–∏–Ω—Ç–∞–∫—Å–∏—Å                     | –û–ø–∏—Å                                                      |
# | ----------------------------- | --------------------------------------------------------- |
# | `x: str`                      | –ü—ñ–¥–∫–∞–∑–∫–∞: `x` ‚Äî —Ü–µ —Ä—è–¥–æ–∫                                  |
# | `x: int = 0`                  | `x` ‚Äî —Ü—ñ–ª–µ —á–∏—Å–ª–æ, –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º ‚Äî 0           |
# | `x: List[str] = field(...)`   | `x` ‚Äî —Å–ø–∏—Å–æ–∫ —Ä—è–¥–∫—ñ–≤, `field()` —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π —Å–ø–∏—Å–æ–∫       |
# | `-> bool`                     | –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î `True` –∞–±–æ `False`                       |
# | `Optional[str]`               | –ê–±–æ `str`, –∞–±–æ `None`                                     |
# | `field(default_factory=list)` | –î–ª—è `dataclass`, —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –æ–±‚Äô—î–∫—Ç–∞ |

# ## ‚úÖ –ü—Ä–æ—Å—Ç–∏–π –ø—Ä–∏–∫–ª–∞–¥ `dataclass` + field
# from dataclasses import dataclass, field
# from typing import List
# import uuid

# @dataclass
# class User:
#     username: str
#     password: str
#     role: int
#     id: str = field(default_factory=lambda: uuid.uuid4().hex)
#     scores: List[int] = field(default_factory=list)
