# Create class Worker with fields name and salary. If salary negative raise ValueError

# Create a method get_tax_value() that calculate tax from salary . Tax must be calculate like "progressive tax" with next step:

# less then 1000 - 0%
# 1001 - 3000 - 10%
# 3001 - 5000 - 15%
# 5001 - 10000 - 21%
# 10001 - 20000 - 30%
# 20001 - 50000 - 40%
# more than 50000 - 47%
# Please create WorkerTest class with unitest to the class Worker. Try to use setUp and tearDown methods. Don`t use assertRaises in tests.

# –≠—Ç–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞ **–ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è** –∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ **—é–Ω–∏—Ç-—Ç–µ—Å—Ç–æ–≤ —Å `setUp` –∏ `tearDown`**.

## üß† –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?
# 1. **–°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å `Worker`** —Å –ø–æ–ª—è–º–∏ `name` –∏ `salary`.
#    –ï—Å–ª–∏ –∑–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è ‚Äî –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º `ValueError`.

# 2. **–°–æ–∑–¥–∞—Ç—å –º–µ—Ç–æ–¥ `get_tax_value()`**, –∫–æ—Ç–æ—Ä—ã–π:
#    * —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–∞–ª–æ–≥ –ø–æ *–ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —à–∫–∞–ª–µ*;
#    * –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç **–Ω–∞–ª–æ–≥**, –∞ –Ω–µ –ø—Ä–æ—Ü–µ–Ω—Ç.

# 3. **–ù–∞–ø–∏—Å–∞—Ç—å `WorkerTest`**, –∏—Å–ø–æ–ª—å–∑—É—è `unittest`, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ:
#    * —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã;
#    * –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ—Ç—å **–≤–∞–ª–∏–¥–Ω—ã–µ –∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ** –∫–µ–π—Å—ã;
#    * –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `setUp` –∏ `tearDown` ‚Äî –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–æ—Å—Ç—ã–µ;
#    * **–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `assertRaises`**.

## üìä –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è
# | –ó–∞—Ä–ø–ª–∞—Ç–∞      | –ù–∞–ª–æ–≥ |
# | ------------- | ----- |
# | –¥–æ 1000       | 0     |
# | 1001 ‚Äì 3000   | 10%   |
# | 3001 ‚Äì 5000   | 15%   |
# | 5001 ‚Äì 10000  | 21%   |
# | 10001 ‚Äì 20000 | 30%   |
# | 20001 ‚Äì 50000 | 40%   |
# | –±–æ–ª—å—à–µ 50000  | 47%   |

## ‚úÖ –ü–æ–ª–Ω—ã–π –∫–æ–¥ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏
import unittest

class Worker:
    def __init__(self, name, salary=0.0):
        self.name = name
        if not isinstance(salary, (int, float)):
            raise ValueError("Salary must be a number")
        if salary < 0:
            raise ValueError("Salary cannot be negative")
        self.salary = salary

    def get_tax_value(self):
        """
        Progressive taxation by bands:
        - < 1000 ‚Äî 0%
        - 1001‚Äì3000 ‚Äî 10%
        - 3001‚Äì5000 ‚Äî 15%
        - 5001‚Äì10000 ‚Äî 21%
        - 10001‚Äì20000 ‚Äî 30%
        - 20001‚Äì50000 ‚Äî 40%
        - >50000 ‚Äî 47%
        """
        brackets = [
            (1000, 0.0),
            (3000, 0.10),
            (5000, 0.15),
            (10000, 0.21),
            (20000, 0.30),
            (50000, 0.40),
            (float("inf"), 0.47)
        ]

        total_tax = 0.0
        last_limit = 0.0
        remaining_salary = self.salary

        for limit, rate in brackets:
            if self.salary > limit:
                taxable = limit - last_limit
            else:
                taxable = remaining_salary

            total_tax += taxable * rate
            remaining_salary -= taxable
            last_limit = limit

            if remaining_salary <= 0:
                break

        return round(total_tax, 2)

## ‚úÖ –Æ–ù–ò–¢-–¢–ï–°–¢–´ —Å–æ –≤—Å–µ–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
import unittest

class Worker:
    def __init__(self, name, salary=0.0):
        self.name = name
        if not isinstance(salary, (int, float)):
            raise ValueError("Salary must be a number")
        if salary < 0:
            raise ValueError("Salary cannot be negative")
        self.salary = salary

    def get_tax_value(self):
        """
        Progressive taxation by bands:
        - < 1000 ‚Äî 0%
        - 1001‚Äì3000 ‚Äî 10%
        - 3001‚Äì5000 ‚Äî 15%
        - 5001‚Äì10000 ‚Äî 21%
        - 10001‚Äì20000 ‚Äî 30%
        - 20001‚Äì50000 ‚Äî 40%
        - >50000 ‚Äî 47%
        """
        brackets = [
            (1000, 0.0),
            (3000, 0.10),
            (5000, 0.15),
            (10000, 0.21),
            (20000, 0.30),
            (50000, 0.40),
            (float("inf"), 0.47)
        ]

        total_tax = 0.0
        last_limit = 0.0
        remaining_salary = self.salary

        for limit, rate in brackets:
            if self.salary > limit:
                taxable = limit - last_limit
            else:
                taxable = remaining_salary

            total_tax += taxable * rate
            remaining_salary -= taxable
            last_limit = limit

            if remaining_salary <= 0:
                break

        return round(total_tax, 2)

## ‚úÖ –Æ–ù–ò–¢-–¢–ï–°–¢–´ —Å–æ –≤—Å–µ–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
class WorkerTest(unittest.TestCase):
    def setUp(self):
        self.workers = []

    def tearDown(self):
        self.workers.clear()

    def test_no_tax(self):
        w = Worker("Alice", 800)
        self.assertEqual(w.get_tax_value(), 0.0)

    def test_first_bracket(self):
        w = Worker("Bob", 2500)
        # 1000 ‚Äì 0% + 1500 * 10%
        self.assertAlmostEqual(w.get_tax_value(), 150.0)

    def test_second_bracket(self):
        w = Worker("Charlie", 4000)
        # 1000 ‚Äì 0%, 2000 ‚Äì 10%, 1000 ‚Äì 15%
        expected = 0 + 2000*0.1 + 1000*0.15
        self.assertAlmostEqual(w.get_tax_value(), expected)

    def test_third_bracket(self):
        w = Worker("Diana", 9000)
        # 1000 ‚Äì 0%, 2000 ‚Äì 10%, 2000 ‚Äì 15%, 4000 ‚Äì 21%
        expected = 0 + 2000*0.1 + 2000*0.15 + 4000*0.21
        self.assertAlmostEqual(w.get_tax_value(), expected)

    def test_big_tax(self):
        w = Worker("Edward", 10000)
        # 1000 ‚Äì 0%, 2000 ‚Äì 10%, 2000 ‚Äì 15%, 5000 ‚Äì 21%
        expected = 0 + 2000*0.1 + 2000*0.15 + 5000*0.21
        self.assertAlmostEqual(w.get_tax_value(), expected)

    def test_huge_tax(self):
        w = Worker("Fay", 100000)
        # 1000 * 0%
        # 2000 * 10%
        # 2000 * 15%
        # 5000 * 21%
        # 10000 * 30%
        # 30000 * 40%
        # 50000 * 47%
        expected = (
            0 +
            2000 * 0.10 +
            2000 * 0.15 +
            5000 * 0.21 +
            10000 * 0.30 +
            30000 * 0.40 +
            50000 * 0.47
        )
        self.assertAlmostEqual(w.get_tax_value(), expected)

    def test_zero_salary(self):
        w = Worker("Greg", 0)
        self.assertEqual(w.get_tax_value(), 0.0)

    def test_missing_salary(self):
        w = Worker("Vasia")  # salary default = 0
        self.assertEqual(w.get_tax_value(), 0.0)

    def test_invalid_salary_type(self):
        try:
            Worker("Hack", "1000")
            self.fail("ValueError not raised for str salary")
        except ValueError:
            pass

    def test_negative_salary(self):
        try:
            Worker("Hacker", -1000)
            self.fail("ValueError not raised for negative salary")
        except ValueError:
            pass

    @unittest.expectedFailure
    def test_expected_fail(self):
        w = Worker("Test", 50000)
        # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –ø–æ–º–∏–ª–∫–æ–≤–µ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
        self.assertEqual(w.get_tax_value(), 0.0)

# –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    unittest.main()

## üß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ
### –ü–æ—á–µ–º—É **–Ω–µ if-else** –≤–Ω—É—Ç—Ä–∏ —Ç–µ—Å—Ç–æ–≤?
# –ü–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ –ª–æ–≥–∏–∫–∞, –∞ —Ç–µ—Å—Ç ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞.

### –ü–æ—á–µ–º—É `tearDown()`?
# –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –æ–Ω –ø—Ä–æ—Å—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, —á—Ç–æ –±—ã–ª –±—ã –≤—ã–∑–≤–∞–Ω –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è. –ü—Ä–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä—É–∑–∫–∞—Ö (—Ñ–∞–π–ª—ã, –±–∞–∑–∞) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.

### –ü–æ—á–µ–º—É –Ω–µ `assertRaises`?
# –ó–∞–¥–∞–Ω–æ —É—Å–ª–æ–≤–∏–µ ‚Äî **–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ**, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ `try-except` + `fail`.

## ‚úÖ –ß—Ç–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ?
# * ‚úÖ –í—Å–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –Ω–∞–ª–æ–≥–æ–≤
# * ‚úÖ –ì—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
# * ‚úÖ –ó–∞—Ä–ø–ª–∞—Ç–∞ = 0
# * ‚úÖ –ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –æ—à–∏–±–∫–∞
# * ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ `assertAlmostEqual`

# –î–∞–≤–∞–π –æ–±—ä—è—Å–Ω—é **–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ**, —á—Ç–æ–±—ã —Ç—ã —Ä–∞–∑–æ–±—Ä–∞–ª—Å—è –≤–æ –≤—Å—ë–º ‚Äî –∏ –≤ `setUp`, `tearDown`, –∏ –≤ `assertRaises`, –∏ –≤ –ª–æ–≥–∏–∫–µ —Ç–µ—Å—Ç–æ–≤.

## üîπ –ß—Ç–æ —Ç–∞–∫–æ–µ `setUp()` –∏ `tearDown()` –≤ `unittest`
# –≠—Ç–æ **–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã** –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏ –æ—á–∏—Å—Ç–∫–∏ –ø–µ—Ä–µ–¥/–ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞:
# | –ú–µ—Ç–æ–¥        | –ö–æ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è                   | –î–ª—è —á–µ–≥–æ –Ω—É–∂–µ–Ω                                                  |
# | ------------ | ---------------------------------- | --------------------------------------------------------------- |
# | `setUp()`    | ‚ùó **–ü–µ—Ä–µ–¥** –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞ | –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å—Ä–µ–¥—É: —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã, –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª—ã,                                                                                      –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –∏ —Ç.–¥. |
# | `tearDown()` | ‚ùó **–ü–æ—Å–ª–µ** –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞  | –û—á–∏—Å—Ç–∏—Ç—å: –∑–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã, –æ–±–Ω—É–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã –∏ —Ç.–¥. |

### üîç –ü—Ä–∏–º–µ—Ä, –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
# import unittest

# class MyTest(unittest.TestCase):
#     def setUp(self):
#         print("üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º")

#     def tearDown(self):
#         print("üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞")

#     def test_1(self):
#         print("‚úî –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç 1")
#         self.assertTrue(True)

#     def test_2(self):
#         print("‚úî –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç 2")
#         self.assertTrue(True)

# üîΩ –í—ã–≤–æ–¥ –±—É–¥–µ—Ç —Ç–∞–∫–æ–π:
# üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
# ‚úî –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç 1
# üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
# üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
# ‚úî –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç 2
# üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞

# > ‚úÖ –ü–æ–ª–µ–∑–Ω–æ, –∫–æ–≥–¥–∞ –Ω–∞–¥–æ *–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å/—Å—Ç–µ—Ä–µ—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ* –¥–æ –∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞.

## üîπ –ß—Ç–æ —Ç–∞–∫–æ–µ `assertRaises`
# –≠—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ `unittest`, –∫–æ—Ç–æ—Ä–∞—è **—É–±–µ–∂–¥–∞–µ—Ç—Å—è**, —á—Ç–æ *–±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ*.

### ‚úÖ –ü—Ä–∏–º–µ—Ä:
# def divide(a, b):
#     return a / b

# class TestDivide(unittest.TestCase):
#     def test_zero_division(self):
#         with self.assertRaises(ZeroDivisionError):
#             divide(10, 0)
# üìå `assertRaises` –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ **–≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞** `with` –±—É–¥–µ—Ç –≤—ã–±—Ä–æ—à–µ–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ `ZeroDivisionError`.

## üîπ –ü–æ—á–µ–º—É –ù–ï `assertRaises`, –∞ `try-except`
# –ò–Ω–æ–≥–¥–∞ –≤ –∑–∞–¥–∞—á–∞—Ö **–∑–∞–ø—Ä–µ—â–∞—é—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `assertRaises`**, –∏ —Ç–æ–≥–¥–∞ –º—ã –¥–µ–ª–∞–µ–º —Ç–æ –∂–µ —Å–∞–º–æ–µ –≤—Ä—É—á–Ω—É—é:
# def test_error(self):
#     try:
#         Worker("Tom", -100)
#         self.fail("ValueError was not raised")  # –µ—Å–ª–∏ –æ—à–∏–±–∫–∏ –Ω–µ –±—ã–ª–æ ‚Äî —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω
#     except ValueError as e:
#         self.assertEqual(str(e), "Salary cannot be negative")

# üîç –ó–¥–µ—Å—å:
# * `try:` ‚Äî –º—ã –ø—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É;
# * `self.fail()` ‚Äî —Ç–µ—Å—Ç —É–ø–∞–¥—ë—Ç, –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –æ—à–∏–±–∫–∞;
# * `except:` ‚Äî –ª–æ–≤–∏–º –æ—à–∏–±–∫—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ.

## üîπ –ü–æ—á–µ–º—É "—Ç–µ—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å if/else"?
# –≠—Ç–æ **–≤–∞–∂–Ω—ã–π –ø—Ä–∏–Ω—Ü–∏–ø —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è**:
# > üí° **–¢–µ—Å—Ç = –ø—Ä–æ–≤–µ—Ä–∫–∞, –∞ –Ω–µ –ª–æ–≥–∏–∫–∞**
# –ï—Å–ª–∏ –≤ —Ç–µ—Å—Ç–µ –µ—Å—Ç—å `if` –∏–ª–∏ `else`, —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –≤ —Ç–µ—Å—Ç–µ –∑–∞–ª–æ–∂–µ–Ω–∞ –ª–æ–≥–∏–∫–∞. –ê –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤ –∫–æ–¥–µ, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Ç–µ—Å—Ç–∏—Ä—É–µ–º.

### ‚ùå –ü–ª–æ—Ö–æ:
# if salary > 1000:
#     self.assertEqual(worker.get_tax(), 100)
# else:
#     self.assertEqual(worker.get_tax(), 0)

# ‚úÖ –õ—É—á—à–µ:
# worker = Worker("Tom", 1500)
# self.assertEqual(worker.get_tax(), 150)

# ## ‚úÖ –ö—Ä–∞—Ç–∫–∏–π –∏—Ç–æ–≥:
# | –ß—Ç–æ                   | –ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç –∏ –∑–∞—á–µ–º                                      |
# | --------------------- | ----------------------------------------------------------- |
# | `setUp()`             | –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º                              |
# | `tearDown()`          | –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞                                 |
# | `assertRaises`        | –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—ã–∑–≤–∞–ª–æ—Å—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ                         |
# | `try-except` + `fail` | –†—É—á–Ω–æ–π —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—à–∏–±–∫—É (–µ—Å–ª–∏ –Ω–µ–ª—å–∑—è `assertRaises`) |
# | ‚ùå `if` –≤ —Ç–µ—Å—Ç–∞—Ö       | –ü–ª–æ—Ö–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤ —Ç–µ—Å—Ç–∞—Ö –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ª–æ–≥–∏–∫–∏            |
