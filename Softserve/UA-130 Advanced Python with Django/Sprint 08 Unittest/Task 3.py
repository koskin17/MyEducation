# Write the function quadratic_equation with arguments a, b ,c that solution to quadratic equation without a complex solution.

# Write unit tests for this function with QuadraticEquationTest class
# Minimum 3 tests: discriminant < 0, discriminant > 0, discriminant = 0

# –ó–∞–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–¥–∞:
# import unittest

# def quadratic_equation(a, b, c):
#     pass

# class QuadraticEquationTest(unittest.TestCase):
#     pass

## üî¢ –ó–ê–î–ê–ß–ê
# –ù–∞–º –Ω—É–∂–Ω–æ:
# 1. ‚úèÔ∏è –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é `quadratic_equation(a, b, c)`, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç **–∫–æ—Ä–Ω–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è** `ax¬≤ + bx + c = 0`.
# 2. üß™ –ù–∞–ø–∏—Å–∞—Ç—å **—é–Ω–∏—Ç-—Ç–µ—Å—Ç—ã**:
#    * –Ω–∞ —Å–ª—É—á–∞–π **–æ–¥–Ω–æ–≥–æ –∫–æ—Ä–Ω—è (D = 0)**,
#    * –Ω–∞ —Å–ª—É—á–∞–π **–¥–≤—É—Ö –∫–æ—Ä–Ω–µ–π (D > 0)**,
#    * –Ω–∞ —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ **–∫–æ—Ä–Ω–µ–π –Ω–µ—Ç (D < 0)**.

# > üí° –ü–æ —É—Å–ª–æ–≤–∏—é: **—Ä–µ—à–µ–Ω–∏—è —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–º–∏ –∫–æ—Ä–Ω—è–º–∏ –Ω–µ –Ω—É–∂–Ω—ã**. –¢–æ –µ—Å—Ç—å, –µ—Å–ª–∏ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç –º–µ–Ω—å—à–µ –Ω—É–ª—è, —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å `None`.

## üßÆ –ú–ê–¢–ï–ú–ê–¢–ò–ö–ê
# –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ:
# ax¬≤ + bx + c = 0
# –†–µ—à–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç:
# D = b¬≤ - 4ac
# * –ï—Å–ª–∏ D < 0 ‚Äî —Ä–µ—à–µ–Ω–∏–π –Ω–µ—Ç ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º `None`
# * –ï—Å–ª–∏ D = 0 ‚Äî –æ–¥–∏–Ω –∫–æ—Ä–µ–Ω—å ‚Üí x = -b / (2a)
# * –ï—Å–ª–∏ D > 0 ‚Äî –¥–≤–∞ –∫–æ—Ä–Ω—è ‚Üí x‚ÇÅ = (-b + ‚àöD)/2a, x‚ÇÇ = (-b - ‚àöD)/2a

## ‚úÖ –ü–û–õ–ù–´–ô –ö–û–î –° –†–ï–®–ï–ù–ò–ï–ú –ò –¢–ï–°–¢–ê–ú–ò
import unittest
import math

def quadratic_equation(a, b, c):
    """
    Solution of quadratic equation ax¬≤ + bx + c = 0
    Returns:
    - None if there are no solutions;
    - One root if discriminant = 0
    - Tuple of two roots if discriminant > 0
    """
    if a == 0:
        raise ValueError("Not a quadratic equation: a cannot be zero.")
    
    discriminant = b**2 - 4 * a * c

    if discriminant < 0:
        return None
    elif discriminant == 0:
        x = -b / (2 * a)
        return x
    else:
        sqrt_d = math.sqrt(discriminant)
        x1 = (-b + sqrt_d) / (2 * a)
        x2 = (-b - sqrt_d) / (2 * a)
        return (x1, x2)


class QuadraticEquationTest(unittest.TestCase):
    def test_discriminant_less_than_zero(self):
        # D = -7 < 0 ‚Üí no solutions
        self.assertIsNone(quadratic_equation(1, 2, 3))

    def test_discriminant_equal_zero(self):
        # D = 0 ‚Üí one root x = -b / 2a = 2.0
        self.assertEqual(quadratic_equation(1, -4, 4), 2.0)

    def test_discriminant_greater_than_zero(self):
        # D = 1 ‚Üí two root
        result = quadratic_equation(1, -3, 2)
        expected = (2.0, 1.0)
        # The order of the roots may differ, compare with accuracy
        self.assertAlmostEqual(result[0], expected[0])
        self.assertAlmostEqual(result[1], expected[1])


# –î–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (–µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ–±—ã—á–Ω–æ–º .py —Ñ–∞–π–ª–µ)
if __name__ == '__main__':
    unittest.main()

## üß† –ü–û–Ø–°–ù–ï–ù–ò–Ø
# | –≠–ª–µ–º–µ–Ω—Ç                  | –û–±—ä—è—Å–Ω–µ–Ω–∏–µ                                                            |
# | ------------------------ | --------------------------------------------------------------------- |
# | `math.sqrt()`            | –≤—ã—á–∏—Å–ª—è–µ—Ç –∫–æ—Ä–µ–Ω—å ‚àöD                                                   |
# | `assertIsNone(...)`      | –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ `None`                                 |
# | `assertEqual(...)`       | –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ—á–Ω–æ–µ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ (–ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–Ω—è)                |
# | `assertAlmostEqual(...)` | –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—á—Ç–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ (–¥–ª—è –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π) |

## ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç
# –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ `unittest` —Ç—ã –ø–æ–ª—É—á–∏—à—å 3 —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞:
# Ran 3 tests in 0.001s

# OK
# * –ü—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ `a = 0` (–Ω–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ),
# * –î–æ–±–∞–≤–∏—Ç—å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–π –¥–æ –Ω—É–∂–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏,
# * –ò–ª–∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
