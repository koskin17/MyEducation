# Create function file_parser. If function is called with 2 arguments it must count the number of occurrences string in a file, in case of 3 arguments it must replace string in a file to new string

# first argument - path to file
# second argument - find string
# third argument - replace string

# Function must returned string with count of occurrences or count of replaced strings

# Example:
# file_parser("file.txt", 'x', 'o')-> Replaced 8 strings
# file_parser("file.txt", 'o') -> Found 8 strings
# Please, create class ParsesTest and write unittest for file_parser function uses mock object

# –ó–∞–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–¥–∞:
# import unittest

# def file_parser():
#     pass

# class ParserTest(unittest.TestCase):
#     pass

# –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º –∑–∞–¥–∞—á—É **–ø–æ—à–∞–≥–æ–≤–æ**, —á—Ç–æ–±—ã –±—ã–ª–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å—ë –ø–æ–Ω—è—Ç–Ω–æ –∏ –±–µ–∑ –Ω–µ–¥–æ—Ä–∞–∑—É–º–µ–Ω–∏–π. –ú—ã —Ä–µ—à–∏–º –µ—ë **—á–∏—Å—Ç–æ, –ø–æ–Ω—è—Ç–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ**, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º `mock` –≤ —Ç–µ—Å—Ç–∞—Ö.

## üìå –£—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏
# –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é `file_parser`, –∫–æ—Ç–æ—Ä–∞—è:
# * –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ **2 –∞—Ä–≥—É–º–µ–Ω—Ç–∞**:
#   * –ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª
#   * –ò—â–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π —Å—Ç—Ä–æ–∫–∏
#   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É: `"Found X strings"`

# * –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ **3 –∞—Ä–≥—É–º–µ–Ω—Ç–∞**:
#   * –ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª
#   * –ó–∞–º–µ–Ω—è–µ—Ç –≤—Ö–æ–∂–¥–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
#   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ
#   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É: `"Replaced X strings"`

## üß© –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ `file_parser(path, search, replace=None)`
### üîπ –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
# | –ê—Ä–≥—É–º–µ–Ω—Ç  | –ó–Ω–∞—á–µ–Ω–∏–µ                        |
# | --------- | ------------------------------- |
# | `path`    | –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É                    |
# | `search`  | –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞               |
# | `replace` | –°—Ç—Ä–æ–∫–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) |

## üõ† –ê–ª–≥–æ—Ä–∏—Ç–º —Ñ—É–Ω–∫—Ü–∏–∏
# 1. –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª (—á—Ç–µ–Ω–∏–µ –∏–ª–∏ —á—Ç–µ–Ω–∏–µ+–∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ `replace`).
# 2. –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.
# 3. –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π `search`.
# 4. –ï—Å–ª–∏ `replace`:
#    * –î–µ–ª–∞–µ–º `str.replace(search, replace)`
#    * –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª.
#    * –í–æ–∑–≤—Ä–∞—â–∞–µ–º `Replaced X strings`
# 5. –ò–Ω–∞—á–µ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º `Found X strings`

## ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ `mock` –≤ `unittest`
# from unittest.mock import mock_open, patch
# `mock_open()` –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–º–µ–Ω–∏—Ç—å `open()` —Ç–∞–∫, –∫–∞–∫ –±—É–¥—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.

## ‚úÖ –ü–æ–ª–Ω—ã–π –∫–æ–¥
import unittest
from unittest.mock import mock_open, patch

def file_parser(path, search, replace=None):
    with open(path, "r", encoding="utf-8") as f:
        content = f.read()

    count = content.count(search)

    if replace is not None:
        new_content = content.replace(search, replace)
        with open(path, "w", encoding="utf-8") as f:
            f.write(new_content)
        return f"Replaced {count} strings"
    else:
        return f"Found {count} strings"

## ‚úÖ Unittests with `mock`
class ParserTest(unittest.TestCase):

    def test_find_string(self):
        mocked_file = mock_open(read_data="xoxooxxooxoxo")
        with patch("builtins.open", mocked_file):
            result = file_parser("fake_path.txt", "o")
            self.assertEqual(result, "Found 7 strings")

    def test_replace_string(self):
        # read_data contains 4 'x', replace them with 'o'
        mocked_file = mock_open(read_data="xx xx")
        with patch("builtins.open", mocked_file) as m:
            result = file_parser("fake_path.txt", "x", "o")
            self.assertEqual(result, "Replaced 4 strings")
            # Let's check that the replaced content has been written to the file.
            m().write.assert_called_once_with("oo oo")

    def test_file_not_found(self):
        with patch("builtins.open", side_effect=FileNotFoundError()):
            with self.assertRaises(FileNotFoundError):
                file_parser("nonexistent.txt", "a")

## üß™ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç `mock_open`?
# * `mock_open(read_data="...")` —Å–æ–∑–¥–∞—ë—Ç —Ñ–µ–π–∫–æ–≤—ã–π —Ñ–∞–π–ª —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º.
# * `patch("builtins.open", ...)` –∑–∞–º–µ–Ω—è–µ—Ç `open` –Ω–∞ –Ω–∞—à—É –∑–∞–≥–ª—É—à–∫—É.
# * `m().write.assert_called_once_with(...)` –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, **—á—Ç–æ —Ñ–∞–π–ª –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω** –Ω–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º.

## ‚úÖ –ö–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
# –í–Ω–∏–∑—É —Ñ–∞–π–ª–∞ –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å:
if __name__ == "__main__":
    unittest.main()

## üì¶ –ò—Ç–æ–≥–æ
# | –ö–æ–º–ø–æ–Ω–µ–Ω—Ç              | –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ                                  |
# | ---------------------- | ------------------------------------------- |
# | `file_parser`          | –†–∞–±–æ—Ç–∞–µ—Ç —Å —Ñ–∞–π–ª–æ–º: –∏—â–µ—Ç –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ—Ç —Å—Ç—Ä–æ–∫–∏ |
# | `mock_open`            | –ü–æ–∑–≤–æ–ª—è–µ—Ç "–ø–æ–¥–º–µ–Ω–∏—Ç—å" —Ñ–∞–π–ª –≤ —Ç–µ—Å—Ç–∞—Ö         |
# | `patch()`              | –ó–∞–º–µ–Ω—è–µ—Ç `open()` –Ω–∞ –Ω–∞—à mock               |
# | `assert_called_with()` | –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω—ë–Ω   |
# | `FileNotFoundError`    | –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞    |

# –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º **–ø–æ—Å—Ç—Ä–æ—á–Ω–æ –∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏**, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ—Å—å –∫–æ–¥ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ `file_parser` –∏ –µ–≥–æ —Ç–µ—Å—Ç–æ–≤. –Ø –æ–±—ä—è—Å–Ω—é –∏ **–æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é**, –∏ **—Ç–µ—Å—Ç—ã —Å mock**, —á—Ç–æ–±—ã —Ç—ã –ø–æ–Ω—è–ª –∫–∞–∂–¥—É—é –¥–µ—Ç–∞–ª—å.

# ## üìå –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è `file_parser`
# def file_parser(path, search, replace=None):

# üîπ –≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è:
# * –ø–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É (`path`);
# * —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ (`search`);
# * –∏ **–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π** –ø–∞—Ä–∞–º–µ—Ç—Ä `replace`, –µ—Å–ª–∏ —Ö–æ—Ç–∏–º –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏.

#     try:
#         with open(path, "r", encoding="utf-8") as f:
#             content = f.read()

# üîπ –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏ –∏ **–ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ**.

# * `with open(...) as f:` ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä–æ–µ—Ç—Å—è).
# * `f.read()` ‚Äî —á–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª –∫–∞–∫ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë –≤ `content`.

#     except FileNotFoundError:
#         return "File not found"

# üîπ –ï—Å–ª–∏ —Ñ–∞–π–ª **–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç**, –º—ã –ª–æ–≤–∏–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ `FileNotFoundError` –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É `"File not found"`.

#     count = content.count(search)

# üîπ –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Å—Ç—Ä–æ–∫–∞ `search` –≤—Å—Ç—Ä–µ—Ç–∏–ª–∞—Å—å –≤ —Ñ–∞–π–ª–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: `"abcabc".count("a")` ‚Üí `2`.

#     if replace is not None:

# üîπ –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä `replace`, –∑–Ω–∞—á–∏—Ç –º—ã —Ö–æ—Ç–∏–º **–∑–∞–º–µ–Ω–∏—Ç—å** –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏.

#         new_content = content.replace(search, replace)

# üîπ –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è `search` –Ω–∞ `replace`.

#         with open(path, "w", encoding="utf-8") as f:
#             f.write(new_content)

# üîπ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª **–Ω–∞ –∑–∞–ø–∏—Å—å** –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.

#         return f"Replaced {count} strings"

# üîπ –í–æ–∑–≤—Ä–∞—â–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –±—ã–ª–æ –∑–∞–º–µ–Ω–µ–Ω–æ.

#     else:
#         return f"Found {count} strings"

# üîπ –ï—Å–ª–∏ `replace` –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω–æ.

# ## üìå –í–µ—Å—å `file_parser` ‚Äî –∫—Ä–∞—Ç–∫–æ:
# - –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª
# - –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
# - –ü–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π search
# - –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω replace:
#     ‚Üí –ó–∞–º–µ–Ω–∏—Ç—å –∏ –∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª
#     ‚Üí –í–µ—Ä–Ω—É—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ–Ω
# - –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω:
#     ‚Üí –í–µ—Ä–Ω—É—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö

# ## üß™ –†–∞–∑–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ (`ParserTest`)

# import unittest
# from unittest.mock import mock_open, patch

# * `unittest` ‚Äî –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ Python –¥–ª—è —Ç–µ—Å—Ç–æ–≤.
# * `mock_open`, `patch` ‚Äî –¥–ª—è **–∏–º–∏—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞**, –Ω–µ —Ä–∞–±–æ—Ç–∞—è —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏.

# ### ‚úÖ –¢–µ—Å—Ç: –ø–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏

# def test_find_string(self):
#     mocked_file = mock_open(read_data="xoxooxxooxoxo")
#     with patch("builtins.open", mocked_file):
#         result = file_parser("fake_path.txt", "o")
#         self.assertEqual(result, "Found 7 strings")

# üîπ –ß—Ç–æ —Ç—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:
# * `mock_open(...)` —Å–æ–∑–¥–∞—ë—Ç **—Ñ–µ–π–∫–æ–≤—ã–π —Ñ–∞–π–ª**, –∫–∞–∫ –±—É–¥—Ç–æ –≤ –Ω—ë–º —Å—Ç—Ä–æ–∫–∞ `"xoxooxxooxoxo"`.
# * `patch(...)` –ø–æ–¥–º–µ–Ω—è–µ—Ç `open()` –Ω–∞ —ç—Ç–æ—Ç —Ñ–µ–π–∫–æ–≤—ã–π —Ñ–∞–π–ª.
# * `file_parser(...)` —Å—á–∏—Ç–∞–µ—Ç `"o"` ‚Äî –∏—Ö 7.
# * –ü—Ä–æ–≤–µ—Ä–∫–∞: `"Found 7 strings"`.

# ### ‚úÖ –¢–µ—Å—Ç: –∑–∞–º–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∏

# def test_replace_string(self):
#     mocked_file = mock_open(read_data="xx xx")
#     with patch("builtins.open", mocked_file) as m:
#         result = file_parser("fake_path.txt", "x", "o")
#         self.assertEqual(result, "Replaced 4 strings")
#         m().write.assert_called_once_with("oo oo")

# üîπ –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:
# * –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç `"xx xx"` ‚Üí 4 `x`.
# * –ó–∞–º–µ–Ω–∏–º `x ‚Üí o` ‚Üí `"oo oo"`.
# * –ü—Ä–æ–≤–µ—Ä—è–µ–º:

#   * `"Replaced 4 strings"`
#   * `m().write.assert_called_once_with("oo oo")` ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ–∞–π–ª **–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–ª–∏** –≤–µ—Ä–Ω–æ.

# ### ‚úÖ –¢–µ—Å—Ç: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω

# def test_file_not_found(self):
#     with patch("builtins.open", side_effect=FileNotFoundError()):
#         result = file_parser("nonexistent.txt", "a")
#         self.assertEqual(result, "File not found")

# üîπ –ß—Ç–æ —Ç—É—Ç:
# * `patch(...)` –¥–µ–ª–∞–µ—Ç —Ç–∞–∫, —á—Ç–æ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ `open()` –±—É–¥–µ—Ç –≤—ã–±—Ä–æ—à–µ–Ω `FileNotFoundError`.
# * –ü—Ä–æ–≤–µ—Ä–∫–∞: `"File not found"`.

# ## üìå –ö–∞–∫ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–º–µ—Å—Ç–µ?
# if __name__ == "__main__":
#     unittest.main()

# üîπ –≠—Ç–æ—Ç –±–ª–æ–∫ –≥–æ–≤–æ—Ä–∏—Ç Python:
# * –ï—Å–ª–∏ –º—ã –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é, —Ç–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å `unittest.main()`:
#   * –ù–∞–π–¥—ë—Ç –≤—Å–µ –∫–ª–∞—Å—Å—ã `TestCase`
#   * –ù–∞–π–¥—ë—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã `test_...`
#   * –ó–∞–ø—É—Å—Ç–∏—Ç –∫–∞–∂–¥—ã–π –∏–∑ –Ω–∏—Ö
#   * –ü–æ–∫–∞–∂–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç

# ## üí¨ –ò–¢–û–ì
# | –ö–æ–º–ø–æ–Ω–µ–Ω—Ç              | –ß—Ç–æ –¥–µ–ª–∞–µ—Ç                                             |
# | ---------------------- | ------------------------------------------------------ |
# | `file_parser`          | –ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª, —Å—á–∏—Ç–∞–µ—Ç –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ—Ç —Å—Ç—Ä–æ–∫–∏               |
# | `mock_open`            | –°–æ–∑–¥–∞—ë—Ç —Ñ–µ–π–∫–æ–≤—ã–π —Ñ–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–º                        |
# | `patch()`              | –ü–æ–¥–º–µ–Ω—è–µ—Ç `open()` –Ω–∞ —Ñ–µ–π–∫–æ–≤—É—é –≤–µ—Ä—Å–∏—é                  |
# | `assertEqual()`        | –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç = –æ–∂–∏–¥–∞–µ–º–æ–º—É                  |
# | `assert_called_with()` | –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ñ–∞–π–ª –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π |
