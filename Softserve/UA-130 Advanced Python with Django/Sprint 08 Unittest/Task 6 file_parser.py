# Create function file_parser. If function is called with 2 arguments it must count the number of occurrences string in a file, in case of 3 arguments it must replace string in a file to new string

# first argument - path to file
# second argument - find string
# third argument - replace string

# Function must returned string with count of occurrences or count of replaced strings

# Example:
# file_parser("file.txt", 'x', 'o')-> Replaced 8 strings
# file_parser("file.txt", 'o') -> Found 8 strings
# Please, create class ParsesTest and write unittest for file_parser function uses mock object

# –ó–∞–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–¥–∞:
# import unittest

# def file_parser():
#     pass

# class ParserTest(unittest.TestCase):
#     pass

–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º –∑–∞–¥–∞—á—É **–ø–æ—à–∞–≥–æ–≤–æ**, —á—Ç–æ–±—ã –±—ã–ª–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å—ë –ø–æ–Ω—è—Ç–Ω–æ –∏ –±–µ–∑ –Ω–µ–¥–æ—Ä–∞–∑—É–º–µ–Ω–∏–π. –ú—ã —Ä–µ—à–∏–º –µ—ë **—á–∏—Å—Ç–æ, –ø–æ–Ω—è—Ç–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ**, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º `mock` –≤ —Ç–µ—Å—Ç–∞—Ö.

---

## üìå –£—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏

–ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é `file_parser`, –∫–æ—Ç–æ—Ä–∞—è:

* –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ **2 –∞—Ä–≥—É–º–µ–Ω—Ç–∞**:

  * –ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª
  * –ò—â–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π —Å—Ç—Ä–æ–∫–∏
  * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É: `"Found X strings"`

* –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ **3 –∞—Ä–≥—É–º–µ–Ω—Ç–∞**:

  * –ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª
  * –ó–∞–º–µ–Ω—è–µ—Ç –≤—Ö–æ–∂–¥–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
  * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ
  * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É: `"Replaced X strings"`

---

## üß© –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ `file_parser(path, search, replace=None)`

### üîπ –ê—Ä–≥—É–º–µ–Ω—Ç—ã:

| –ê—Ä–≥—É–º–µ–Ω—Ç  | –ó–Ω–∞—á–µ–Ω–∏–µ                        |
| --------- | ------------------------------- |
| `path`    | –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É                    |
| `search`  | –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞               |
| `replace` | –°—Ç—Ä–æ–∫–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) |

---

## üõ† –ê–ª–≥–æ—Ä–∏—Ç–º —Ñ—É–Ω–∫—Ü–∏–∏

1. –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª (—á—Ç–µ–Ω–∏–µ –∏–ª–∏ —á—Ç–µ–Ω–∏–µ+–∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ `replace`).
2. –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.
3. –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π `search`.
4. –ï—Å–ª–∏ `replace`:

   * –î–µ–ª–∞–µ–º `str.replace(search, replace)`
   * –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª.
   * –í–æ–∑–≤—Ä–∞—â–∞–µ–º `Replaced X strings`
5. –ò–Ω–∞—á–µ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º `Found X strings`

---

## ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ `mock` –≤ `unittest`

–ü–æ—Å–∫–æ–ª—å–∫—É –º—ã **–Ω–µ —Ö–æ—Ç–∏–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏**, –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º `unittest.mock`:

```python
from unittest.mock import mock_open, patch
```

`mock_open()` –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–º–µ–Ω–∏—Ç—å `open()` —Ç–∞–∫, –∫–∞–∫ –±—É–¥—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.

---

## ‚úÖ –ü–æ–ª–Ω—ã–π –∫–æ–¥

```python
import unittest
from unittest.mock import mock_open, patch

def file_parser(path, search, replace=None):
    try:
        with open(path, "r", encoding="utf-8") as f:
            content = f.read()
    except FileNotFoundError:
        return "File not found"

    count = content.count(search)

    if replace is not None:
        new_content = content.replace(search, replace)
        with open(path, "w", encoding="utf-8") as f:
            f.write(new_content)
        return f"Replaced {count} strings"
    else:
        return f"Found {count} strings"
```

---

## ‚úÖ –Æ–ù–ò–¢-–¢–ï–°–¢–´ —Å `mock`

```python
class ParserTest(unittest.TestCase):

    def test_find_string(self):
        mocked_file = mock_open(read_data="xoxooxxooxoxo")
        with patch("builtins.open", mocked_file):
            result = file_parser("fake_path.txt", "o")
            self.assertEqual(result, "Found 6 strings")

    def test_replace_string(self):
        # read_data —Å–æ–¥–µ—Ä–∂–∏—Ç 4 'x', –∑–∞–º–µ–Ω–∏–º –∏—Ö –Ω–∞ 'o'
        mocked_file = mock_open(read_data="xx xx")
        with patch("builtins.open", mocked_file) as m:
            result = file_parser("fake_path.txt", "x", "o")
            self.assertEqual(result, "Replaced 4 strings")
            # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤ —Ñ–∞–π–ª –∑–∞–ø–∏—Å–∞–Ω–æ –∑–∞–º–µ–Ω—ë–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            m().write.assert_called_once_with("oo oo")

    def test_file_not_found(self):
        with patch("builtins.open", side_effect=FileNotFoundError()):
            result = file_parser("nonexistent.txt", "a")
            self.assertEqual(result, "File not found")
```

---

## üß™ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç `mock_open`?

* `mock_open(read_data="...")` —Å–æ–∑–¥–∞—ë—Ç —Ñ–µ–π–∫–æ–≤—ã–π —Ñ–∞–π–ª —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º.
* `patch("builtins.open", ...)` –∑–∞–º–µ–Ω—è–µ—Ç `open` –Ω–∞ –Ω–∞—à—É –∑–∞–≥–ª—É—à–∫—É.
* `m().write.assert_called_once_with(...)` –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, **—á—Ç–æ —Ñ–∞–π–ª –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω** –Ω–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º.

---

## ‚úÖ –ö–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã

–í–Ω–∏–∑—É —Ñ–∞–π–ª–∞ –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å:

```python
if __name__ == "__main__":
    unittest.main()
```

---

## üì¶ –ò—Ç–æ–≥–æ

| –ö–æ–º–ø–æ–Ω–µ–Ω—Ç              | –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ                                  |
| ---------------------- | ------------------------------------------- |
| `file_parser`          | –†–∞–±–æ—Ç–∞–µ—Ç —Å —Ñ–∞–π–ª–æ–º: –∏—â–µ—Ç –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ—Ç —Å—Ç—Ä–æ–∫–∏ |
| `mock_open`            | –ü–æ–∑–≤–æ–ª—è–µ—Ç "–ø–æ–¥–º–µ–Ω–∏—Ç—å" —Ñ–∞–π–ª –≤ —Ç–µ—Å—Ç–∞—Ö         |
| `patch()`              | –ó–∞–º–µ–Ω—è–µ—Ç `open()` –Ω–∞ –Ω–∞—à mock               |
| `assert_called_with()` | –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω—ë–Ω   |
| `FileNotFoundError`    | –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞    |

---

–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, —è –ø–æ–∫–∞–∂—É –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–æ **–≤–∂–∏–≤—É—é –ø–æ —à–∞–≥–∞–º** –∏–ª–∏ –ø–æ–º–æ–≥—É –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –ø—Ä–∏ `count == 0`).
