# 1. Create users and subjects data from files
# get_subjects_from_json(subjects_json) -> List[Subject]
# get_users_with_grades(users_json, subjects_json, grades_json) -> List[User]

# 2. Simulate working with the application
# method User.create_user(username, password, role) creates user
# method user.add_score_for_subject(subject:Subject, score: Score) adds score for subject
# function add_user(user, users) adds user to users (in case of uniqueness username)
# function add_subject(subject, subjects) adds subject to subjects (in case of uniqueness title)
# function get_grades_for_user(username:str, user:User, users:list) returns all grades for the user with username (only own grades or for mentor)

# 3. Rewrite the old json-files with new ones
# users_to_json(users, json_file)
# subjects_to_json(subjects, json_file)
# grades_to_json(users, subjects, json_file)

## üß© –ó–∞–≤–¥–∞–Ω–Ω—è –∫–æ—Ä–æ—Ç–∫–æ:
# 1. –ü—Ä–æ—á–∏—Ç–∞—Ç–∏ –∑ `JSON` —Ñ–∞–π–ª—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, –ø—Ä–µ–¥–º–µ—Ç–∏, –æ—Ü—ñ–Ω–∫–∏.
# 2. –ú–∞—Ç–∏ –ª–æ–≥—ñ–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç—É, –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –æ—Ü—ñ–Ω–∫–∏.
# 3. –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ—Ü—ñ–Ω–∫–∏ —É—á–Ω—è.
# 4. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç–∏ JSON-—Ñ–∞–π–ª–∏ –Ω–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏.

## ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–¥—É

### üî∏ Enum –¥–ª—è —Ä–æ–ª–µ–π
# class Role(Enum):
#     TRAINEE = 0
#     MENTOR = 1

# –©–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –º–∞–≥—ñ—á–Ω–∏—Ö —á–∏—Å–µ–ª. `Role.TRAINEE` –∫—Ä–∞—â–µ, –Ω—ñ–∂ –ø—Ä–æ—Å—Ç–æ `0`.

### üî∏ –ú–æ–¥–µ–ª—å –ø—Ä–µ–¥–º–µ—Ç—É, –æ—Ü—ñ–Ω–∫–∏ —Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
# @dataclass
# class Subject:
#     title: str
#     id: str = field(default_factory=lambda: uuid4().hex)

# @dataclass
# class Score:
#     value: str

# * `Score` ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±–≥–æ—Ä—Ç–∫–∞ –Ω–∞–¥ –æ—Ü—ñ–Ω–∫–æ—é (`A`, `B`, `C`, ...).
# * `Subject` –º–∞—î `title` —Ç–∞ `id`.

# @dataclass
# class User:
#     username: str
#     password: str
#     role: Role
#     id: str = field(default_factory=lambda: uuid4().hex)
#     grades: dict = field(default_factory=dict)  # subject_id ‚Üí Score

# –£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —î –º–µ—Ç–æ–¥:
# def add_score_for_subject(self, subject: Subject, score: Score):
#     self.grades[subject.id] = score

### üî∏ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
# @classmethod
# def create_user(cls, username, password, role):
#     return cls(username=username, password=password, role=Role(role))

# `classmethod` –∑—Ä—É—á–Ω–∏–π –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∑ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è–º —Ç–∏–ø—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, role ‚Üí Enum).

### üî∏ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ JSON
# def get_subjects_from_json(json_file: str) -> List[Subject]:
#     ...
# def get_users_with_grades(users_json, subjects_json, grades_json) -> List[User]:
#     ...
# 1. –°—Ç–≤–æ—Ä—é—î–º–æ `map` –∑ `subjects` —ñ `users` –∑–∞ `id`.
# 2. –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É –≤ `grades.json` –∑–Ω–∞—Ö–æ–¥–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –¥–æ–¥–∞—î–º–æ –π–æ–º—É –æ—Ü—ñ–Ω–∫—É.

### üî∏ –î–æ–¥–∞–≤–∞–Ω–Ω—è —É —Å–ø–∏—Å–æ–∫ (—É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å):
# def add_user(new_user: User, users: List[User]):
#     if any(u.username == new_user.username for u in users):
#         raise ValueError("Username already exists")
#     users.append(new_user)

# –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç—ñ–≤.

### üî∏ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Ü—ñ–Ω–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
# def get_grades_for_user(username: str, current_user: User, users: List[User]) -> dict:
#     if current_user.role == Role.MENTOR:
#         ...
#     else:
#         if current_user.username != username:
#             raise PermissionError("Access denied")

# * –£—á–µ–Ω—å –º–æ–∂–µ –±–∞—á–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Å–≤–æ—ó –æ—Ü—ñ–Ω–∫–∏.
# * –ú–µ–Ω—Ç–æ—Ä ‚Äî –±—É–¥—å-—è–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

### üî∏ –ó–∞–ø–∏—Å —É JSON
# def users_to_json(users: List[User], json_file: str): ...
# def subjects_to_json(subjects: List[Subject], json_file: str): ...
# def grades_to_json(users: List[User], subjects: List[Subject], json_file: str): ...

## ‚ùó –í–∞–∂–ª–∏–≤–æ
# * `users.json` –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –æ—Ü—ñ–Ω–æ–∫, —Ç–æ–º—É —ó—Ö –±–µ—Ä—É—Ç—å –∑ `grades.json`.
# * `grades.json` –∑–±–µ—Ä—ñ–≥–∞—î –∑–≤‚Äô—è–∑–æ–∫ `user_id` ‚Üí `subject_id` ‚Üí `score`.

## üß™ –Ø–∫ –ø—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏?
# 1. –°—Ç–≤–æ—Ä–∏ 3 JSON-—Ñ–∞–π–ª–∏ (`users.json`, `subjects.json`, `grades.json`) —è–∫ —É –ø—Ä–∏–∫–ª–∞–¥—ñ.
# 2. –í–∏–∫–ª–∏—á:
# subjects = get_subjects_from_json("subjects.json")
# users = get_users_with_grades("users.json", "subjects.json", "grades.json")

# 3. –î–æ–¥–∞–π –Ω–æ–≤—É –æ—Ü—ñ–Ω–∫—É:
# u = users[0]
# s = subjects[0]
# u.add_score_for_subject(s, Score("A"))

# 4. –ó–±–µ—Ä–µ–∂–∏ –Ω–∞–∑–∞–¥:
# users_to_json(users, "new_users.json")
# grades_to_json(users, subjects, "new_grades.json")
