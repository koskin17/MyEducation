# Write the programm that calculate total price with discount by the products.
# Use class Product(name, price, count) and class Cart. In class Cart you can add the products.
# Discount depends on count product:
# count	discount
# at least 5	5%
# at least 7	10%
# at least 10	20%
# at least 20	30%
# more than 20	50%

# Write unittest with class CartTest and test all methods with logic

# import unittest
# class Product:
#     pass
# class Cart:
#     pass
# class CartTest(unittest.TestCase):
#     pass

# –ó–∞–¥–∞—á–∞ ‚Äî —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å **–∫–æ—Ä–∑–∏–Ω—É –ø–æ–∫—É–ø–æ–∫ (Cart)**, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å **—Ç–æ–≤–∞—Ä—ã (Product)**, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Ü–µ–Ω—É –∏ **–ø—Ä–∏–º–µ–Ω—è—Ç—å —Å–∫–∏–¥–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞**.

## üìå –ó–ê–î–ê–ß–ê –í –î–ï–¢–ê–õ–Ø–•
# –¢—ã –¥–æ–ª–∂–µ–Ω —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å:
# 1. –ö–ª–∞—Å—Å `Product` ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º, —Ü–µ–Ω–æ–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º.
# 2. –ö–ª–∞—Å—Å `Cart` ‚Äî –∫–æ—Ä–∑–∏–Ω–∞, –≤ –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –∏ —Å—á–∏—Ç–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É —Å–æ —Å–∫–∏–¥–∫–∞–º–∏.
# 3. –ö–ª–∞—Å—Å `CartTest` ‚Äî –º–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–µ —Ä–∞–±–æ—Ç—É –∫–æ—Ä–∑–∏–Ω—ã.

## ‚úÖ –®–ê–ì 1. –ö–ª–∞—Å—Å `Product`
# class Product:
#     def __init__(self, name, price, count):
#         self.name = name
#         self.price = price
#         self.count = count

### üîç –ß—Ç–æ –∑–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:
# * `self.name`: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `"Apple"`).
# * `self.price`: –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, `2.5`).
# * `self.count`: –°–∫–æ–ª—å–∫–æ —à—Ç—É–∫ –∫—É–ø–∏–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `10`).

## ‚úÖ –®–ê–ì 2. –ö–ª–∞—Å—Å `Cart`
# class Cart:
#     def __init__(self):
#         self.products = []

#     def add_product(self, product: Product):
#         self.products.append(product)

#     def get_total_count(self):
#         return sum(product.count for product in self.products)

#     def get_discount(self):
#         count = self.get_total_count()
#         if count > 20:
#             return 0.50
#         elif count >= 20:
#             return 0.30
#         elif count >= 10:
#             return 0.20
#         elif count >= 7:
#             return 0.10
#         elif count >= 5:
#             return 0.05
#         return 0.0

#     def get_total_price(self):
#         total = sum(product.price * product.count for product in self.products)
#         discount = self.get_discount()
#         return total * (1 - discount)

### üîç –ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –º–µ—Ç–æ–¥–∞–º:
# | –ú–µ—Ç–æ–¥               | –ß—Ç–æ –¥–µ–ª–∞–µ—Ç                                                 |
# | ------------------- | ---------------------------------------------------------- |
# | `add_product`       | –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É (`self.products`)                |
# | `get_total_count()` | –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ              |
# | `get_discount()`    | –°–º–æ—Ç—Ä–∏—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –≤—ã–±–∏—Ä–∞–µ—Ç —Å–∫–∏–¥–∫—É –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º     |
# | `get_total_price()` | –°—á–∏—Ç–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Ü–µ–Ω—É —Å–æ —Å–∫–∏–¥–∫–æ–π: (—Ü–µ–Ω–∞ √ó –∫–æ–ª-–≤–æ) ‚àí —Å–∫–∏–¥–∫–∞ |

## ‚úÖ –®–ê–ì 3. –¢–µ—Å—Ç—ã (–º–æ–¥—É–ª—å `unittest`)
# import unittest

# class CartTest(unittest.TestCase):
#     def test_add_single_product(self):
#         cart = Cart()
#         p1 = Product("Apple", 2, 1)
#         cart.add_product(p1)
#         self.assertEqual(len(cart.products), 1)

#     def test_total_count(self):
#         cart = Cart()
#         cart.add_product(Product("Apple", 2, 4))
#         cart.add_product(Product("Banana", 1, 3))
#         self.assertEqual(cart.get_total_count(), 7)

#     def test_discount_levels(self):
#         cart = Cart()
#         cart.add_product(Product("Apple", 1, 4))
#         self.assertEqual(cart.get_discount(), 0.0)

#         cart.add_product(Product("Apple", 1, 1))  # –ò—Ç–æ–≥–æ 5
#         self.assertEqual(cart.get_discount(), 0.05)

#         cart.add_product(Product("Apple", 1, 2))  # –ò—Ç–æ–≥–æ 7
#         self.assertEqual(cart.get_discount(), 0.10)

#         cart.add_product(Product("Apple", 1, 3))  # –ò—Ç–æ–≥–æ 10
#         self.assertEqual(cart.get_discount(), 0.20)

#         cart.add_product(Product("Apple", 1, 10))  # –ò—Ç–æ–≥–æ 20
#         self.assertEqual(cart.get_discount(), 0.30)

#         cart.add_product(Product("Apple", 1, 1))  # –ò—Ç–æ–≥–æ 21
#         self.assertEqual(cart.get_discount(), 0.50)

#     def test_total_price_with_discount(self):
#         cart = Cart()
#         cart.add_product(Product("Apple", 10, 10))  # –°—É–º–º–∞: 100
#         # –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–∫–∏–¥–∫–∞ 20% => —Ü–µ–Ω–∞ 80
#         self.assertEqual(cart.get_total_price(), 80.0)

## ‚úÖ –ü–æ–ª–Ω—ã–π –∫–æ–¥ —Ü–µ–ª–∏–∫–æ–º
import unittest

class Product:
    # Class for product in Cart
    def __init__(self, name, price, count):
        self.name = name
        self.price = price
        self.count = count


class Cart:
    # Class for Cart with products
    def __init__(self, products=None):
        self.products = list(products) if products else []

    # | –ö–æ–¥              | –ü–æ—è—Å–Ω–µ–Ω–∏–µ                                                  |
    # | ---------------- | ---------------------------------------------------------- |
    # | `products=None`  | –ê—Ä–≥—É–º–µ–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –ú–æ–∂–Ω–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤. |
    # | `if products`    | –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥–∞–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ.                      |
    # | `list(products)` | –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ã—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —ç—Ç–æ –∫–æ—Ä—Ç–µ–∂). |
    # | `[]`             | –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ ‚Äî –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞—è.                  |


    # Add product to Cart
    def add_product(self, product: Product):
        self.products.append(product)

    # Get total count of products in Cart
    def get_total_count(self):
        return sum(product.count for product in self.products)

    # Get discount based on total count of products
    def get_discount(self):
        count = self.get_total_count()
        if count > 20:
            return 0.50
        elif count >= 20:
            return 0.30
        elif count >= 10:
            return 0.20
        elif count >= 7:
            return 0.10
        elif count >= 5:
            return 0.05
        return 0.0

    # Get total price with discount applied
    def get_total_price(self):
    # The discount is applied to each product separately, depending on its count.
        total = 0
        for product in self.products:
            count = product.count
            price = product.price

            # Determine the discount by quantity
            if count > 20:
                discount = 0.5
            elif count >= 20:
                discount = 0.3
            elif count >= 10:
                discount = 0.2
            elif count >= 7:
                discount = 0.1
            elif count >= 5:
                discount = 0.05
            else:
                discount = 0

            total += price * count * (1 - discount)

        return total


# Test for logic of Cart
class CartTest(unittest.TestCase):
    # Test adding a single product to Cart
    def test_add_single_product(self):
        cart = Cart()
        p1 = Product("Apple", 2, 1)
        cart.add_product(p1)
        self.assertEqual(len(cart.products), 1)

    # Test total count of products in Cart
    def test_total_count(self):
        cart = Cart()
        cart.add_product(Product("Apple", 2, 4))
        cart.add_product(Product("Banana", 1, 3))
        self.assertEqual(cart.get_total_count(), 7)

    # Test discount levels based on total count of products
    def test_discount_levels(self):
        cart = Cart()
        cart.add_product(Product("Apple", 1, 4))
        self.assertEqual(cart.get_discount(), 0.0)

        cart.add_product(Product("Apple", 1, 1))  # 5
        self.assertEqual(cart.get_discount(), 0.05)

        cart.add_product(Product("Apple", 1, 2))  # 7
        self.assertEqual(cart.get_discount(), 0.10)

        cart.add_product(Product("Apple", 1, 3))  # 10
        self.assertEqual(cart.get_discount(), 0.20)

        cart.add_product(Product("Apple", 1, 10))  # 20
        self.assertEqual(cart.get_discount(), 0.30)

        cart.add_product(Product("Apple", 1, 1))  # 21
        self.assertEqual(cart.get_discount(), 0.50)

    # Test total price with discount applied
    def test_total_price_with_discount(self):
        cart = Cart()
        cart.add_product(Product("Apple", 10, 10))  # 100
        self.assertEqual(cart.get_total_price(), 80.0)


if __name__ == "__main__":
    unittest.main()

## üß† –ó–∞—á–µ–º –≤—Å—ë —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è?
# | –≠–ª–µ–º–µ–Ω—Ç          | –ü–æ—á–µ–º—É –Ω—É–∂–µ–Ω                                          |
# | ---------------- | ----------------------------------------------------- |
# | –ö–ª–∞—Å—Å `Product`  | –ß—Ç–æ–±—ã —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ª–æ–≥–∏–∫—É —Ç–æ–≤–∞—Ä–∞ –∏ –∫–æ—Ä–∑–∏–Ω—ã. –ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å. |
# | –ö–ª–∞—Å—Å `Cart`     | –£–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä–∞–º–∏, —Å—á–∏—Ç–∞–µ—Ç –æ–±—â—É—é —Ü–µ–Ω—É –∏ —Å–∫–∏–¥–∫—É.      |
# | `get_discount()` | –õ–æ–≥–∏–∫–∞ —Å–∫–∏–¥–∫–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ ‚Äî –ø—Ä–æ—â–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å.     |
# | `unittest`       | –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–µ ‚Äî –±—ã—Å—Ç—Ä–æ, –Ω–∞–¥—ë–∂–Ω–æ.        |

