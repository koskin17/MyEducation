# –ï—Å—Ç—å –≤–æ—Ç —Ç–∞–∫–∞—è –∑–∞–¥–∞—á–∞:
# You have function divide
# def divide(num_1, num_2):
# 	return float(num_1) / num_2
	
# Please, write the code with unit tests for the function "divide":
# minimum 3 tests
# must chek all flows
# all test must be pass
# no failures
# no skip

# –ö –Ω–µ–π –µ—Å—Ç—å –≤–æ—Ç —Ç–∞–∫–∞—è –∑–∞–≥–∞—Ç–æ–≤–∫–∞ –∫–æ–¥–∞:
# import unittest

# class DivideTest(unittest.TestCase):
#     #you code

# –ó–∞–¥–∞—á–∞ - —É—á–∏—à—å—Å—è **—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏**. –≠—Ç–æ –Ω–∞–≤—ã–∫, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ª–∏—á–∞–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ –æ—Ç —Ç–µ—Ö, –∫—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–∏—à–µ—Ç "—á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–æ".

## üìå –ó–ê–î–ê–ß–ê
# –ï—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è:
# def divide(num_1, num_2):
#     return float(num_1) / num_2

# –ù—É–∂–Ω–æ:
# 1. ‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –º–∏–Ω–∏–º—É–º **3 —é–Ω–∏—Ç-—Ç–µ—Å—Ç–∞**
# 2. ‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å **–≤—Å–µ –≤–µ—Ç–∫–∏** –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:

#    * –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ
#    * –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 0 (–æ—à–∏–±–∫–∞)
#    * –¥–µ–ª–µ–Ω–∏–µ, –≥–¥–µ –æ–¥–∏–Ω –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–æ–∫–∞-—á–∏—Å–ª–æ `"10"`
# 3. üß™ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ **–≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç**: –Ω–µ—Ç –æ—à–∏–±–æ–∫, –Ω–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.

## ‚úÖ –®–ê–ì –ó–ê –®–ê–ì–û–ú
### üìå –®–∞–≥ 1. –ß—Ç–æ –¥–µ–ª–∞–µ—Ç `divide()`?
# –û–Ω–∞:
# * –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç `num_1` –≤ `float`
# * –¥–µ–ª–∏—Ç –Ω–∞ `num_2`
# –ù–æ: **–µ—Å–ª–∏ `num_2 == 0` ‚Üí –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞** `ZeroDivisionError`.

### ‚úè –®–∞–≥ 2. –ß—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å?
# | –°—Ü–µ–Ω–∞—Ä–∏–π          | –ü—Ä–∏–º–µ—Ä           | –û–∂–∏–¥–∞–Ω–∏–µ            |
# | ----------------- | ---------------- | ------------------- |
# | ‚úÖ –û–±—ã—á–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ | `divide(10, 2)`  | `5.0`               |
# | ‚ö† –î–µ–ª–µ–Ω–∏–µ –Ω–∞ 0    | `divide(10, 0)`  | `ZeroDivisionError` |
# | ‚úÖ –°—Ç—Ä–æ–∫–æ–≤–æ–µ —á–∏—Å–ª–æ | `divide("6", 3)` | `2.0`               |

### ‚úÖ –®–∞–≥ 3. –ü–∏—à–µ–º —Ç–µ—Å—Ç—ã
import unittest

def divide(num_1, num_2):
    return float(num_1) / num_2

class DivideTest(unittest.TestCase):

    def test_correct_division(self):
        self.assertEqual(divide(10, 2), 5.0)

    def test_zero_division(self):
        with self.assertRaises(ZeroDivisionError):
            divide(10, 0)

    def test_string_input(self):
        self.assertEqual(divide("6", 3), 2.0)

# –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if __name__ == '__main__':
    unittest.main()

## üîç –û–ë–™–Ø–°–ù–ï–ù–ò–ï
# | –ß–∞—Å—Ç—å                            | –ß—Ç–æ –¥–µ–ª–∞–µ—Ç                                                    |
# | -------------------------------- | ------------------------------------------------------------- |
# | `assertEqual(a, b)`              | –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ `a == b`. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Ç–µ—Å—Ç —É–ø–∞–ª                 |
# | `with self.assertRaises(Error):` | –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤ —ç—Ç–æ–º –±–ª–æ–∫–µ **–≤–æ–∑–Ω–∏–∫–Ω–µ—Ç –æ—à–∏–±–∫–∞** —Ç–∏–ø–∞ `Error` |
# | `unittest.main()`                | –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ |

## ‚úÖ –ß—Ç–æ –≤ –∏—Ç–æ–≥–µ?
# * 3 —Ç–µ—Å—Ç–∞: ‚úî –æ–±—ã—á–Ω—ã–π, ‚úî –æ—à–∏–±–∫–∞, ‚úî —Å—Ç—Ä–æ–∫–∞
# * –í—Å–µ **–ø–æ–∫—Ä—ã–≤–∞—é—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–ª—É—á–∞–∏**
# * –í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
