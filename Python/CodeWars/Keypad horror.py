# Description:
# Having two standards for a keypad layout is inconvenient!
# Computer keypad's layout:
# 7 8 9  \n
# 4 5 6  \n
# 1 2 3  \n
#   0 \n

# Cell phone keypad's layout:
# 1 2 3\n 
# 4 5 6\n  
# 7 8 9\n  
#   0\n

# Solve the horror of unstandardized keypads by providing a function that converts computer input to a number as if it was typed on a phone.

# Example:
# "789" -> "123"

# Notes:
# You get a string with numbers only

def computer_to_phone(numbers):
    # dictionary to map computer keypad numbers to phone keypad numbers
    keyboard_dictionary = {
        "7": "1",
        "8": "2",
        "9": "3",
        "4": "4",
        "5": "5",
        "6": "6",
        "1": "7",
        "2": "8",
        "3": "9",
        "0": "0"
    }
    
    phone_keyboard = []
    for i in range(len(numbers)):
        phone_keyboard.append(keyboard_dictionary[numbers[i]])
    
    return "".join(phone_keyboard)

computer_to_phone("0789456123") #"0123456789" #"Testing computer_to_phone('0789456123')")
computer_to_phone("000") #"000" #"Testing computer_to_phone('000')")
computer_to_phone("94561") #"34567" #"Testing computer_to_phone('94561')")


## ‚úÖ –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è:
def computer_to_phone(numbers):
    mapping = {
        "7": "1", "8": "2", "9": "3",
        "4": "4", "5": "5", "6": "6",
        "1": "7", "2": "8", "3": "9",
        "0": "0"
    }
    return ''.join(mapping[d] for d in numbers)

## üß™ –ü—Ä–∏–∫–ª–∞–¥–∏:
# print(computer_to_phone("789"))     # "123"
# print(computer_to_phone("1234567890"))  # "7894561230"


## üí° –ß–æ–º—É —Ü–µ –∫—Ä–∞—â–µ?

# | –©–æ                            | –ü–æ—è—Å–Ω–µ–Ω–Ω—è                                                     |
# | ----------------------------- | ------------------------------------------------------------- |
# | `mapping[d] for d in numbers` | –ß–∏—Ç–∞—î—Ç—å—Å—è –ø—Ä–∏—Ä–æ–¥–Ω–æ: *–¥–ª—è –∫–æ–∂–Ω–æ—ó —Ü–∏—Ñ—Ä–∏ ‚Äî –∑–Ω–∞–π–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å* |
# | `''.join(...)`                | –®–≤–∏–¥–∫–æ –æ–±'—î–¥–Ω—É—î —Å–ø–∏—Å–æ–∫ —Ä—è–¥–∫—ñ–≤ –≤ –æ–¥–∏–Ω —Ä—è–¥–æ–∫                    |
# | –ú–µ–Ω—å—à–µ –∫–æ–¥—É                   | –õ–µ–≥—à–µ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —ñ –º–µ–Ω—à–µ —à–∞–Ω—Å—ñ–≤ –ø–æ–º–∏–ª–∏—Ç–∏—Å—è                  |


## üì¶ –†—ñ—à–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ:
def computer_to_phone(numbers):
    trans_table = str.maketrans("789123", "123789")
    return numbers.translate(trans_table)

# üìå –ü–æ—è—Å–Ω–µ–Ω–Ω—è:
# | –û—Ä–∏–≥—ñ–Ω–∞–ª                                                     | –ö—É–¥–∏ –º–∞–ø–∏—Ç—å—Å—è |
# | ------------------------------------------------------------ | ------------- |
# | `7 8 9`  ‚Üí `1 2 3`                                           |               |
# | `1 2 3`  ‚Üí `7 8 9`                                           |               |
# | `4 5 6` —ñ `0` ‚Äî –Ω–µ –∑–º—ñ–Ω—é—é—Ç—å—Å—è, —Ç–æ–º—É —ó—Ö –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑—É–≤–∞—Ç–∏ |               |

## üß™ –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
print(computer_to_phone("789"))         # "123"
print(computer_to_phone("123"))         # "789"
print(computer_to_phone("456"))         # "456"
print(computer_to_phone("7891234560"))  # "1237894560"

## üß† –ü–µ—Ä–µ–≤–∞–≥–∏:
# * ‚ú® –°—É–ø–µ—Ä–∫–æ—Ä–æ—Ç–∫–æ
# * ‚ö° –ü—Ä–∞—Ü—é—î –¥—É–∂–µ —à–≤–∏–¥–∫–æ (–ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞ —Ä—ñ–≤–Ω—ñ C)
# * üíº –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ —Ç–∞ —á–∏—Ç–∞—î—Ç—å—Å—è –¥–æ–±—Ä–µ


