# Замена символов в строке
# Вариант 1
def html_special_chars(data):
    symbols = {'<': '&lt;', '>': '&gt;', '"': '&quot;', '&': '&amp;'}
    return "".join(symbols.get(x, x) for x in data)

# Вариант 2
def html_special_chars(data):
    trans = {"<": "&lt;",
             ">": "&gt;",
             "\"": "&quot;",
             "&": "&amp;"
             }
    new_str = ""
    for symbol in data:
        if symbol in trans.keys():
            new_str += trans.get(symbol)
        else:
            new_str += symbol

    return new_str

d1 = {'a': 7}
d2 = dict(a=7)
d3 = dict.fromkeys([1,2,3,4,5], 'value')

price = {'meat':3, 'bread':1, 'potato':0.5, 'water':0.2}

users = {
    'Alex7': {'password': 9856214, 'id': 1957},
    'Jimmy99': {'password': 1236487, 'id': 9654},
    'Bob33': {'password': 9546752, 'id': 6453}
    }
def buy():
    pay = 0
    while True:
        enter = input ('Что покупаем?\n')
        if enter == 'end':
            break
        pay += price[enter]
    return pay

# методы словарей
d4 = {'a': 7, 'b': 9}
d5 = dict([[1,2],[3,4],[5,6]])
d6 = dict.fromkeys([1,2,3,4,5], 'value')

copy_d4 = d4.copy() # метод copy для копирования словаря в другую переменную
print(d1.items())   # метод items возвращает список из кортежей, в каждом кортеже
                    # пара значение - ббывший ключ и бывшее значение.
                    # этот метод нужен для работы со словарём при помощи цикла For
print(d1.keys())    # возвращает ключи в словаре в виде списка - нужен для цикла
print(d1.values())  # возвращает значения в словаре в виде списка
print('Был словарь: ', d4)
print('Добавляем в него значения из словаря d5: ', d5)
d4.update(d5)  # позволяет добавлять ключ+значение из одного словаря в другой
print('Получаем словать d4:', d4)

# если мы пытаемся получить значение из словаря, которого нет,
# то появится ошибка
# но можно сделать предварительную или защитную проверку
if 'c' in d1:
    d1['c']

# или мы можем взять это значение из словаря при помощи методов
y = d1.get('c')
print('В том случае ошибка выводится не будет, но выведится значение по умолчанию: none')
print(y)
# или же можно добавить своё значение по умолчанию
y = d1.get('c', 'value')
print(y)

'''
Применение метода get для получения значений словаря
'''
books = {
    "Life of Pi": "Adventure Fiction", 
    "The Three Musketeers": "Historical Adventure",
    "Watchmen": "Comics", 
    "Bird Box": "Horror",
    "Harry Potter":"Fantasy Fiction",
    "Good Omens": "Comedy"
}

book = input()

if book in books:
    print(books.get(book))
else:
    print('Not found')


print('Метод pop позволяте не просто удалить из словаря ключ+значение, а еще и венуть их в переменную')
t = d4.pop('a')
print(t, '\n',
      d4)

# варианты итерации и переборки словарей при помощи цикла for
price2 = {'meat':3, 'bread':1, 'potato':0.5, 'water':0.2}
print('Был прайс: ', price2)
for i in price2:
    price2[i] = round(price2[i] * 0.85, 2)      # функция round округляет число до указанного кол-ва знаков после запятой

print('Добавили скидку в 15% на все цены и прайс получился:', price2)

new_price = {}  # создам новый прайс (пустой), чтобы не менять имеющийся прайс
for i in price2:
    new_price[i] = round(price2[i] * 0.85, 2)
print('Первоначальный прайс выгляди так:', price2)
print('Новый прайс new_price выглядит так:', new_price)
print('')

print('Представление словаря в виде списка со значениями в виде кортежей для итерации')
price3 = {'meat':3, 'bread':1, 'potato':0.5, 'water':0.2}
for i in price3.items():
    print(i)

print('Для работы с кортежем надо его распаковать на 2 переменные. Это делается прямо в цикле')
for key, value in price.items():
    print(key)
    print(value)

print('Может так получиться, что надо поменять местами ключи и значения.')
new = {}
for key, value in price3.items():
    new[value] = key
print(new)
print('')

print('Если необходимо вывести список значений из словаря, то можно values словаря приравнять к переменной и вывести эту переменную')
print('Изначально список выглядит так: \n', new)
x = new.values()
print('После присвоения значений values из словаря переменной Х список в переменной Х выглядит так: \n', x)
'''
В этом случае Х является объектом представления.
Его можно при помощи функции list() конвертировать к список
'''
print('Словарь можно интерировать / перебирать при помощи цикла for')
price4 = {'meat':3, 'bread':1, 'potato':0.5, 'water':0.2}
for value in price4.values():
    print(value)
'''
Так можно работать со значениями словаря не затрагивая сам словарь
'''
print('')
print('Аналогично работе с values (значениями ключей в словаре), можно работать и с самим ключами словаря keys')
print('Изначально ключи keys в словаре выглядят так:', price4.keys())
print('В этом случае возвращается объект представления, но только из ключей словаря')
print('И по нему уже можно провести интерацию / перебор:')
for key in price4.keys():
    print(key)
'''
Смысл работы / итерации словарей только по ключам или только по значениям в том, что при итерировании всего словаря в цикле for работа проводится со всем словарем.
Это занимает больше памяти.
Если только с ключами или со значениями ключей, то памяти занимает меньше и работа выполняется быстрее.
'''

''' Сумма значений в словаре.
Метод dic.values() возвращает все значения ключей в словаре.
Следовательно при использовании этого метода можно сразу
получить сумму всех значение при помощи метода sum()
Т.е. sum(dic.values()) '''

''' Посчитать кол-во ключей в словаре можно обычным методом len(),
т.е. len(dic)'''

