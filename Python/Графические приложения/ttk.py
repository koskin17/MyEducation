from tkinter import *
from tkinter import ttk

root = Tk()
root.geometry('400x600+400+200')

##Button(root, text = "Button 1", padx = 40, pady = 5).pack(pady = 10)
##Button(root, text = "Button 2", padx = 40, pady = 5).pack()
##Entry(root).pack(pady = 10)
##
##'''
##Для изменения дизайна в соответствии с дизайном операционной системы
##при помощи модуля ttk к элементу нужно обращаться через этот модуль.
##Нужно учитывать, что модуль ttk поддерживает не все
##опции, которые поддерживает tkinter
##'''
##ttk.Entry(root).pack(pady = 10)
##ttk.Button(root, text = "Button 1", width = 21).pack()
##ttk.Button(root, text = "Button 2", width = 21).pack()
##'''
##Если атрибут width (ширина) в модуле ttk есть,
##то атрибута height (высота) - нет.
##Для установки высоту нужно добавлять свой стиль для оформления.
##Для этого используется класс Style.
##Для этого создаётся объект класса Style.
##'''
##s = ttk.Style()
##'''
##Посмотреть набор тем для объекта можно методом
##theme_names
##'''
##print(s.theme_names())
##
##'''
##Если надо посмотреть тему, которая используется,
##в том числе и по умолчанию, то используется
##theme_use()
##'''
##print(s.theme_use())
##
##'''
##Для того, чтобы переопределить тему,
##используется theme_use, но с указанием темы, которая нужна
##'''
##s.theme_use('xpnative')
##ttk.Entry(root).pack(pady = 10)
##ttk.Button(root, text = "Button 1", width = 21).pack()
##
##'''
##Если нужно точечно подредактировать стиль виджета,
##то используется метод configure.
##Первый параметр - название стиля. Если точка ".",
##то это означает, что все виджеты / элементы.
##Дальше идут параметры.
##В ttk названия нужно писать полностью.
##Если меняется стиль элементов одного типа,
##то пишется большая буква Т, а потом имя элемента.
##'''
##s.configure('.', foreground = "red")
##s.configure('TButton', foreground = "blue", padding = 10)
##'''
##Если стиль надо применить только к одному конкретному элементу,
##то пишется префикс через точку ".",
##а в атрибутах конкретного элемента прописываем
##style = "префикс + название элемента"
##style = "blue.TButton"
##'''
##s.configure('blue.TButton', foreground = "blue", padding = 10)
##ttk.Button(root, text = "Button 1", width = 21, style = "blue.TButton").pack()

'''
Выпадающий список или Combobox
'''

select = ttk.Combobox(root, values = ["Январь", "Ферваль", "Март",
                                      "Апрель", "Май"])
select.place(relx = 0.5, rely = 0.5, anchor = CENTER)
'''
По умолчанию выпадающий список размещается с пустым начальным полем.
Для установки первого поля списка по умолчанию применяется метод
current() и в нём указывается индекс элемента списка, который
будет отображаться по умолчанию.
Если применять метод current без параметра (индекса), то он возвращает индекс
выбранного элемента.
'''
select.current(0)

'''
Для отслеживания другого элемента списка к списку применяется метод Bind
с событием ComboboxSelected и записывается оно в кавычках и скобках "<<>>".
После этого можно указать функцию, которая будет вызываться при конкретном
выборе.
При этом ВАЖНО в вызываемую функцию передавать параметр по умолчанию EVENT
Метод current() без параметра возвращает индекс выбранного элемента.
Также индекс можно получить методом get()
'''
def choose(event):
    print(select.current(), select.get())
    
select.bind("<<ComboboxSelected>>", choose)


root.mainloop()

