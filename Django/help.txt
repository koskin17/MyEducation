-- Создание проекта
1. Создаётся папка проекта
2. В папке проекта создаётся виртуальное окружение командой python -m venv venv
    (где venv — это имя виртуального окружения, вы можете выбрать любое другое).
3. Активируется виртуальное окружение командой venv\Scripts\activate
    После активации в терминале появится название вашего окружения, например, (venv).
4. После этого устанавливает Django командой pip install django и лучше указать версию Django.
    В случае с store-server устанавливалась версия LTS 2.2.18
5. После этого можно создавать сам проект на Django. Это можно сделать прям из интерфейса Django командой:
    django-admin startproject store
    В результате в папке проектов будет создана директория с названием проекта и будет файл manage.py
    Через manage.py мы можем обращаться к скриптам, а также через него запускается сервер Django

    В папке с названием проекта есть 4 файла:
    - __init__.py - файл для Python, чтобы сам Python рассматривал весь каталог как пакет, т.е. группу из 4-х модулей;
    - settings.py - отвечает за все настройки для проекта:
        - переменная BASE _DIR хранит абсолютный путь к нашему проекту и её можно использовать везде в проекте;
        - SECRET_KEY - секретный ключ для шифровки передаваемых данных;
        - DEBUG - если включен, то мы видим информацию обо всех ошибках. Эту переменную выключаем (ставим False) при переносе на сайт;
        - ALLOWED_HOSTS - содержит хосты, которые доступны для нашего сервера. Обычно указываается звёздочка - '*',
        что подразумевает, что сайт доступен для любых хостов;
        - INSTALLED_APPS - переменная отвечает за все установленные приложения. Весь проект на Django строится на приложениях,
        которые являются отдельными обособленными частями проекта. Здесь указываются все эти приложения;
        - MIDDLEWARE - хранит в себе промежуточные слои между сервером и клиентом (моб.приложение, сайт и т.д.).
        Именно в этих промежуточных слоях хранится информация о сесси пользователя, про аутентификацию и т.д.;
        - ROOT_URLCONF - хранит путь, где хранятся главные адреса нашего сайта;
        - TEMPLATES - хранит в себе информацию про шаблоны;
        - DATABASES - хранит в себе информацию о том, с какой БД работает наш проект;
        - AUTH_PASSWORD_VALIDATOR - это уже работа с паролями;

        
    - url.py - он хранит url адреса всех будущих страниц;
    - wsgi.py - предназначен для того, чтобы мы могли развернуть наш проект в самом интернете.
6. Запускаем терминал командой python manage.py runserver.
    Сразу отобразятся ошибки про миграции. Пока на них не обращаем внимание.
    В результате по адресу http://127.0.0.1:8000/ или localhost:8000 будет запущен наш проект и должна
    отобразиться стартовая страница Django

7. Создание приложение 
    Создание приложения делается командой:
        python manage.py startapp "имя приложения"
    В результате в папке проекта будет создана папка с названием приложения, которое мы указали.
    Файлы в каталоге приложения:
    - каталог MIGRATION хранит в себе все файлы миграций, которые преднаначены для дальнейшего создания БД;
    - __init__.py - стандартный файл Python;
    - admin.py - содержит в себе информацию о том, какую таблицу из БД отображать в админ панели;
    - apps.py - хранит информацию о самом приложении;
    - models.py - хранит в себе всю информацию о таблицах будущей БД, т.е. в нём описываются таблицы БД с типами данных и т.д.;
    - test.py - хранит информацию о тестах для логики, которую мы пишем и сразу рекомендуется писать тест под логику,
        а потом уже саму логику;
    - views.py - харнит в себе функции, отвечающие за отображение информации на страницах сайта
    После этого его необходимо обязательно прописать в переменной INSTALLED_APPS в файле settings.py.
        Хорошо читается, если свои приложения отделить пустой строкой от приложений Django, которые по умолчанию

-- Отображение страниц в Django делается в файле view.py в папке нашего приложения.
    В этом файле создаются так называемые контроллеры, отвечающие за работу логики или за отображение html-шаблонов.
    Контроллеры - это и есть вьюшки, а они представляют собою функции.

--- Переноска html-шаблонов или страниц и элементов в проект Django.
    1. Создаётся директория templates.
    2. В templates мы создаём директорию и называем её точно также, как наше приложеиние, т.е. products (к примеру).
        Это делается на тот случай, если будет несколько приложение и у каждого будет свой html-шаблон со своими файлами index.html и т.д.
    3. Далее создаём html-файлы с названиями как в шаблоне сайта и вставляем в них html-код из соответствующих html-файлов.
    4. Далее переносим статические файлы: css, js, vendor и т.д.
    5. После создаём первую view или функцию def в файле views.py.
    6. После создания функции / views мы переходит в url.py и прописываем путь к нашей странице:
                                                                                            path('', index, name = 'index')
        После этого при переходе на главную страницу нашего проекта уже будет отображаться наша главная страница, для которой мы прописал template.
    7. После подключения html-шаблона страницы настраиваем подключение css-файлов и других файлов static.
        Для этого в файле setting в самом конце файла прописываем переменную STATIC-DIR, указывающую на папку, в которой хранятся все файлы static:
            STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'), #os.path.join(BASE_DIR, 'static')
            )
        Т.к. у нас уже есть переменная BASE_DIR, указывающая на путь к нашему проекту, то мы просто функцией join присоединяем к ней / к пути наименование папки, в которой хранится вся static
        После этого в файле index нашего template для всех static-файлов в пути к этим файлам добавляем /static/